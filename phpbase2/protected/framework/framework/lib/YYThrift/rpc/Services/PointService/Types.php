<?php
namespace Services\PointService;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class COMPENSATION_TYPE {
  const HD = 1;
  const EXAM = 2;
  static public $__names = array(
    1 => 'HD',
    2 => 'EXAM',
  );
}

final class SECKILL_STATUS {
  const WILL_KILL = 1;
  const KILLING = 2;
  const NO_SECKILL = 3;
  static public $__names = array(
    1 => 'WILL_KILL',
    2 => 'KILLING',
    3 => 'NO_SECKILL',
  );
}

final class T_SECKILL_PERIOD {
  const ONCE = 1;
  const EVERYDAY = 2;
  const WEEKLY = 3;
  static public $__names = array(
    1 => 'ONCE',
    2 => 'EVERYDAY',
    3 => 'WEEKLY',
  );
}

final class SECKILL_PERIOD_TYPE {
  const ONCE = 1;
  const EVERYDAY = 2;
  const WEEKLY = 3;
  static public $__names = array(
    1 => 'ONCE',
    2 => 'EVERYDAY',
    3 => 'WEEKLY',
  );
}

final class PROD_STATUS {
  const BEFORE_SEND = 1;
  const SEND = 2;
  const OFF_LINE = 3;
  static public $__names = array(
    1 => 'BEFORE_SEND',
    2 => 'SEND',
    3 => 'OFF_LINE',
  );
}

final class COMSUME_TYPE {
  const LING = 1;
  static public $__names = array(
    1 => 'LING',
  );
}

final class TDOU_RECORD_SOURCE {
  const V2_TO_V3_DIFF = 1;
  const LOTTERY = 2;
  const POINT_EXCHANGE = 3;
  const EXAM_POINT_COMPENSATION = 4;
  const TASK_POINT_COMPENSATION = 5;
  const SIGN_IN = 6;
  const GET_NUMBER = 7;
  const TDOU_ACTIVITY = 8;
  const WEIBO_SHARE = 9;
  const INVITE_FRIEND = 10;
  const LOTTERY_USER_BUY = 11;
  const GET_NUMBER_ADD = 12;
  const PLAY_ZHUHAI_GAME = 13;
  const MTQ_LOGIN = 14;
  const CODE_EXCHANGE = 15;
  const SHARE_AWARD = 16;
  const TRUNTABLE_AWARD = 17;
  const ZHYY_SIGN_IN = 18;
  const ZA_DAN_WIN = 19;
  const AUCTION_FROZEN = 20;
  const AUCTION_RELEASE = 21;
  const AUCTION_SOLD = 22;
  const MOBILE_SIGN_IN = 23;
  const MOBILE_ATTENTION_WECHAT = 24;
  const ZT_SIGN_IN = 25;
  const WEBAPP_EXCHANGE_POINT_CARD = 26;
  const ZT_LOTTERY_BUY = 27;
  const ZT_LOTTERY_WIN = 28;
  const SHUAZI_LOGIN = 29;
  const CHECKIN_LOTTERY_USER_BUY = 30;
  const CHECKIN_LOTTERY_WIN = 31;
  const SHUAZI_LOGIN_SPORT = 32;
  const ANDROID_SIGN_IN = 33;
  const WEIXIN_ACT = 34;
  const SHUANZI_SIGN_IN = 35;
  const SYSTEM_RETURN = 36;
  const TDOU_TASK = 37;
  const SHUAZI_LUCKY = 38;
  static public $__names = array(
    1 => 'V2_TO_V3_DIFF',
    2 => 'LOTTERY',
    3 => 'POINT_EXCHANGE',
    4 => 'EXAM_POINT_COMPENSATION',
    5 => 'TASK_POINT_COMPENSATION',
    6 => 'SIGN_IN',
    7 => 'GET_NUMBER',
    8 => 'TDOU_ACTIVITY',
    9 => 'WEIBO_SHARE',
    10 => 'INVITE_FRIEND',
    11 => 'LOTTERY_USER_BUY',
    12 => 'GET_NUMBER_ADD',
    13 => 'PLAY_ZHUHAI_GAME',
    14 => 'MTQ_LOGIN',
    15 => 'CODE_EXCHANGE',
    16 => 'SHARE_AWARD',
    17 => 'TRUNTABLE_AWARD',
    18 => 'ZHYY_SIGN_IN',
    19 => 'ZA_DAN_WIN',
    20 => 'AUCTION_FROZEN',
    21 => 'AUCTION_RELEASE',
    22 => 'AUCTION_SOLD',
    23 => 'MOBILE_SIGN_IN',
    24 => 'MOBILE_ATTENTION_WECHAT',
    25 => 'ZT_SIGN_IN',
    26 => 'WEBAPP_EXCHANGE_POINT_CARD',
    27 => 'ZT_LOTTERY_BUY',
    28 => 'ZT_LOTTERY_WIN',
    29 => 'SHUAZI_LOGIN',
    30 => 'CHECKIN_LOTTERY_USER_BUY',
    31 => 'CHECKIN_LOTTERY_WIN',
    32 => 'SHUAZI_LOGIN_SPORT',
    33 => 'ANDROID_SIGN_IN',
    34 => 'WEIXIN_ACT',
    35 => 'SHUANZI_SIGN_IN',
    36 => 'SYSTEM_RETURN',
    37 => 'TDOU_TASK',
    38 => 'SHUAZI_LUCKY',
  );
}

final class TDOU_RECORD_RELATED_ID_TYPE {
  const LOTTERY_AWARD_ID = 1;
  const POINT_EXCHANGE_USER_PROD_ID = 2;
  const EXAM_ACT_ID = 3;
  const TASK_ACT_ID = 4;
  const ISSUE_ACT_ID = 5;
  const PRIV_ACT_ID = 6;
  const PRIV_ID = 7;
  const GAME_ID = 8;
  const LOTTERY_ACT_ID = 9;
  const EXCHANGE_TDOU_ACT_ID = 10;
  const GAMECENTER_USER_AWARD_ID = 11;
  const ZHYY_DAILY_ACT_ID = 12;
  const AUCTION_LOT_ID = 13;
  const ZT_ID = 14;
  const CHECKIN_LOTTERY_ID = 15;
  static public $__names = array(
    1 => 'LOTTERY_AWARD_ID',
    2 => 'POINT_EXCHANGE_USER_PROD_ID',
    3 => 'EXAM_ACT_ID',
    4 => 'TASK_ACT_ID',
    5 => 'ISSUE_ACT_ID',
    6 => 'PRIV_ACT_ID',
    7 => 'PRIV_ID',
    8 => 'GAME_ID',
    9 => 'LOTTERY_ACT_ID',
    10 => 'EXCHANGE_TDOU_ACT_ID',
    11 => 'GAMECENTER_USER_AWARD_ID',
    12 => 'ZHYY_DAILY_ACT_ID',
    13 => 'AUCTION_LOT_ID',
    14 => 'ZT_ID',
    15 => 'CHECKIN_LOTTERY_ID',
  );
}

class PointCompensation {
  static $_TSPEC;

  public $id = null;
  public $type = null;
  public $yyuid = null;
  public $supplyTime = null;
  public $supplyCount = null;
  public $supplyscore = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'yyuid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'supplyTime',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'supplyCount',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'supplyscore',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['yyuid'])) {
        $this->yyuid = $vals['yyuid'];
      }
      if (isset($vals['supplyTime'])) {
        $this->supplyTime = $vals['supplyTime'];
      }
      if (isset($vals['supplyCount'])) {
        $this->supplyCount = $vals['supplyCount'];
      }
      if (isset($vals['supplyscore'])) {
        $this->supplyscore = $vals['supplyscore'];
      }
    }
  }

  public function getName() {
    return 'PointCompensation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->yyuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->supplyTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->supplyCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->supplyscore);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PointCompensation');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 2);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yyuid !== null) {
      $xfer += $output->writeFieldBegin('yyuid', TType::I32, 3);
      $xfer += $output->writeI32($this->yyuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supplyTime !== null) {
      $xfer += $output->writeFieldBegin('supplyTime', TType::I64, 4);
      $xfer += $output->writeI64($this->supplyTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supplyCount !== null) {
      $xfer += $output->writeFieldBegin('supplyCount', TType::I32, 5);
      $xfer += $output->writeI32($this->supplyCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supplyscore !== null) {
      $xfer += $output->writeFieldBegin('supplyscore', TType::I32, 6);
      $xfer += $output->writeI32($this->supplyscore);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TDouCompensation {
  static $_TSPEC;

  public $id = null;
  public $type = null;
  public $yyuid = null;
  public $supplyCount = null;
  public $supplyscore = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'yyuid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'supplyCount',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'supplyscore',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['yyuid'])) {
        $this->yyuid = $vals['yyuid'];
      }
      if (isset($vals['supplyCount'])) {
        $this->supplyCount = $vals['supplyCount'];
      }
      if (isset($vals['supplyscore'])) {
        $this->supplyscore = $vals['supplyscore'];
      }
    }
  }

  public function getName() {
    return 'TDouCompensation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->yyuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->supplyCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->supplyscore);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TDouCompensation');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 2);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yyuid !== null) {
      $xfer += $output->writeFieldBegin('yyuid', TType::I32, 3);
      $xfer += $output->writeI32($this->yyuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supplyCount !== null) {
      $xfer += $output->writeFieldBegin('supplyCount', TType::I32, 4);
      $xfer += $output->writeI32($this->supplyCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supplyscore !== null) {
      $xfer += $output->writeFieldBegin('supplyscore', TType::I32, 5);
      $xfer += $output->writeI32($this->supplyscore);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TExchangeSeckillDetail {
  static $_TSPEC;

  public $id = null;
  public $prodId = null;
  public $beginTime = null;
  public $endTime = null;
  public $seckillCount = null;
  public $exchangeCount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'prodId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'beginTime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'seckillCount',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'exchangeCount',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['prodId'])) {
        $this->prodId = $vals['prodId'];
      }
      if (isset($vals['beginTime'])) {
        $this->beginTime = $vals['beginTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['seckillCount'])) {
        $this->seckillCount = $vals['seckillCount'];
      }
      if (isset($vals['exchangeCount'])) {
        $this->exchangeCount = $vals['exchangeCount'];
      }
    }
  }

  public function getName() {
    return 'TExchangeSeckillDetail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->prodId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->beginTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seckillCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->exchangeCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TExchangeSeckillDetail');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prodId !== null) {
      $xfer += $output->writeFieldBegin('prodId', TType::I32, 2);
      $xfer += $output->writeI32($this->prodId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->beginTime !== null) {
      $xfer += $output->writeFieldBegin('beginTime', TType::I64, 3);
      $xfer += $output->writeI64($this->beginTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 4);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seckillCount !== null) {
      $xfer += $output->writeFieldBegin('seckillCount', TType::I32, 5);
      $xfer += $output->writeI32($this->seckillCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exchangeCount !== null) {
      $xfer += $output->writeFieldBegin('exchangeCount', TType::I32, 6);
      $xfer += $output->writeI32($this->exchangeCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TExchangeProductSeckillInfo {
  static $_TSPEC;

  public $seckillStatus = null;
  public $killingTime = null;
  public $willKillTime = null;
  public $seckillPrice = null;
  public $seckillPeriod = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'seckillStatus',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'killingTime',
          'type' => TType::STRUCT,
          'class' => '\Services\PointService\TExchangeSeckillDetail',
          ),
        3 => array(
          'var' => 'willKillTime',
          'type' => TType::STRUCT,
          'class' => '\Services\PointService\TExchangeSeckillDetail',
          ),
        4 => array(
          'var' => 'seckillPrice',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'seckillPeriod',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['seckillStatus'])) {
        $this->seckillStatus = $vals['seckillStatus'];
      }
      if (isset($vals['killingTime'])) {
        $this->killingTime = $vals['killingTime'];
      }
      if (isset($vals['willKillTime'])) {
        $this->willKillTime = $vals['willKillTime'];
      }
      if (isset($vals['seckillPrice'])) {
        $this->seckillPrice = $vals['seckillPrice'];
      }
      if (isset($vals['seckillPeriod'])) {
        $this->seckillPeriod = $vals['seckillPeriod'];
      }
    }
  }

  public function getName() {
    return 'TExchangeProductSeckillInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seckillStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->killingTime = new \Services\PointService\TExchangeSeckillDetail();
            $xfer += $this->killingTime->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->willKillTime = new \Services\PointService\TExchangeSeckillDetail();
            $xfer += $this->willKillTime->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seckillPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seckillPeriod);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TExchangeProductSeckillInfo');
    if ($this->seckillStatus !== null) {
      $xfer += $output->writeFieldBegin('seckillStatus', TType::I32, 1);
      $xfer += $output->writeI32($this->seckillStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->killingTime !== null) {
      if (!is_object($this->killingTime)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('killingTime', TType::STRUCT, 2);
      $xfer += $this->killingTime->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->willKillTime !== null) {
      if (!is_object($this->willKillTime)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('willKillTime', TType::STRUCT, 3);
      $xfer += $this->willKillTime->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seckillPrice !== null) {
      $xfer += $output->writeFieldBegin('seckillPrice', TType::I32, 4);
      $xfer += $output->writeI32($this->seckillPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seckillPeriod !== null) {
      $xfer += $output->writeFieldBegin('seckillPeriod', TType::I32, 5);
      $xfer += $output->writeI32($this->seckillPeriod);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TExchangeProduct {
  static $_TSPEC;

  public $prodId = null;
  public $prodName = null;
  public $prodType = null;
  public $prodDesc = null;
  public $imgUrl = null;
  public $price = null;
  public $sendCnt = null;
  public $totalCnt = null;
  public $limitExchangeCnt = null;
  public $createTime = null;
  public $updateTime = null;
  public $newImgUrl = null;
  public $newProdDesc = null;
  public $originalPrice = null;
  public $seckillPric = null;
  public $beginDay = null;
  public $seckillPeriod = null;
  public $weekdays = null;
  public $productSeckillInfo = null;
  public $prodStatus = null;
  public $beginTime = null;
  public $endTime = null;
  public $activationUrl = null;
  public $resPkgId = null;
  public $resSendCnt = null;
  public $resHasSendCnt = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'prodId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'prodName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'prodType',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'prodDesc',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'imgUrl',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'price',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'sendCnt',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'totalCnt',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'limitExchangeCnt',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'createTime',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'updateTime',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'newImgUrl',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'newProdDesc',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'originalPrice',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'seckillPric',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'beginDay',
          'type' => TType::I64,
          ),
        17 => array(
          'var' => 'seckillPeriod',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'weekdays',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'productSeckillInfo',
          'type' => TType::STRUCT,
          'class' => '\Services\PointService\TExchangeProductSeckillInfo',
          ),
        20 => array(
          'var' => 'prodStatus',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'beginTime',
          'type' => TType::I64,
          ),
        22 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        23 => array(
          'var' => 'activationUrl',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'resPkgId',
          'type' => TType::I32,
          ),
        25 => array(
          'var' => 'resSendCnt',
          'type' => TType::I32,
          ),
        26 => array(
          'var' => 'resHasSendCnt',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['prodId'])) {
        $this->prodId = $vals['prodId'];
      }
      if (isset($vals['prodName'])) {
        $this->prodName = $vals['prodName'];
      }
      if (isset($vals['prodType'])) {
        $this->prodType = $vals['prodType'];
      }
      if (isset($vals['prodDesc'])) {
        $this->prodDesc = $vals['prodDesc'];
      }
      if (isset($vals['imgUrl'])) {
        $this->imgUrl = $vals['imgUrl'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['sendCnt'])) {
        $this->sendCnt = $vals['sendCnt'];
      }
      if (isset($vals['totalCnt'])) {
        $this->totalCnt = $vals['totalCnt'];
      }
      if (isset($vals['limitExchangeCnt'])) {
        $this->limitExchangeCnt = $vals['limitExchangeCnt'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['updateTime'])) {
        $this->updateTime = $vals['updateTime'];
      }
      if (isset($vals['newImgUrl'])) {
        $this->newImgUrl = $vals['newImgUrl'];
      }
      if (isset($vals['newProdDesc'])) {
        $this->newProdDesc = $vals['newProdDesc'];
      }
      if (isset($vals['originalPrice'])) {
        $this->originalPrice = $vals['originalPrice'];
      }
      if (isset($vals['seckillPric'])) {
        $this->seckillPric = $vals['seckillPric'];
      }
      if (isset($vals['beginDay'])) {
        $this->beginDay = $vals['beginDay'];
      }
      if (isset($vals['seckillPeriod'])) {
        $this->seckillPeriod = $vals['seckillPeriod'];
      }
      if (isset($vals['weekdays'])) {
        $this->weekdays = $vals['weekdays'];
      }
      if (isset($vals['productSeckillInfo'])) {
        $this->productSeckillInfo = $vals['productSeckillInfo'];
      }
      if (isset($vals['prodStatus'])) {
        $this->prodStatus = $vals['prodStatus'];
      }
      if (isset($vals['beginTime'])) {
        $this->beginTime = $vals['beginTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['activationUrl'])) {
        $this->activationUrl = $vals['activationUrl'];
      }
      if (isset($vals['resPkgId'])) {
        $this->resPkgId = $vals['resPkgId'];
      }
      if (isset($vals['resSendCnt'])) {
        $this->resSendCnt = $vals['resSendCnt'];
      }
      if (isset($vals['resHasSendCnt'])) {
        $this->resHasSendCnt = $vals['resHasSendCnt'];
      }
    }
  }

  public function getName() {
    return 'TExchangeProduct';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->prodId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->prodName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->prodType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->prodDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imgUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sendCnt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalCnt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limitExchangeCnt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->updateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->newImgUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->newProdDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->originalPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seckillPric);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->beginDay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seckillPeriod);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->weekdays);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRUCT) {
            $this->productSeckillInfo = new \Services\PointService\TExchangeProductSeckillInfo();
            $xfer += $this->productSeckillInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->prodStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->beginTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->activationUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resPkgId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resSendCnt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resHasSendCnt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TExchangeProduct');
    if ($this->prodId !== null) {
      $xfer += $output->writeFieldBegin('prodId', TType::I32, 1);
      $xfer += $output->writeI32($this->prodId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prodName !== null) {
      $xfer += $output->writeFieldBegin('prodName', TType::STRING, 2);
      $xfer += $output->writeString($this->prodName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prodType !== null) {
      $xfer += $output->writeFieldBegin('prodType', TType::STRING, 3);
      $xfer += $output->writeString($this->prodType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prodDesc !== null) {
      $xfer += $output->writeFieldBegin('prodDesc', TType::STRING, 4);
      $xfer += $output->writeString($this->prodDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imgUrl !== null) {
      $xfer += $output->writeFieldBegin('imgUrl', TType::STRING, 5);
      $xfer += $output->writeString($this->imgUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::I32, 6);
      $xfer += $output->writeI32($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sendCnt !== null) {
      $xfer += $output->writeFieldBegin('sendCnt', TType::I32, 7);
      $xfer += $output->writeI32($this->sendCnt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalCnt !== null) {
      $xfer += $output->writeFieldBegin('totalCnt', TType::I32, 8);
      $xfer += $output->writeI32($this->totalCnt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limitExchangeCnt !== null) {
      $xfer += $output->writeFieldBegin('limitExchangeCnt', TType::I32, 9);
      $xfer += $output->writeI32($this->limitExchangeCnt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I64, 10);
      $xfer += $output->writeI64($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updateTime !== null) {
      $xfer += $output->writeFieldBegin('updateTime', TType::I64, 11);
      $xfer += $output->writeI64($this->updateTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->newImgUrl !== null) {
      $xfer += $output->writeFieldBegin('newImgUrl', TType::STRING, 12);
      $xfer += $output->writeString($this->newImgUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->newProdDesc !== null) {
      $xfer += $output->writeFieldBegin('newProdDesc', TType::STRING, 13);
      $xfer += $output->writeString($this->newProdDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->originalPrice !== null) {
      $xfer += $output->writeFieldBegin('originalPrice', TType::I32, 14);
      $xfer += $output->writeI32($this->originalPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seckillPric !== null) {
      $xfer += $output->writeFieldBegin('seckillPric', TType::I32, 15);
      $xfer += $output->writeI32($this->seckillPric);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->beginDay !== null) {
      $xfer += $output->writeFieldBegin('beginDay', TType::I64, 16);
      $xfer += $output->writeI64($this->beginDay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seckillPeriod !== null) {
      $xfer += $output->writeFieldBegin('seckillPeriod', TType::I32, 17);
      $xfer += $output->writeI32($this->seckillPeriod);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->weekdays !== null) {
      $xfer += $output->writeFieldBegin('weekdays', TType::STRING, 18);
      $xfer += $output->writeString($this->weekdays);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productSeckillInfo !== null) {
      if (!is_object($this->productSeckillInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('productSeckillInfo', TType::STRUCT, 19);
      $xfer += $this->productSeckillInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prodStatus !== null) {
      $xfer += $output->writeFieldBegin('prodStatus', TType::I32, 20);
      $xfer += $output->writeI32($this->prodStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->beginTime !== null) {
      $xfer += $output->writeFieldBegin('beginTime', TType::I64, 21);
      $xfer += $output->writeI64($this->beginTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 22);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activationUrl !== null) {
      $xfer += $output->writeFieldBegin('activationUrl', TType::STRING, 23);
      $xfer += $output->writeString($this->activationUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resPkgId !== null) {
      $xfer += $output->writeFieldBegin('resPkgId', TType::I32, 24);
      $xfer += $output->writeI32($this->resPkgId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resSendCnt !== null) {
      $xfer += $output->writeFieldBegin('resSendCnt', TType::I32, 25);
      $xfer += $output->writeI32($this->resSendCnt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resHasSendCnt !== null) {
      $xfer += $output->writeFieldBegin('resHasSendCnt', TType::I32, 26);
      $xfer += $output->writeI32($this->resHasSendCnt);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TExchangeUserProduct {
  static $_TSPEC;

  public $id = null;
  public $prodId = null;
  public $udbuid = null;
  public $udbname = null;
  public $yyuid = null;
  public $exchangeTime = null;
  public $cardNumber = null;
  public $password = null;
  public $resItemId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'prodId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'udbuid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'udbname',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'yyuid',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'exchangeTime',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'cardNumber',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'resItemId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['prodId'])) {
        $this->prodId = $vals['prodId'];
      }
      if (isset($vals['udbuid'])) {
        $this->udbuid = $vals['udbuid'];
      }
      if (isset($vals['udbname'])) {
        $this->udbname = $vals['udbname'];
      }
      if (isset($vals['yyuid'])) {
        $this->yyuid = $vals['yyuid'];
      }
      if (isset($vals['exchangeTime'])) {
        $this->exchangeTime = $vals['exchangeTime'];
      }
      if (isset($vals['cardNumber'])) {
        $this->cardNumber = $vals['cardNumber'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
      if (isset($vals['resItemId'])) {
        $this->resItemId = $vals['resItemId'];
      }
    }
  }

  public function getName() {
    return 'TExchangeUserProduct';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->prodId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->udbuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->udbname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->yyuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->exchangeTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->resItemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TExchangeUserProduct');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prodId !== null) {
      $xfer += $output->writeFieldBegin('prodId', TType::I32, 2);
      $xfer += $output->writeI32($this->prodId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->udbuid !== null) {
      $xfer += $output->writeFieldBegin('udbuid', TType::I32, 3);
      $xfer += $output->writeI32($this->udbuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->udbname !== null) {
      $xfer += $output->writeFieldBegin('udbname', TType::STRING, 4);
      $xfer += $output->writeString($this->udbname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yyuid !== null) {
      $xfer += $output->writeFieldBegin('yyuid', TType::I32, 5);
      $xfer += $output->writeI32($this->yyuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exchangeTime !== null) {
      $xfer += $output->writeFieldBegin('exchangeTime', TType::I64, 6);
      $xfer += $output->writeI64($this->exchangeTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardNumber !== null) {
      $xfer += $output->writeFieldBegin('cardNumber', TType::STRING, 7);
      $xfer += $output->writeString($this->cardNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 8);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resItemId !== null) {
      $xfer += $output->writeFieldBegin('resItemId', TType::STRING, 9);
      $xfer += $output->writeString($this->resItemId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TExchangeProductPageForm {
  static $_TSPEC;

  public $pageForm = null;
  public $products = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pageForm',
          'type' => TType::STRUCT,
          'class' => '\Services\PointService\TPageForm',
          ),
        2 => array(
          'var' => 'products',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Services\PointService\TExchangeProduct',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pageForm'])) {
        $this->pageForm = $vals['pageForm'];
      }
      if (isset($vals['products'])) {
        $this->products = $vals['products'];
      }
    }
  }

  public function getName() {
    return 'TExchangeProductPageForm';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->pageForm = new \Services\PointService\TPageForm();
            $xfer += $this->pageForm->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->products = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \Services\PointService\TExchangeProduct();
              $xfer += $elem5->read($input);
              $this->products []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TExchangeProductPageForm');
    if ($this->pageForm !== null) {
      if (!is_object($this->pageForm)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pageForm', TType::STRUCT, 1);
      $xfer += $this->pageForm->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->products !== null) {
      if (!is_array($this->products)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('products', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->products));
        {
          foreach ($this->products as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TExchangeResult {
  static $_TSPEC;

  public $returnCode = null;
  public $msg = null;
  public $prod = null;
  public $userProd = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'returnCode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'prod',
          'type' => TType::STRUCT,
          'class' => '\Services\PointService\TExchangeProduct',
          ),
        4 => array(
          'var' => 'userProd',
          'type' => TType::STRUCT,
          'class' => '\Services\PointService\TExchangeUserProduct',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['returnCode'])) {
        $this->returnCode = $vals['returnCode'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['prod'])) {
        $this->prod = $vals['prod'];
      }
      if (isset($vals['userProd'])) {
        $this->userProd = $vals['userProd'];
      }
    }
  }

  public function getName() {
    return 'TExchangeResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->returnCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->prod = new \Services\PointService\TExchangeProduct();
            $xfer += $this->prod->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->userProd = new \Services\PointService\TExchangeUserProduct();
            $xfer += $this->userProd->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TExchangeResult');
    if ($this->returnCode !== null) {
      $xfer += $output->writeFieldBegin('returnCode', TType::I32, 1);
      $xfer += $output->writeI32($this->returnCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prod !== null) {
      if (!is_object($this->prod)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('prod', TType::STRUCT, 3);
      $xfer += $this->prod->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userProd !== null) {
      if (!is_object($this->userProd)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('userProd', TType::STRUCT, 4);
      $xfer += $this->userProd->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TUserTDouRecord {
  static $_TSPEC;

  public $id = null;
  public $udbuid = null;
  public $yyuid = null;
  public $point = null;
  public $createTime = null;
  public $source = null;
  public $relatedIdType1 = null;
  public $relatedId1 = null;
  public $relatedIdType2 = null;
  public $relatedId2 = null;
  public $relatedComment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'udbuid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'yyuid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'point',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'createTime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'source',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'relatedIdType1',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'relatedId1',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'relatedIdType2',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'relatedId2',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'relatedComment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['udbuid'])) {
        $this->udbuid = $vals['udbuid'];
      }
      if (isset($vals['yyuid'])) {
        $this->yyuid = $vals['yyuid'];
      }
      if (isset($vals['point'])) {
        $this->point = $vals['point'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['relatedIdType1'])) {
        $this->relatedIdType1 = $vals['relatedIdType1'];
      }
      if (isset($vals['relatedId1'])) {
        $this->relatedId1 = $vals['relatedId1'];
      }
      if (isset($vals['relatedIdType2'])) {
        $this->relatedIdType2 = $vals['relatedIdType2'];
      }
      if (isset($vals['relatedId2'])) {
        $this->relatedId2 = $vals['relatedId2'];
      }
      if (isset($vals['relatedComment'])) {
        $this->relatedComment = $vals['relatedComment'];
      }
    }
  }

  public function getName() {
    return 'TUserTDouRecord';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->udbuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->yyuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->point);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->source);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->relatedIdType1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->relatedId1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->relatedIdType2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->relatedId2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->relatedComment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TUserTDouRecord');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->udbuid !== null) {
      $xfer += $output->writeFieldBegin('udbuid', TType::I32, 2);
      $xfer += $output->writeI32($this->udbuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yyuid !== null) {
      $xfer += $output->writeFieldBegin('yyuid', TType::I32, 3);
      $xfer += $output->writeI32($this->yyuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->point !== null) {
      $xfer += $output->writeFieldBegin('point', TType::I32, 4);
      $xfer += $output->writeI32($this->point);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I64, 5);
      $xfer += $output->writeI64($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      $xfer += $output->writeFieldBegin('source', TType::I32, 6);
      $xfer += $output->writeI32($this->source);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relatedIdType1 !== null) {
      $xfer += $output->writeFieldBegin('relatedIdType1', TType::I32, 7);
      $xfer += $output->writeI32($this->relatedIdType1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relatedId1 !== null) {
      $xfer += $output->writeFieldBegin('relatedId1', TType::I32, 8);
      $xfer += $output->writeI32($this->relatedId1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relatedIdType2 !== null) {
      $xfer += $output->writeFieldBegin('relatedIdType2', TType::I32, 9);
      $xfer += $output->writeI32($this->relatedIdType2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relatedId2 !== null) {
      $xfer += $output->writeFieldBegin('relatedId2', TType::I32, 10);
      $xfer += $output->writeI32($this->relatedId2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relatedComment !== null) {
      $xfer += $output->writeFieldBegin('relatedComment', TType::STRING, 11);
      $xfer += $output->writeString($this->relatedComment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


