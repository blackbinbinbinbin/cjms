<?php
namespace Services\userinfo_service;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class AuthorizeMsg {
  static $_TSPEC;

  public $user = "";
  public $password = "";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['user'])) {
        $this->user = $vals['user'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
    }
  }

  public function getName() {
    return 'AuthorizeMsg';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->user);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AuthorizeMsg');
    if ($this->user !== null) {
      $xfer += $output->writeFieldBegin('user', TType::STRING, 1);
      $xfer += $output->writeString($this->user);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 2);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PpsActs {
  static $_TSPEC;

  public $passport = null;
  public $account = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'passport',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'account',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['passport'])) {
        $this->passport = $vals['passport'];
      }
      if (isset($vals['account'])) {
        $this->account = $vals['account'];
      }
    }
  }

  public function getName() {
    return 'PpsActs';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->passport);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->account);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PpsActs');
    if ($this->passport !== null) {
      $xfer += $output->writeFieldBegin('passport', TType::STRING, 1);
      $xfer += $output->writeString($this->passport);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->account !== null) {
      $xfer += $output->writeFieldBegin('account', TType::STRING, 2);
      $xfer += $output->writeString($this->account);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PassportEmailRet {
  static $_TSPEC;

  public $rescode = null;
  public $pps_acts = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rescode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'pps_acts',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\Services\userinfo_service\PpsActs',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rescode'])) {
        $this->rescode = $vals['rescode'];
      }
      if (isset($vals['pps_acts'])) {
        $this->pps_acts = $vals['pps_acts'];
      }
    }
  }

  public function getName() {
    return 'PassportEmailRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rescode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->pps_acts = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = '';
              $val6 = new \Services\userinfo_service\PpsActs();
              $xfer += $input->readString($key5);
              $val6 = new \Services\userinfo_service\PpsActs();
              $xfer += $val6->read($input);
              $this->pps_acts[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PassportEmailRet');
    if ($this->rescode !== null) {
      $xfer += $output->writeFieldBegin('rescode', TType::I32, 1);
      $xfer += $output->writeI32($this->rescode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pps_acts !== null) {
      if (!is_array($this->pps_acts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pps_acts', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->pps_acts));
        {
          foreach ($this->pps_acts as $kiter7 => $viter8)
          {
            $xfer += $output->writeString($kiter7);
            $xfer += $viter8->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PassportUdbseqImidRet {
  static $_TSPEC;

  public $rescode = null;
  public $passport = null;
  public $udbseq = null;
  public $imid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rescode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'passport',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'udbseq',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'imid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rescode'])) {
        $this->rescode = $vals['rescode'];
      }
      if (isset($vals['passport'])) {
        $this->passport = $vals['passport'];
      }
      if (isset($vals['udbseq'])) {
        $this->udbseq = $vals['udbseq'];
      }
      if (isset($vals['imid'])) {
        $this->imid = $vals['imid'];
      }
    }
  }

  public function getName() {
    return 'PassportUdbseqImidRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rescode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->passport);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->udbseq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->imid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PassportUdbseqImidRet');
    if ($this->rescode !== null) {
      $xfer += $output->writeFieldBegin('rescode', TType::I32, 1);
      $xfer += $output->writeI32($this->rescode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->passport !== null) {
      $xfer += $output->writeFieldBegin('passport', TType::STRING, 2);
      $xfer += $output->writeString($this->passport);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->udbseq !== null) {
      $xfer += $output->writeFieldBegin('udbseq', TType::I32, 3);
      $xfer += $output->writeI32($this->udbseq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imid !== null) {
      $xfer += $output->writeFieldBegin('imid', TType::I32, 4);
      $xfer += $output->writeI32($this->imid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YYuidUdbseqImidRet {
  static $_TSPEC;

  public $rescode = null;
  public $yyuid = null;
  public $udbseq = null;
  public $imid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rescode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'yyuid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'udbseq',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'imid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rescode'])) {
        $this->rescode = $vals['rescode'];
      }
      if (isset($vals['yyuid'])) {
        $this->yyuid = $vals['yyuid'];
      }
      if (isset($vals['udbseq'])) {
        $this->udbseq = $vals['udbseq'];
      }
      if (isset($vals['imid'])) {
        $this->imid = $vals['imid'];
      }
    }
  }

  public function getName() {
    return 'YYuidUdbseqImidRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rescode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->yyuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->udbseq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->imid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YYuidUdbseqImidRet');
    if ($this->rescode !== null) {
      $xfer += $output->writeFieldBegin('rescode', TType::I32, 1);
      $xfer += $output->writeI32($this->rescode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yyuid !== null) {
      $xfer += $output->writeFieldBegin('yyuid', TType::I32, 2);
      $xfer += $output->writeI32($this->yyuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->udbseq !== null) {
      $xfer += $output->writeFieldBegin('udbseq', TType::I32, 3);
      $xfer += $output->writeI32($this->udbseq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imid !== null) {
      $xfer += $output->writeFieldBegin('imid', TType::I32, 4);
      $xfer += $output->writeI32($this->imid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ImidInfo {
  static $_TSPEC;

  public $imid = null;
  public $uid = null;
  public $create_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'imid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'create_time',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['imid'])) {
        $this->imid = $vals['imid'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['create_time'])) {
        $this->create_time = $vals['create_time'];
      }
    }
  }

  public function getName() {
    return 'ImidInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->imid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->create_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ImidInfo');
    if ($this->imid !== null) {
      $xfer += $output->writeFieldBegin('imid', TType::I32, 1);
      $xfer += $output->writeI32($this->imid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 2);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_time !== null) {
      $xfer += $output->writeFieldBegin('create_time', TType::STRING, 3);
      $xfer += $output->writeString($this->create_time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ImidInfoRet {
  static $_TSPEC;

  public $rescode = null;
  public $imidlist = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rescode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'imidlist',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Services\userinfo_service\ImidInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rescode'])) {
        $this->rescode = $vals['rescode'];
      }
      if (isset($vals['imidlist'])) {
        $this->imidlist = $vals['imidlist'];
      }
    }
  }

  public function getName() {
    return 'ImidInfoRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rescode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->imidlist = array();
            $_size9 = 0;
            $_etype12 = 0;
            $xfer += $input->readListBegin($_etype12, $_size9);
            for ($_i13 = 0; $_i13 < $_size9; ++$_i13)
            {
              $elem14 = null;
              $elem14 = new \Services\userinfo_service\ImidInfo();
              $xfer += $elem14->read($input);
              $this->imidlist []= $elem14;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ImidInfoRet');
    if ($this->rescode !== null) {
      $xfer += $output->writeFieldBegin('rescode', TType::I32, 1);
      $xfer += $output->writeI32($this->rescode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imidlist !== null) {
      if (!is_array($this->imidlist)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('imidlist', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->imidlist));
        {
          foreach ($this->imidlist as $iter15)
          {
            $xfer += $iter15->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IDInfoReq {
  static $_TSPEC;

  public $yyuid = null;
  public $idtype = null;
  public $idnumber = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'yyuid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'idtype',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'idnumber',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['yyuid'])) {
        $this->yyuid = $vals['yyuid'];
      }
      if (isset($vals['idtype'])) {
        $this->idtype = $vals['idtype'];
      }
      if (isset($vals['idnumber'])) {
        $this->idnumber = $vals['idnumber'];
      }
    }
  }

  public function getName() {
    return 'IDInfoReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->yyuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->idtype);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idnumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IDInfoReq');
    if ($this->yyuid !== null) {
      $xfer += $output->writeFieldBegin('yyuid', TType::I32, 1);
      $xfer += $output->writeI32($this->yyuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idtype !== null) {
      $xfer += $output->writeFieldBegin('idtype', TType::I32, 2);
      $xfer += $output->writeI32($this->idtype);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idnumber !== null) {
      $xfer += $output->writeFieldBegin('idnumber', TType::STRING, 3);
      $xfer += $output->writeString($this->idnumber);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IDInfoExReq {
  static $_TSPEC;

  public $yyuid = null;
  public $lenFront = null;
  public $lenBack = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'yyuid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'lenFront',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'lenBack',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['yyuid'])) {
        $this->yyuid = $vals['yyuid'];
      }
      if (isset($vals['lenFront'])) {
        $this->lenFront = $vals['lenFront'];
      }
      if (isset($vals['lenBack'])) {
        $this->lenBack = $vals['lenBack'];
      }
    }
  }

  public function getName() {
    return 'IDInfoExReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->yyuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lenFront);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lenBack);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IDInfoExReq');
    if ($this->yyuid !== null) {
      $xfer += $output->writeFieldBegin('yyuid', TType::I32, 1);
      $xfer += $output->writeI32($this->yyuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lenFront !== null) {
      $xfer += $output->writeFieldBegin('lenFront', TType::I32, 2);
      $xfer += $output->writeI32($this->lenFront);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lenBack !== null) {
      $xfer += $output->writeFieldBegin('lenBack', TType::I32, 3);
      $xfer += $output->writeI32($this->lenBack);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IDInfoRes {
  static $_TSPEC;

  public $rescode = null;
  public $idtype = null;
  public $idnumber = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rescode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'idtype',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'idnumber',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rescode'])) {
        $this->rescode = $vals['rescode'];
      }
      if (isset($vals['idtype'])) {
        $this->idtype = $vals['idtype'];
      }
      if (isset($vals['idnumber'])) {
        $this->idnumber = $vals['idnumber'];
      }
    }
  }

  public function getName() {
    return 'IDInfoRes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rescode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->idtype);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idnumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IDInfoRes');
    if ($this->rescode !== null) {
      $xfer += $output->writeFieldBegin('rescode', TType::I32, 1);
      $xfer += $output->writeI32($this->rescode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idtype !== null) {
      $xfer += $output->writeFieldBegin('idtype', TType::I32, 2);
      $xfer += $output->writeI32($this->idtype);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idnumber !== null) {
      $xfer += $output->writeFieldBegin('idnumber', TType::STRING, 3);
      $xfer += $output->writeString($this->idnumber);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MibaoQAReq {
  static $_TSPEC;

  public $request = null;
  public $question1 = null;
  public $answer1 = null;
  public $question2 = null;
  public $answer2 = null;
  public $question3 = null;
  public $answer3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'question1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'answer1',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'question2',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'answer2',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'question3',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'answer3',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
      if (isset($vals['question1'])) {
        $this->question1 = $vals['question1'];
      }
      if (isset($vals['answer1'])) {
        $this->answer1 = $vals['answer1'];
      }
      if (isset($vals['question2'])) {
        $this->question2 = $vals['question2'];
      }
      if (isset($vals['answer2'])) {
        $this->answer2 = $vals['answer2'];
      }
      if (isset($vals['question3'])) {
        $this->question3 = $vals['question3'];
      }
      if (isset($vals['answer3'])) {
        $this->answer3 = $vals['answer3'];
      }
    }
  }

  public function getName() {
    return 'MibaoQAReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->request);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->question1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->answer1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->question2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->answer2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->question3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->answer3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MibaoQAReq');
    if ($this->request !== null) {
      $xfer += $output->writeFieldBegin('request', TType::STRING, 1);
      $xfer += $output->writeString($this->request);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->question1 !== null) {
      $xfer += $output->writeFieldBegin('question1', TType::STRING, 2);
      $xfer += $output->writeString($this->question1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->answer1 !== null) {
      $xfer += $output->writeFieldBegin('answer1', TType::STRING, 3);
      $xfer += $output->writeString($this->answer1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->question2 !== null) {
      $xfer += $output->writeFieldBegin('question2', TType::STRING, 4);
      $xfer += $output->writeString($this->question2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->answer2 !== null) {
      $xfer += $output->writeFieldBegin('answer2', TType::STRING, 5);
      $xfer += $output->writeString($this->answer2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->question3 !== null) {
      $xfer += $output->writeFieldBegin('question3', TType::STRING, 6);
      $xfer += $output->writeString($this->question3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->answer3 !== null) {
      $xfer += $output->writeFieldBegin('answer3', TType::STRING, 7);
      $xfer += $output->writeString($this->answer3);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MibaoQARes {
  static $_TSPEC;

  public $rescode = null;
  public $cntQA = null;
  public $flagQA1 = null;
  public $flagQA2 = null;
  public $flagQA3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rescode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'cntQA',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'flagQA1',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'flagQA2',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'flagQA3',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rescode'])) {
        $this->rescode = $vals['rescode'];
      }
      if (isset($vals['cntQA'])) {
        $this->cntQA = $vals['cntQA'];
      }
      if (isset($vals['flagQA1'])) {
        $this->flagQA1 = $vals['flagQA1'];
      }
      if (isset($vals['flagQA2'])) {
        $this->flagQA2 = $vals['flagQA2'];
      }
      if (isset($vals['flagQA3'])) {
        $this->flagQA3 = $vals['flagQA3'];
      }
    }
  }

  public function getName() {
    return 'MibaoQARes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rescode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cntQA);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->flagQA1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->flagQA2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->flagQA3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MibaoQARes');
    if ($this->rescode !== null) {
      $xfer += $output->writeFieldBegin('rescode', TType::I32, 1);
      $xfer += $output->writeI32($this->rescode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cntQA !== null) {
      $xfer += $output->writeFieldBegin('cntQA', TType::I32, 2);
      $xfer += $output->writeI32($this->cntQA);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flagQA1 !== null) {
      $xfer += $output->writeFieldBegin('flagQA1', TType::I32, 3);
      $xfer += $output->writeI32($this->flagQA1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flagQA2 !== null) {
      $xfer += $output->writeFieldBegin('flagQA2', TType::I32, 4);
      $xfer += $output->writeI32($this->flagQA2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flagQA3 !== null) {
      $xfer += $output->writeFieldBegin('flagQA3', TType::I32, 5);
      $xfer += $output->writeI32($this->flagQA3);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MibaoQuesRes {
  static $_TSPEC;

  public $rescode = null;
  public $question = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rescode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'question',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rescode'])) {
        $this->rescode = $vals['rescode'];
      }
      if (isset($vals['question'])) {
        $this->question = $vals['question'];
      }
    }
  }

  public function getName() {
    return 'MibaoQuesRes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rescode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->question = array();
            $_size16 = 0;
            $_etype19 = 0;
            $xfer += $input->readListBegin($_etype19, $_size16);
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $elem21 = null;
              $xfer += $input->readString($elem21);
              $this->question []= $elem21;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MibaoQuesRes');
    if ($this->rescode !== null) {
      $xfer += $output->writeFieldBegin('rescode', TType::I32, 1);
      $xfer += $output->writeI32($this->rescode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->question !== null) {
      if (!is_array($this->question)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('question', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->question));
        {
          foreach ($this->question as $iter22)
          {
            $xfer += $output->writeString($iter22);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MaskCodeInfo {
  static $_TSPEC;

  public $request = null;
  public $lenFront = null;
  public $lenBack = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'lenFront',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'lenBack',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
      if (isset($vals['lenFront'])) {
        $this->lenFront = $vals['lenFront'];
      }
      if (isset($vals['lenBack'])) {
        $this->lenBack = $vals['lenBack'];
      }
    }
  }

  public function getName() {
    return 'MaskCodeInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->request);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lenFront);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lenBack);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MaskCodeInfo');
    if ($this->request !== null) {
      $xfer += $output->writeFieldBegin('request', TType::STRING, 1);
      $xfer += $output->writeString($this->request);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lenFront !== null) {
      $xfer += $output->writeFieldBegin('lenFront', TType::I32, 2);
      $xfer += $output->writeI32($this->lenFront);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lenBack !== null) {
      $xfer += $output->writeFieldBegin('lenBack', TType::I32, 3);
      $xfer += $output->writeI32($this->lenBack);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IDRegipMobileRes {
  static $_TSPEC;

  public $rescode = null;
  public $idnumber = null;
  public $regip = null;
  public $mobile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rescode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'idnumber',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'regip',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rescode'])) {
        $this->rescode = $vals['rescode'];
      }
      if (isset($vals['idnumber'])) {
        $this->idnumber = $vals['idnumber'];
      }
      if (isset($vals['regip'])) {
        $this->regip = $vals['regip'];
      }
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
    }
  }

  public function getName() {
    return 'IDRegipMobileRes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rescode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idnumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->regip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IDRegipMobileRes');
    if ($this->rescode !== null) {
      $xfer += $output->writeFieldBegin('rescode', TType::I32, 1);
      $xfer += $output->writeI32($this->rescode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idnumber !== null) {
      $xfer += $output->writeFieldBegin('idnumber', TType::STRING, 2);
      $xfer += $output->writeString($this->idnumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->regip !== null) {
      $xfer += $output->writeFieldBegin('regip', TType::STRING, 3);
      $xfer += $output->writeString($this->regip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::STRING, 4);
      $xfer += $output->writeString($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EMailInfoReq {
  static $_TSPEC;

  public $from = null;
  public $to = null;
  public $subject = null;
  public $content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'from',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'to',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'subject',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['from'])) {
        $this->from = $vals['from'];
      }
      if (isset($vals['to'])) {
        $this->to = $vals['to'];
      }
      if (isset($vals['subject'])) {
        $this->subject = $vals['subject'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
    }
  }

  public function getName() {
    return 'EMailInfoReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->from);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->to);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->subject);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EMailInfoReq');
    if ($this->from !== null) {
      $xfer += $output->writeFieldBegin('from', TType::STRING, 1);
      $xfer += $output->writeString($this->from);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->to !== null) {
      $xfer += $output->writeFieldBegin('to', TType::STRING, 2);
      $xfer += $output->writeString($this->to);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subject !== null) {
      $xfer += $output->writeFieldBegin('subject', TType::STRING, 3);
      $xfer += $output->writeString($this->subject);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 4);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YYAgeRes {
  static $_TSPEC;

  public $rescode = null;
  public $age = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rescode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'age',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rescode'])) {
        $this->rescode = $vals['rescode'];
      }
      if (isset($vals['age'])) {
        $this->age = $vals['age'];
      }
    }
  }

  public function getName() {
    return 'YYAgeRes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rescode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->age);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YYAgeRes');
    if ($this->rescode !== null) {
      $xfer += $output->writeFieldBegin('rescode', TType::I32, 1);
      $xfer += $output->writeI32($this->rescode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->age !== null) {
      $xfer += $output->writeFieldBegin('age', TType::I32, 2);
      $xfer += $output->writeI32($this->age);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class YYAgeExRes {
  static $_TSPEC;

  public $rescode = null;
  public $agelist = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rescode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'agelist',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rescode'])) {
        $this->rescode = $vals['rescode'];
      }
      if (isset($vals['agelist'])) {
        $this->agelist = $vals['agelist'];
      }
    }
  }

  public function getName() {
    return 'YYAgeExRes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rescode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->agelist = array();
            $_size23 = 0;
            $_ktype24 = 0;
            $_vtype25 = 0;
            $xfer += $input->readMapBegin($_ktype24, $_vtype25, $_size23);
            for ($_i27 = 0; $_i27 < $_size23; ++$_i27)
            {
              $key28 = '';
              $val29 = 0;
              $xfer += $input->readString($key28);
              $xfer += $input->readI32($val29);
              $this->agelist[$key28] = $val29;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('YYAgeExRes');
    if ($this->rescode !== null) {
      $xfer += $output->writeFieldBegin('rescode', TType::I32, 1);
      $xfer += $output->writeI32($this->rescode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->agelist !== null) {
      if (!is_array($this->agelist)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('agelist', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::I32, count($this->agelist));
        {
          foreach ($this->agelist as $kiter30 => $viter31)
          {
            $xfer += $output->writeString($kiter30);
            $xfer += $output->writeI32($viter31);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserListRes {
  static $_TSPEC;

  public $rescode = null;
  public $userlist = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rescode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userlist',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rescode'])) {
        $this->rescode = $vals['rescode'];
      }
      if (isset($vals['userlist'])) {
        $this->userlist = $vals['userlist'];
      }
    }
  }

  public function getName() {
    return 'UserListRes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rescode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->userlist = array();
            $_size32 = 0;
            $_etype35 = 0;
            $xfer += $input->readListBegin($_etype35, $_size32);
            for ($_i36 = 0; $_i36 < $_size32; ++$_i36)
            {
              $elem37 = null;
              $xfer += $input->readString($elem37);
              $this->userlist []= $elem37;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserListRes');
    if ($this->rescode !== null) {
      $xfer += $output->writeFieldBegin('rescode', TType::I32, 1);
      $xfer += $output->writeI32($this->rescode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userlist !== null) {
      if (!is_array($this->userlist)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('userlist', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->userlist));
        {
          foreach ($this->userlist as $iter38)
          {
            $xfer += $output->writeString($iter38);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AuthAuditedRes {
  static $_TSPEC;

  public $rescode = null;
  public $flag = null;
  public $status = null;
  public $time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rescode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'flag',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'status',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'time',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rescode'])) {
        $this->rescode = $vals['rescode'];
      }
      if (isset($vals['flag'])) {
        $this->flag = $vals['flag'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
    }
  }

  public function getName() {
    return 'AuthAuditedRes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rescode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->flag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AuthAuditedRes');
    if ($this->rescode !== null) {
      $xfer += $output->writeFieldBegin('rescode', TType::I32, 1);
      $xfer += $output->writeI32($this->rescode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flag !== null) {
      $xfer += $output->writeFieldBegin('flag', TType::I32, 2);
      $xfer += $output->writeI32($this->flag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::STRING, 3);
      $xfer += $output->writeString($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::STRING, 4);
      $xfer += $output->writeString($this->time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AuthAdultRes {
  static $_TSPEC;

  public $rescode = null;
  public $flag = null;
  public $status = null;
  public $adult = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rescode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'flag',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'status',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'adult',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rescode'])) {
        $this->rescode = $vals['rescode'];
      }
      if (isset($vals['flag'])) {
        $this->flag = $vals['flag'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['adult'])) {
        $this->adult = $vals['adult'];
      }
    }
  }

  public function getName() {
    return 'AuthAdultRes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rescode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->flag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->adult);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AuthAdultRes');
    if ($this->rescode !== null) {
      $xfer += $output->writeFieldBegin('rescode', TType::I32, 1);
      $xfer += $output->writeI32($this->rescode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flag !== null) {
      $xfer += $output->writeFieldBegin('flag', TType::I32, 2);
      $xfer += $output->writeI32($this->flag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::STRING, 3);
      $xfer += $output->writeString($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->adult !== null) {
      $xfer += $output->writeFieldBegin('adult', TType::I32, 4);
      $xfer += $output->writeI32($this->adult);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IDNameReq {
  static $_TSPEC;

  public $type = null;
  public $request = null;
  public $name = null;
  public $idnumber = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'request',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'idnumber',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['idnumber'])) {
        $this->idnumber = $vals['idnumber'];
      }
    }
  }

  public function getName() {
    return 'IDNameReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->request);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idnumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IDNameReq');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->request !== null) {
      $xfer += $output->writeFieldBegin('request', TType::STRING, 2);
      $xfer += $output->writeString($this->request);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idnumber !== null) {
      $xfer += $output->writeFieldBegin('idnumber', TType::STRING, 4);
      $xfer += $output->writeString($this->idnumber);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IDNameRes {
  static $_TSPEC;

  public $rescode = null;
  public $status = null;
  public $flagName = null;
  public $flagId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rescode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'flagName',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'flagId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rescode'])) {
        $this->rescode = $vals['rescode'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['flagName'])) {
        $this->flagName = $vals['flagName'];
      }
      if (isset($vals['flagId'])) {
        $this->flagId = $vals['flagId'];
      }
    }
  }

  public function getName() {
    return 'IDNameRes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rescode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->flagName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->flagId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IDNameRes');
    if ($this->rescode !== null) {
      $xfer += $output->writeFieldBegin('rescode', TType::I32, 1);
      $xfer += $output->writeI32($this->rescode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::STRING, 2);
      $xfer += $output->writeString($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flagName !== null) {
      $xfer += $output->writeFieldBegin('flagName', TType::I32, 3);
      $xfer += $output->writeI32($this->flagName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flagId !== null) {
      $xfer += $output->writeFieldBegin('flagId', TType::I32, 4);
      $xfer += $output->writeI32($this->flagId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SmsReq {
  static $_TSPEC;

  public $type = null;
  public $request = null;
  public $appid = null;
  public $content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'request',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'appid',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
      if (isset($vals['appid'])) {
        $this->appid = $vals['appid'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
    }
  }

  public function getName() {
    return 'SmsReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->request);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SmsReq');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->request !== null) {
      $xfer += $output->writeFieldBegin('request', TType::STRING, 2);
      $xfer += $output->writeString($this->request);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appid !== null) {
      $xfer += $output->writeFieldBegin('appid', TType::STRING, 3);
      $xfer += $output->writeString($this->appid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 4);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RegTimeReq {
  static $_TSPEC;

  public $type = null;
  public $request = null;
  public $seed = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'request',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'seed',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
      if (isset($vals['seed'])) {
        $this->seed = $vals['seed'];
      }
    }
  }

  public function getName() {
    return 'RegTimeReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->request);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RegTimeReq');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->request !== null) {
      $xfer += $output->writeFieldBegin('request', TType::STRING, 2);
      $xfer += $output->writeString($this->request);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seed !== null) {
      $xfer += $output->writeFieldBegin('seed', TType::I32, 3);
      $xfer += $output->writeI32($this->seed);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


