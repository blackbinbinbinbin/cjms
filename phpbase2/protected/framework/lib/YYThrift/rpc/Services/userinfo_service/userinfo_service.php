<?php
namespace Services\userinfo_service;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface userinfo_serviceIf {
  public function lg_userinfo_getUidsFromPps($passports, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getEmailsFromPps($passports, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getPpsFromUids($uids, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getMobilesFromPps($passports, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getMobilesFromUids($uids, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getAuthStatusByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_sendMsgByPps($passports, $content, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_sendMsgByUids($uids, $content, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_sendEmailByPp(\Services\userinfo_service\EMailInfoReq $emailInfo, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_sendEmailByUid(\Services\userinfo_service\EMailInfoReq $emailInfo, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getMobileMaskByPp(\Services\userinfo_service\MaskCodeInfo $maskInfo, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getMobileMaskByUid(\Services\userinfo_service\MaskCodeInfo $maskInfo, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getEmailMaskByPp(\Services\userinfo_service\MaskCodeInfo $maskInfo, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getEmailMaskByUid(\Services\userinfo_service\MaskCodeInfo $maskInfo, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_transPassportByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_transPassport($passport, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_transYYNo($yyid, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_transUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_transAccount($email, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_transAccountByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_transPassportByAccount($email, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_transUdbseqByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_transRegipByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_transUidByLoginMobile($mobile, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_gainsPassport($type, $request, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_gainsYYuid($type, $request, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_gainsYYuidEx($request, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getPassportMaskByLoginMobile($mobile, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getLoginMobileMaskByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_checkPassportPhoneBind($passport, $phone, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_checkUidPhoneBind($uid, $phone, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_checkUidAccountBind($uid, $account, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_checkPassportAccountBind($passport, $account, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_checkAccountBindByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_checkPhoneBindByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_checkYYNoUsable($yyid, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_checkAccountUsable($account, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_checkVerifiedEmailByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_checkUidIdnumberBind($uid, $idnumber, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_checkRegtypeByUid($uid, $type, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_checkRegtimeByUid($uid, $regtime, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_checkRegtimeByUidEx($uid, $regtime, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_checkRegtimeRangeByUid($uid, $range, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_checkLoginBindByMobile($mobile, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_checkPicCodeByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getUserBindCountByMobile($mobile, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getMibaoInfoBindByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getMibaoInfoBindByPp($passport, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getYYidLoginInfoByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_sendSms(\Services\userinfo_service\SmsReq $smsinfo, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_checkRegtime(\Services\userinfo_service\RegTimeReq $regtminfo, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_ping($seq);
  public function lg_userinfo_transPpSeqYYNoByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_transUidSeqYYNoByPp($passports, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_batchTransPpsActsByUidsEx($uids, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_batchTransYYNos($yyids, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_batchTransUids($uids, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getMibaoQuestionByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_checkMibaoQAByPpAct(\Services\userinfo_service\MibaoQAReq $mibaoReq, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_checkMibaoQAByUid(\Services\userinfo_service\MibaoQAReq $mibaoReq, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getIDRegipMobileByUid($uids, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getImidInfoByImidList($imids, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getImidInfoByUidList($uids, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getIDInfoByUid(\Services\userinfo_service\IDInfoReq $idInfo, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getIDInfoByUidEx(\Services\userinfo_service\IDInfoExReq $idInfo, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getYYAgeByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getYYAgeByUidEx($uid, $flagtm, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getYYAgeByUidList($uids, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getYYAgeByUidListEx($uids, $flagtm, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getUserBindListByMobile($mobile, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userifno_getAuthAuditedInfoByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_getAuthAdultInfoByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes);
  public function lg_userinfo_checkIDInfo(\Services\userinfo_service\IDNameReq $idinfo, \Services\userinfo_service\AuthorizeMsg $authorizes);
}

class userinfo_serviceClient implements \Services\userinfo_service\userinfo_serviceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function lg_userinfo_getUidsFromPps($passports, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getUidsFromPps($passports, $authorizes);
    return $this->recv_lg_userinfo_getUidsFromPps();
  }

  public function send_lg_userinfo_getUidsFromPps($passports, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getUidsFromPps_args();
    $args->passports = $passports;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getUidsFromPps', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getUidsFromPps', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getUidsFromPps()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getUidsFromPps_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getUidsFromPps_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getUidsFromPps failed: unknown result");
  }

  public function lg_userinfo_getEmailsFromPps($passports, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getEmailsFromPps($passports, $authorizes);
    return $this->recv_lg_userinfo_getEmailsFromPps();
  }

  public function send_lg_userinfo_getEmailsFromPps($passports, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getEmailsFromPps_args();
    $args->passports = $passports;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getEmailsFromPps', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getEmailsFromPps', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getEmailsFromPps()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getEmailsFromPps_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getEmailsFromPps_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getEmailsFromPps failed: unknown result");
  }

  public function lg_userinfo_getPpsFromUids($uids, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getPpsFromUids($uids, $authorizes);
    return $this->recv_lg_userinfo_getPpsFromUids();
  }

  public function send_lg_userinfo_getPpsFromUids($uids, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getPpsFromUids_args();
    $args->uids = $uids;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getPpsFromUids', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getPpsFromUids', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getPpsFromUids()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getPpsFromUids_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getPpsFromUids_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getPpsFromUids failed: unknown result");
  }

  public function lg_userinfo_getMobilesFromPps($passports, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getMobilesFromPps($passports, $authorizes);
    return $this->recv_lg_userinfo_getMobilesFromPps();
  }

  public function send_lg_userinfo_getMobilesFromPps($passports, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getMobilesFromPps_args();
    $args->passports = $passports;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getMobilesFromPps', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getMobilesFromPps', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getMobilesFromPps()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getMobilesFromPps_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getMobilesFromPps_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getMobilesFromPps failed: unknown result");
  }

  public function lg_userinfo_getMobilesFromUids($uids, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getMobilesFromUids($uids, $authorizes);
    return $this->recv_lg_userinfo_getMobilesFromUids();
  }

  public function send_lg_userinfo_getMobilesFromUids($uids, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getMobilesFromUids_args();
    $args->uids = $uids;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getMobilesFromUids', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getMobilesFromUids', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getMobilesFromUids()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getMobilesFromUids_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getMobilesFromUids_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getMobilesFromUids failed: unknown result");
  }

  public function lg_userinfo_getAuthStatusByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getAuthStatusByUid($uid, $authorizes);
    return $this->recv_lg_userinfo_getAuthStatusByUid();
  }

  public function send_lg_userinfo_getAuthStatusByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getAuthStatusByUid_args();
    $args->uid = $uid;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getAuthStatusByUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getAuthStatusByUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getAuthStatusByUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getAuthStatusByUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getAuthStatusByUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getAuthStatusByUid failed: unknown result");
  }

  public function lg_userinfo_sendMsgByPps($passports, $content, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_sendMsgByPps($passports, $content, $authorizes);
    return $this->recv_lg_userinfo_sendMsgByPps();
  }

  public function send_lg_userinfo_sendMsgByPps($passports, $content, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_sendMsgByPps_args();
    $args->passports = $passports;
    $args->content = $content;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_sendMsgByPps', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_sendMsgByPps', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_sendMsgByPps()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_sendMsgByPps_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_sendMsgByPps_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_sendMsgByPps failed: unknown result");
  }

  public function lg_userinfo_sendMsgByUids($uids, $content, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_sendMsgByUids($uids, $content, $authorizes);
    return $this->recv_lg_userinfo_sendMsgByUids();
  }

  public function send_lg_userinfo_sendMsgByUids($uids, $content, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_sendMsgByUids_args();
    $args->uids = $uids;
    $args->content = $content;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_sendMsgByUids', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_sendMsgByUids', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_sendMsgByUids()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_sendMsgByUids_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_sendMsgByUids_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_sendMsgByUids failed: unknown result");
  }

  public function lg_userinfo_sendEmailByPp(\Services\userinfo_service\EMailInfoReq $emailInfo, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_sendEmailByPp($emailInfo, $authorizes);
    return $this->recv_lg_userinfo_sendEmailByPp();
  }

  public function send_lg_userinfo_sendEmailByPp(\Services\userinfo_service\EMailInfoReq $emailInfo, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_sendEmailByPp_args();
    $args->emailInfo = $emailInfo;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_sendEmailByPp', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_sendEmailByPp', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_sendEmailByPp()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_sendEmailByPp_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_sendEmailByPp_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_sendEmailByPp failed: unknown result");
  }

  public function lg_userinfo_sendEmailByUid(\Services\userinfo_service\EMailInfoReq $emailInfo, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_sendEmailByUid($emailInfo, $authorizes);
    return $this->recv_lg_userinfo_sendEmailByUid();
  }

  public function send_lg_userinfo_sendEmailByUid(\Services\userinfo_service\EMailInfoReq $emailInfo, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_sendEmailByUid_args();
    $args->emailInfo = $emailInfo;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_sendEmailByUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_sendEmailByUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_sendEmailByUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_sendEmailByUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_sendEmailByUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_sendEmailByUid failed: unknown result");
  }

  public function lg_userinfo_getMobileMaskByPp(\Services\userinfo_service\MaskCodeInfo $maskInfo, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getMobileMaskByPp($maskInfo, $authorizes);
    return $this->recv_lg_userinfo_getMobileMaskByPp();
  }

  public function send_lg_userinfo_getMobileMaskByPp(\Services\userinfo_service\MaskCodeInfo $maskInfo, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getMobileMaskByPp_args();
    $args->maskInfo = $maskInfo;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getMobileMaskByPp', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getMobileMaskByPp', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getMobileMaskByPp()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getMobileMaskByPp_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getMobileMaskByPp_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getMobileMaskByPp failed: unknown result");
  }

  public function lg_userinfo_getMobileMaskByUid(\Services\userinfo_service\MaskCodeInfo $maskInfo, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getMobileMaskByUid($maskInfo, $authorizes);
    return $this->recv_lg_userinfo_getMobileMaskByUid();
  }

  public function send_lg_userinfo_getMobileMaskByUid(\Services\userinfo_service\MaskCodeInfo $maskInfo, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getMobileMaskByUid_args();
    $args->maskInfo = $maskInfo;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getMobileMaskByUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getMobileMaskByUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getMobileMaskByUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getMobileMaskByUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getMobileMaskByUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getMobileMaskByUid failed: unknown result");
  }

  public function lg_userinfo_getEmailMaskByPp(\Services\userinfo_service\MaskCodeInfo $maskInfo, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getEmailMaskByPp($maskInfo, $authorizes);
    return $this->recv_lg_userinfo_getEmailMaskByPp();
  }

  public function send_lg_userinfo_getEmailMaskByPp(\Services\userinfo_service\MaskCodeInfo $maskInfo, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getEmailMaskByPp_args();
    $args->maskInfo = $maskInfo;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getEmailMaskByPp', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getEmailMaskByPp', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getEmailMaskByPp()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getEmailMaskByPp_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getEmailMaskByPp_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getEmailMaskByPp failed: unknown result");
  }

  public function lg_userinfo_getEmailMaskByUid(\Services\userinfo_service\MaskCodeInfo $maskInfo, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getEmailMaskByUid($maskInfo, $authorizes);
    return $this->recv_lg_userinfo_getEmailMaskByUid();
  }

  public function send_lg_userinfo_getEmailMaskByUid(\Services\userinfo_service\MaskCodeInfo $maskInfo, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getEmailMaskByUid_args();
    $args->maskInfo = $maskInfo;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getEmailMaskByUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getEmailMaskByUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getEmailMaskByUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getEmailMaskByUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getEmailMaskByUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getEmailMaskByUid failed: unknown result");
  }

  public function lg_userinfo_transPassportByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_transPassportByUid($uid, $authorizes);
    return $this->recv_lg_userinfo_transPassportByUid();
  }

  public function send_lg_userinfo_transPassportByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_transPassportByUid_args();
    $args->uid = $uid;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_transPassportByUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_transPassportByUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_transPassportByUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_transPassportByUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_transPassportByUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_transPassportByUid failed: unknown result");
  }

  public function lg_userinfo_transPassport($passport, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_transPassport($passport, $authorizes);
    return $this->recv_lg_userinfo_transPassport();
  }

  public function send_lg_userinfo_transPassport($passport, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_transPassport_args();
    $args->passport = $passport;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_transPassport', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_transPassport', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_transPassport()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_transPassport_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_transPassport_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_transPassport failed: unknown result");
  }

  public function lg_userinfo_transYYNo($yyid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_transYYNo($yyid, $authorizes);
    return $this->recv_lg_userinfo_transYYNo();
  }

  public function send_lg_userinfo_transYYNo($yyid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_transYYNo_args();
    $args->yyid = $yyid;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_transYYNo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_transYYNo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_transYYNo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_transYYNo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_transYYNo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_transYYNo failed: unknown result");
  }

  public function lg_userinfo_transUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_transUid($uid, $authorizes);
    return $this->recv_lg_userinfo_transUid();
  }

  public function send_lg_userinfo_transUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_transUid_args();
    $args->uid = $uid;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_transUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_transUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_transUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_transUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_transUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_transUid failed: unknown result");
  }

  public function lg_userinfo_transAccount($email, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_transAccount($email, $authorizes);
    return $this->recv_lg_userinfo_transAccount();
  }

  public function send_lg_userinfo_transAccount($email, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_transAccount_args();
    $args->email = $email;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_transAccount', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_transAccount', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_transAccount()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_transAccount_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_transAccount_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_transAccount failed: unknown result");
  }

  public function lg_userinfo_transAccountByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_transAccountByUid($uid, $authorizes);
    return $this->recv_lg_userinfo_transAccountByUid();
  }

  public function send_lg_userinfo_transAccountByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_transAccountByUid_args();
    $args->uid = $uid;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_transAccountByUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_transAccountByUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_transAccountByUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_transAccountByUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_transAccountByUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_transAccountByUid failed: unknown result");
  }

  public function lg_userinfo_transPassportByAccount($email, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_transPassportByAccount($email, $authorizes);
    return $this->recv_lg_userinfo_transPassportByAccount();
  }

  public function send_lg_userinfo_transPassportByAccount($email, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_transPassportByAccount_args();
    $args->email = $email;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_transPassportByAccount', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_transPassportByAccount', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_transPassportByAccount()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_transPassportByAccount_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_transPassportByAccount_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_transPassportByAccount failed: unknown result");
  }

  public function lg_userinfo_transUdbseqByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_transUdbseqByUid($uid, $authorizes);
    return $this->recv_lg_userinfo_transUdbseqByUid();
  }

  public function send_lg_userinfo_transUdbseqByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_transUdbseqByUid_args();
    $args->uid = $uid;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_transUdbseqByUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_transUdbseqByUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_transUdbseqByUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_transUdbseqByUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_transUdbseqByUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_transUdbseqByUid failed: unknown result");
  }

  public function lg_userinfo_transRegipByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_transRegipByUid($uid, $authorizes);
    return $this->recv_lg_userinfo_transRegipByUid();
  }

  public function send_lg_userinfo_transRegipByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_transRegipByUid_args();
    $args->uid = $uid;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_transRegipByUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_transRegipByUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_transRegipByUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_transRegipByUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_transRegipByUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_transRegipByUid failed: unknown result");
  }

  public function lg_userinfo_transUidByLoginMobile($mobile, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_transUidByLoginMobile($mobile, $authorizes);
    return $this->recv_lg_userinfo_transUidByLoginMobile();
  }

  public function send_lg_userinfo_transUidByLoginMobile($mobile, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_transUidByLoginMobile_args();
    $args->mobile = $mobile;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_transUidByLoginMobile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_transUidByLoginMobile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_transUidByLoginMobile()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_transUidByLoginMobile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_transUidByLoginMobile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_transUidByLoginMobile failed: unknown result");
  }

  public function lg_userinfo_gainsPassport($type, $request, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_gainsPassport($type, $request, $authorizes);
    return $this->recv_lg_userinfo_gainsPassport();
  }

  public function send_lg_userinfo_gainsPassport($type, $request, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_gainsPassport_args();
    $args->type = $type;
    $args->request = $request;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_gainsPassport', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_gainsPassport', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_gainsPassport()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_gainsPassport_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_gainsPassport_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_gainsPassport failed: unknown result");
  }

  public function lg_userinfo_gainsYYuid($type, $request, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_gainsYYuid($type, $request, $authorizes);
    return $this->recv_lg_userinfo_gainsYYuid();
  }

  public function send_lg_userinfo_gainsYYuid($type, $request, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_gainsYYuid_args();
    $args->type = $type;
    $args->request = $request;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_gainsYYuid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_gainsYYuid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_gainsYYuid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_gainsYYuid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_gainsYYuid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_gainsYYuid failed: unknown result");
  }

  public function lg_userinfo_gainsYYuidEx($request, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_gainsYYuidEx($request, $authorizes);
    return $this->recv_lg_userinfo_gainsYYuidEx();
  }

  public function send_lg_userinfo_gainsYYuidEx($request, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_gainsYYuidEx_args();
    $args->request = $request;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_gainsYYuidEx', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_gainsYYuidEx', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_gainsYYuidEx()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_gainsYYuidEx_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_gainsYYuidEx_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_gainsYYuidEx failed: unknown result");
  }

  public function lg_userinfo_getPassportMaskByLoginMobile($mobile, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getPassportMaskByLoginMobile($mobile, $authorizes);
    return $this->recv_lg_userinfo_getPassportMaskByLoginMobile();
  }

  public function send_lg_userinfo_getPassportMaskByLoginMobile($mobile, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getPassportMaskByLoginMobile_args();
    $args->mobile = $mobile;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getPassportMaskByLoginMobile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getPassportMaskByLoginMobile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getPassportMaskByLoginMobile()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getPassportMaskByLoginMobile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getPassportMaskByLoginMobile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getPassportMaskByLoginMobile failed: unknown result");
  }

  public function lg_userinfo_getLoginMobileMaskByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getLoginMobileMaskByUid($uid, $authorizes);
    return $this->recv_lg_userinfo_getLoginMobileMaskByUid();
  }

  public function send_lg_userinfo_getLoginMobileMaskByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getLoginMobileMaskByUid_args();
    $args->uid = $uid;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getLoginMobileMaskByUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getLoginMobileMaskByUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getLoginMobileMaskByUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getLoginMobileMaskByUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getLoginMobileMaskByUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getLoginMobileMaskByUid failed: unknown result");
  }

  public function lg_userinfo_checkPassportPhoneBind($passport, $phone, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_checkPassportPhoneBind($passport, $phone, $authorizes);
    return $this->recv_lg_userinfo_checkPassportPhoneBind();
  }

  public function send_lg_userinfo_checkPassportPhoneBind($passport, $phone, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkPassportPhoneBind_args();
    $args->passport = $passport;
    $args->phone = $phone;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_checkPassportPhoneBind', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_checkPassportPhoneBind', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_checkPassportPhoneBind()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_checkPassportPhoneBind_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkPassportPhoneBind_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_checkPassportPhoneBind failed: unknown result");
  }

  public function lg_userinfo_checkUidPhoneBind($uid, $phone, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_checkUidPhoneBind($uid, $phone, $authorizes);
    return $this->recv_lg_userinfo_checkUidPhoneBind();
  }

  public function send_lg_userinfo_checkUidPhoneBind($uid, $phone, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkUidPhoneBind_args();
    $args->uid = $uid;
    $args->phone = $phone;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_checkUidPhoneBind', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_checkUidPhoneBind', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_checkUidPhoneBind()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_checkUidPhoneBind_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkUidPhoneBind_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_checkUidPhoneBind failed: unknown result");
  }

  public function lg_userinfo_checkUidAccountBind($uid, $account, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_checkUidAccountBind($uid, $account, $authorizes);
    return $this->recv_lg_userinfo_checkUidAccountBind();
  }

  public function send_lg_userinfo_checkUidAccountBind($uid, $account, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkUidAccountBind_args();
    $args->uid = $uid;
    $args->account = $account;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_checkUidAccountBind', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_checkUidAccountBind', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_checkUidAccountBind()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_checkUidAccountBind_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkUidAccountBind_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_checkUidAccountBind failed: unknown result");
  }

  public function lg_userinfo_checkPassportAccountBind($passport, $account, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_checkPassportAccountBind($passport, $account, $authorizes);
    return $this->recv_lg_userinfo_checkPassportAccountBind();
  }

  public function send_lg_userinfo_checkPassportAccountBind($passport, $account, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkPassportAccountBind_args();
    $args->passport = $passport;
    $args->account = $account;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_checkPassportAccountBind', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_checkPassportAccountBind', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_checkPassportAccountBind()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_checkPassportAccountBind_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkPassportAccountBind_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_checkPassportAccountBind failed: unknown result");
  }

  public function lg_userinfo_checkAccountBindByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_checkAccountBindByUid($uid, $authorizes);
    return $this->recv_lg_userinfo_checkAccountBindByUid();
  }

  public function send_lg_userinfo_checkAccountBindByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkAccountBindByUid_args();
    $args->uid = $uid;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_checkAccountBindByUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_checkAccountBindByUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_checkAccountBindByUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_checkAccountBindByUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkAccountBindByUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_checkAccountBindByUid failed: unknown result");
  }

  public function lg_userinfo_checkPhoneBindByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_checkPhoneBindByUid($uid, $authorizes);
    return $this->recv_lg_userinfo_checkPhoneBindByUid();
  }

  public function send_lg_userinfo_checkPhoneBindByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkPhoneBindByUid_args();
    $args->uid = $uid;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_checkPhoneBindByUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_checkPhoneBindByUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_checkPhoneBindByUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_checkPhoneBindByUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkPhoneBindByUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_checkPhoneBindByUid failed: unknown result");
  }

  public function lg_userinfo_checkYYNoUsable($yyid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_checkYYNoUsable($yyid, $authorizes);
    return $this->recv_lg_userinfo_checkYYNoUsable();
  }

  public function send_lg_userinfo_checkYYNoUsable($yyid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkYYNoUsable_args();
    $args->yyid = $yyid;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_checkYYNoUsable', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_checkYYNoUsable', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_checkYYNoUsable()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_checkYYNoUsable_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkYYNoUsable_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_checkYYNoUsable failed: unknown result");
  }

  public function lg_userinfo_checkAccountUsable($account, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_checkAccountUsable($account, $authorizes);
    return $this->recv_lg_userinfo_checkAccountUsable();
  }

  public function send_lg_userinfo_checkAccountUsable($account, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkAccountUsable_args();
    $args->account = $account;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_checkAccountUsable', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_checkAccountUsable', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_checkAccountUsable()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_checkAccountUsable_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkAccountUsable_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_checkAccountUsable failed: unknown result");
  }

  public function lg_userinfo_checkVerifiedEmailByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_checkVerifiedEmailByUid($uid, $authorizes);
    return $this->recv_lg_userinfo_checkVerifiedEmailByUid();
  }

  public function send_lg_userinfo_checkVerifiedEmailByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkVerifiedEmailByUid_args();
    $args->uid = $uid;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_checkVerifiedEmailByUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_checkVerifiedEmailByUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_checkVerifiedEmailByUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_checkVerifiedEmailByUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkVerifiedEmailByUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_checkVerifiedEmailByUid failed: unknown result");
  }

  public function lg_userinfo_checkUidIdnumberBind($uid, $idnumber, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_checkUidIdnumberBind($uid, $idnumber, $authorizes);
    return $this->recv_lg_userinfo_checkUidIdnumberBind();
  }

  public function send_lg_userinfo_checkUidIdnumberBind($uid, $idnumber, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkUidIdnumberBind_args();
    $args->uid = $uid;
    $args->idnumber = $idnumber;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_checkUidIdnumberBind', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_checkUidIdnumberBind', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_checkUidIdnumberBind()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_checkUidIdnumberBind_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkUidIdnumberBind_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_checkUidIdnumberBind failed: unknown result");
  }

  public function lg_userinfo_checkRegtypeByUid($uid, $type, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_checkRegtypeByUid($uid, $type, $authorizes);
    return $this->recv_lg_userinfo_checkRegtypeByUid();
  }

  public function send_lg_userinfo_checkRegtypeByUid($uid, $type, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkRegtypeByUid_args();
    $args->uid = $uid;
    $args->type = $type;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_checkRegtypeByUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_checkRegtypeByUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_checkRegtypeByUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_checkRegtypeByUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkRegtypeByUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_checkRegtypeByUid failed: unknown result");
  }

  public function lg_userinfo_checkRegtimeByUid($uid, $regtime, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_checkRegtimeByUid($uid, $regtime, $authorizes);
    return $this->recv_lg_userinfo_checkRegtimeByUid();
  }

  public function send_lg_userinfo_checkRegtimeByUid($uid, $regtime, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkRegtimeByUid_args();
    $args->uid = $uid;
    $args->regtime = $regtime;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_checkRegtimeByUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_checkRegtimeByUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_checkRegtimeByUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_checkRegtimeByUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkRegtimeByUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_checkRegtimeByUid failed: unknown result");
  }

  public function lg_userinfo_checkRegtimeByUidEx($uid, $regtime, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_checkRegtimeByUidEx($uid, $regtime, $authorizes);
    return $this->recv_lg_userinfo_checkRegtimeByUidEx();
  }

  public function send_lg_userinfo_checkRegtimeByUidEx($uid, $regtime, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkRegtimeByUidEx_args();
    $args->uid = $uid;
    $args->regtime = $regtime;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_checkRegtimeByUidEx', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_checkRegtimeByUidEx', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_checkRegtimeByUidEx()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_checkRegtimeByUidEx_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkRegtimeByUidEx_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_checkRegtimeByUidEx failed: unknown result");
  }

  public function lg_userinfo_checkRegtimeRangeByUid($uid, $range, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_checkRegtimeRangeByUid($uid, $range, $authorizes);
    return $this->recv_lg_userinfo_checkRegtimeRangeByUid();
  }

  public function send_lg_userinfo_checkRegtimeRangeByUid($uid, $range, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkRegtimeRangeByUid_args();
    $args->uid = $uid;
    $args->range = $range;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_checkRegtimeRangeByUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_checkRegtimeRangeByUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_checkRegtimeRangeByUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_checkRegtimeRangeByUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkRegtimeRangeByUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_checkRegtimeRangeByUid failed: unknown result");
  }

  public function lg_userinfo_checkLoginBindByMobile($mobile, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_checkLoginBindByMobile($mobile, $authorizes);
    return $this->recv_lg_userinfo_checkLoginBindByMobile();
  }

  public function send_lg_userinfo_checkLoginBindByMobile($mobile, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkLoginBindByMobile_args();
    $args->mobile = $mobile;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_checkLoginBindByMobile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_checkLoginBindByMobile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_checkLoginBindByMobile()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_checkLoginBindByMobile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkLoginBindByMobile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_checkLoginBindByMobile failed: unknown result");
  }

  public function lg_userinfo_checkPicCodeByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_checkPicCodeByUid($uid, $authorizes);
    return $this->recv_lg_userinfo_checkPicCodeByUid();
  }

  public function send_lg_userinfo_checkPicCodeByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkPicCodeByUid_args();
    $args->uid = $uid;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_checkPicCodeByUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_checkPicCodeByUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_checkPicCodeByUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_checkPicCodeByUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkPicCodeByUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_checkPicCodeByUid failed: unknown result");
  }

  public function lg_userinfo_getUserBindCountByMobile($mobile, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getUserBindCountByMobile($mobile, $authorizes);
    return $this->recv_lg_userinfo_getUserBindCountByMobile();
  }

  public function send_lg_userinfo_getUserBindCountByMobile($mobile, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getUserBindCountByMobile_args();
    $args->mobile = $mobile;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getUserBindCountByMobile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getUserBindCountByMobile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getUserBindCountByMobile()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getUserBindCountByMobile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getUserBindCountByMobile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getUserBindCountByMobile failed: unknown result");
  }

  public function lg_userinfo_getMibaoInfoBindByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getMibaoInfoBindByUid($uid, $authorizes);
    return $this->recv_lg_userinfo_getMibaoInfoBindByUid();
  }

  public function send_lg_userinfo_getMibaoInfoBindByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getMibaoInfoBindByUid_args();
    $args->uid = $uid;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getMibaoInfoBindByUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getMibaoInfoBindByUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getMibaoInfoBindByUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getMibaoInfoBindByUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getMibaoInfoBindByUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getMibaoInfoBindByUid failed: unknown result");
  }

  public function lg_userinfo_getMibaoInfoBindByPp($passport, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getMibaoInfoBindByPp($passport, $authorizes);
    return $this->recv_lg_userinfo_getMibaoInfoBindByPp();
  }

  public function send_lg_userinfo_getMibaoInfoBindByPp($passport, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getMibaoInfoBindByPp_args();
    $args->passport = $passport;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getMibaoInfoBindByPp', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getMibaoInfoBindByPp', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getMibaoInfoBindByPp()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getMibaoInfoBindByPp_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getMibaoInfoBindByPp_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getMibaoInfoBindByPp failed: unknown result");
  }

  public function lg_userinfo_getYYidLoginInfoByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getYYidLoginInfoByUid($uid, $authorizes);
    return $this->recv_lg_userinfo_getYYidLoginInfoByUid();
  }

  public function send_lg_userinfo_getYYidLoginInfoByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getYYidLoginInfoByUid_args();
    $args->uid = $uid;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getYYidLoginInfoByUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getYYidLoginInfoByUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getYYidLoginInfoByUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getYYidLoginInfoByUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getYYidLoginInfoByUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getYYidLoginInfoByUid failed: unknown result");
  }

  public function lg_userinfo_sendSms(\Services\userinfo_service\SmsReq $smsinfo, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_sendSms($smsinfo, $authorizes);
    return $this->recv_lg_userinfo_sendSms();
  }

  public function send_lg_userinfo_sendSms(\Services\userinfo_service\SmsReq $smsinfo, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_sendSms_args();
    $args->smsinfo = $smsinfo;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_sendSms', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_sendSms', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_sendSms()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_sendSms_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_sendSms_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_sendSms failed: unknown result");
  }

  public function lg_userinfo_checkRegtime(\Services\userinfo_service\RegTimeReq $regtminfo, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_checkRegtime($regtminfo, $authorizes);
    return $this->recv_lg_userinfo_checkRegtime();
  }

  public function send_lg_userinfo_checkRegtime(\Services\userinfo_service\RegTimeReq $regtminfo, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkRegtime_args();
    $args->regtminfo = $regtminfo;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_checkRegtime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_checkRegtime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_checkRegtime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_checkRegtime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkRegtime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_checkRegtime failed: unknown result");
  }

  public function lg_userinfo_ping($seq)
  {
    $this->send_lg_userinfo_ping($seq);
    return $this->recv_lg_userinfo_ping();
  }

  public function send_lg_userinfo_ping($seq)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_ping_args();
    $args->seq = $seq;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_ping', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_ping', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_ping()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_ping_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_ping_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_ping failed: unknown result");
  }

  public function lg_userinfo_transPpSeqYYNoByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_transPpSeqYYNoByUid($uid, $authorizes);
    return $this->recv_lg_userinfo_transPpSeqYYNoByUid();
  }

  public function send_lg_userinfo_transPpSeqYYNoByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_transPpSeqYYNoByUid_args();
    $args->uid = $uid;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_transPpSeqYYNoByUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_transPpSeqYYNoByUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_transPpSeqYYNoByUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_transPpSeqYYNoByUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_transPpSeqYYNoByUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_transPpSeqYYNoByUid failed: unknown result");
  }

  public function lg_userinfo_transUidSeqYYNoByPp($passports, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_transUidSeqYYNoByPp($passports, $authorizes);
    return $this->recv_lg_userinfo_transUidSeqYYNoByPp();
  }

  public function send_lg_userinfo_transUidSeqYYNoByPp($passports, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_transUidSeqYYNoByPp_args();
    $args->passports = $passports;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_transUidSeqYYNoByPp', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_transUidSeqYYNoByPp', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_transUidSeqYYNoByPp()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_transUidSeqYYNoByPp_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_transUidSeqYYNoByPp_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_transUidSeqYYNoByPp failed: unknown result");
  }

  public function lg_userinfo_batchTransPpsActsByUidsEx($uids, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_batchTransPpsActsByUidsEx($uids, $authorizes);
    return $this->recv_lg_userinfo_batchTransPpsActsByUidsEx();
  }

  public function send_lg_userinfo_batchTransPpsActsByUidsEx($uids, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_batchTransPpsActsByUidsEx_args();
    $args->uids = $uids;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_batchTransPpsActsByUidsEx', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_batchTransPpsActsByUidsEx', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_batchTransPpsActsByUidsEx()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_batchTransPpsActsByUidsEx_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_batchTransPpsActsByUidsEx_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_batchTransPpsActsByUidsEx failed: unknown result");
  }

  public function lg_userinfo_batchTransYYNos($yyids, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_batchTransYYNos($yyids, $authorizes);
    return $this->recv_lg_userinfo_batchTransYYNos();
  }

  public function send_lg_userinfo_batchTransYYNos($yyids, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_batchTransYYNos_args();
    $args->yyids = $yyids;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_batchTransYYNos', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_batchTransYYNos', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_batchTransYYNos()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_batchTransYYNos_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_batchTransYYNos_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_batchTransYYNos failed: unknown result");
  }

  public function lg_userinfo_batchTransUids($uids, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_batchTransUids($uids, $authorizes);
    return $this->recv_lg_userinfo_batchTransUids();
  }

  public function send_lg_userinfo_batchTransUids($uids, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_batchTransUids_args();
    $args->uids = $uids;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_batchTransUids', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_batchTransUids', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_batchTransUids()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_batchTransUids_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_batchTransUids_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_batchTransUids failed: unknown result");
  }

  public function lg_userinfo_getMibaoQuestionByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getMibaoQuestionByUid($uid, $authorizes);
    return $this->recv_lg_userinfo_getMibaoQuestionByUid();
  }

  public function send_lg_userinfo_getMibaoQuestionByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getMibaoQuestionByUid_args();
    $args->uid = $uid;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getMibaoQuestionByUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getMibaoQuestionByUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getMibaoQuestionByUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getMibaoQuestionByUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getMibaoQuestionByUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getMibaoQuestionByUid failed: unknown result");
  }

  public function lg_userinfo_checkMibaoQAByPpAct(\Services\userinfo_service\MibaoQAReq $mibaoReq, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_checkMibaoQAByPpAct($mibaoReq, $authorizes);
    return $this->recv_lg_userinfo_checkMibaoQAByPpAct();
  }

  public function send_lg_userinfo_checkMibaoQAByPpAct(\Services\userinfo_service\MibaoQAReq $mibaoReq, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkMibaoQAByPpAct_args();
    $args->mibaoReq = $mibaoReq;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_checkMibaoQAByPpAct', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_checkMibaoQAByPpAct', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_checkMibaoQAByPpAct()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_checkMibaoQAByPpAct_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkMibaoQAByPpAct_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_checkMibaoQAByPpAct failed: unknown result");
  }

  public function lg_userinfo_checkMibaoQAByUid(\Services\userinfo_service\MibaoQAReq $mibaoReq, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_checkMibaoQAByUid($mibaoReq, $authorizes);
    return $this->recv_lg_userinfo_checkMibaoQAByUid();
  }

  public function send_lg_userinfo_checkMibaoQAByUid(\Services\userinfo_service\MibaoQAReq $mibaoReq, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkMibaoQAByUid_args();
    $args->mibaoReq = $mibaoReq;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_checkMibaoQAByUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_checkMibaoQAByUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_checkMibaoQAByUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_checkMibaoQAByUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkMibaoQAByUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_checkMibaoQAByUid failed: unknown result");
  }

  public function lg_userinfo_getIDRegipMobileByUid($uids, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getIDRegipMobileByUid($uids, $authorizes);
    return $this->recv_lg_userinfo_getIDRegipMobileByUid();
  }

  public function send_lg_userinfo_getIDRegipMobileByUid($uids, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getIDRegipMobileByUid_args();
    $args->uids = $uids;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getIDRegipMobileByUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getIDRegipMobileByUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getIDRegipMobileByUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getIDRegipMobileByUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getIDRegipMobileByUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getIDRegipMobileByUid failed: unknown result");
  }

  public function lg_userinfo_getImidInfoByImidList($imids, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getImidInfoByImidList($imids, $authorizes);
    return $this->recv_lg_userinfo_getImidInfoByImidList();
  }

  public function send_lg_userinfo_getImidInfoByImidList($imids, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getImidInfoByImidList_args();
    $args->imids = $imids;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getImidInfoByImidList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getImidInfoByImidList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getImidInfoByImidList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getImidInfoByImidList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getImidInfoByImidList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getImidInfoByImidList failed: unknown result");
  }

  public function lg_userinfo_getImidInfoByUidList($uids, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getImidInfoByUidList($uids, $authorizes);
    return $this->recv_lg_userinfo_getImidInfoByUidList();
  }

  public function send_lg_userinfo_getImidInfoByUidList($uids, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getImidInfoByUidList_args();
    $args->uids = $uids;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getImidInfoByUidList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getImidInfoByUidList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getImidInfoByUidList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getImidInfoByUidList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getImidInfoByUidList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getImidInfoByUidList failed: unknown result");
  }

  public function lg_userinfo_getIDInfoByUid(\Services\userinfo_service\IDInfoReq $idInfo, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getIDInfoByUid($idInfo, $authorizes);
    return $this->recv_lg_userinfo_getIDInfoByUid();
  }

  public function send_lg_userinfo_getIDInfoByUid(\Services\userinfo_service\IDInfoReq $idInfo, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getIDInfoByUid_args();
    $args->idInfo = $idInfo;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getIDInfoByUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getIDInfoByUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getIDInfoByUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getIDInfoByUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getIDInfoByUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getIDInfoByUid failed: unknown result");
  }

  public function lg_userinfo_getIDInfoByUidEx(\Services\userinfo_service\IDInfoExReq $idInfo, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getIDInfoByUidEx($idInfo, $authorizes);
    return $this->recv_lg_userinfo_getIDInfoByUidEx();
  }

  public function send_lg_userinfo_getIDInfoByUidEx(\Services\userinfo_service\IDInfoExReq $idInfo, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getIDInfoByUidEx_args();
    $args->idInfo = $idInfo;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getIDInfoByUidEx', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getIDInfoByUidEx', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getIDInfoByUidEx()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getIDInfoByUidEx_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getIDInfoByUidEx_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getIDInfoByUidEx failed: unknown result");
  }

  public function lg_userinfo_getYYAgeByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getYYAgeByUid($uid, $authorizes);
    return $this->recv_lg_userinfo_getYYAgeByUid();
  }

  public function send_lg_userinfo_getYYAgeByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getYYAgeByUid_args();
    $args->uid = $uid;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getYYAgeByUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getYYAgeByUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getYYAgeByUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getYYAgeByUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getYYAgeByUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getYYAgeByUid failed: unknown result");
  }

  public function lg_userinfo_getYYAgeByUidEx($uid, $flagtm, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getYYAgeByUidEx($uid, $flagtm, $authorizes);
    return $this->recv_lg_userinfo_getYYAgeByUidEx();
  }

  public function send_lg_userinfo_getYYAgeByUidEx($uid, $flagtm, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getYYAgeByUidEx_args();
    $args->uid = $uid;
    $args->flagtm = $flagtm;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getYYAgeByUidEx', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getYYAgeByUidEx', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getYYAgeByUidEx()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getYYAgeByUidEx_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getYYAgeByUidEx_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getYYAgeByUidEx failed: unknown result");
  }

  public function lg_userinfo_getYYAgeByUidList($uids, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getYYAgeByUidList($uids, $authorizes);
    return $this->recv_lg_userinfo_getYYAgeByUidList();
  }

  public function send_lg_userinfo_getYYAgeByUidList($uids, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getYYAgeByUidList_args();
    $args->uids = $uids;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getYYAgeByUidList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getYYAgeByUidList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getYYAgeByUidList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getYYAgeByUidList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getYYAgeByUidList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getYYAgeByUidList failed: unknown result");
  }

  public function lg_userinfo_getYYAgeByUidListEx($uids, $flagtm, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getYYAgeByUidListEx($uids, $flagtm, $authorizes);
    return $this->recv_lg_userinfo_getYYAgeByUidListEx();
  }

  public function send_lg_userinfo_getYYAgeByUidListEx($uids, $flagtm, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getYYAgeByUidListEx_args();
    $args->uids = $uids;
    $args->flagtm = $flagtm;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getYYAgeByUidListEx', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getYYAgeByUidListEx', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getYYAgeByUidListEx()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getYYAgeByUidListEx_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getYYAgeByUidListEx_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getYYAgeByUidListEx failed: unknown result");
  }

  public function lg_userinfo_getUserBindListByMobile($mobile, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getUserBindListByMobile($mobile, $authorizes);
    return $this->recv_lg_userinfo_getUserBindListByMobile();
  }

  public function send_lg_userinfo_getUserBindListByMobile($mobile, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getUserBindListByMobile_args();
    $args->mobile = $mobile;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getUserBindListByMobile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getUserBindListByMobile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getUserBindListByMobile()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getUserBindListByMobile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getUserBindListByMobile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getUserBindListByMobile failed: unknown result");
  }

  public function lg_userifno_getAuthAuditedInfoByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userifno_getAuthAuditedInfoByUid($uid, $authorizes);
    return $this->recv_lg_userifno_getAuthAuditedInfoByUid();
  }

  public function send_lg_userifno_getAuthAuditedInfoByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userifno_getAuthAuditedInfoByUid_args();
    $args->uid = $uid;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userifno_getAuthAuditedInfoByUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userifno_getAuthAuditedInfoByUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userifno_getAuthAuditedInfoByUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userifno_getAuthAuditedInfoByUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userifno_getAuthAuditedInfoByUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userifno_getAuthAuditedInfoByUid failed: unknown result");
  }

  public function lg_userinfo_getAuthAdultInfoByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_getAuthAdultInfoByUid($uid, $authorizes);
    return $this->recv_lg_userinfo_getAuthAdultInfoByUid();
  }

  public function send_lg_userinfo_getAuthAdultInfoByUid($uid, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_getAuthAdultInfoByUid_args();
    $args->uid = $uid;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_getAuthAdultInfoByUid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_getAuthAdultInfoByUid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_getAuthAdultInfoByUid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_getAuthAdultInfoByUid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_getAuthAdultInfoByUid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_getAuthAdultInfoByUid failed: unknown result");
  }

  public function lg_userinfo_checkIDInfo(\Services\userinfo_service\IDNameReq $idinfo, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $this->send_lg_userinfo_checkIDInfo($idinfo, $authorizes);
    return $this->recv_lg_userinfo_checkIDInfo();
  }

  public function send_lg_userinfo_checkIDInfo(\Services\userinfo_service\IDNameReq $idinfo, \Services\userinfo_service\AuthorizeMsg $authorizes)
  {
    $args = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkIDInfo_args();
    $args->idinfo = $idinfo;
    $args->authorizes = $authorizes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lg_userinfo_checkIDInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lg_userinfo_checkIDInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lg_userinfo_checkIDInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\userinfo_service\userinfo_service_lg_userinfo_checkIDInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\userinfo_service\userinfo_service_lg_userinfo_checkIDInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("lg_userinfo_checkIDInfo failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class userinfo_service_lg_userinfo_getUidsFromPps_args {
  static $_TSPEC;

  public $passports = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'passports',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['passports'])) {
        $this->passports = $vals['passports'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getUidsFromPps_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->passports);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getUidsFromPps_args');
    if ($this->passports !== null) {
      $xfer += $output->writeFieldBegin('passports', TType::STRING, 1);
      $xfer += $output->writeString($this->passports);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getUidsFromPps_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getUidsFromPps_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getUidsFromPps_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getEmailsFromPps_args {
  static $_TSPEC;

  public $passports = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'passports',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['passports'])) {
        $this->passports = $vals['passports'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getEmailsFromPps_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->passports);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getEmailsFromPps_args');
    if ($this->passports !== null) {
      $xfer += $output->writeFieldBegin('passports', TType::STRING, 1);
      $xfer += $output->writeString($this->passports);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getEmailsFromPps_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getEmailsFromPps_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getEmailsFromPps_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getPpsFromUids_args {
  static $_TSPEC;

  public $uids = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uids',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uids'])) {
        $this->uids = $vals['uids'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getPpsFromUids_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uids);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getPpsFromUids_args');
    if ($this->uids !== null) {
      $xfer += $output->writeFieldBegin('uids', TType::STRING, 1);
      $xfer += $output->writeString($this->uids);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getPpsFromUids_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getPpsFromUids_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getPpsFromUids_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getMobilesFromPps_args {
  static $_TSPEC;

  public $passports = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'passports',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['passports'])) {
        $this->passports = $vals['passports'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getMobilesFromPps_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->passports);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getMobilesFromPps_args');
    if ($this->passports !== null) {
      $xfer += $output->writeFieldBegin('passports', TType::STRING, 1);
      $xfer += $output->writeString($this->passports);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getMobilesFromPps_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getMobilesFromPps_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getMobilesFromPps_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getMobilesFromUids_args {
  static $_TSPEC;

  public $uids = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uids',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uids'])) {
        $this->uids = $vals['uids'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getMobilesFromUids_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uids);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getMobilesFromUids_args');
    if ($this->uids !== null) {
      $xfer += $output->writeFieldBegin('uids', TType::STRING, 1);
      $xfer += $output->writeString($this->uids);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getMobilesFromUids_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getMobilesFromUids_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getMobilesFromUids_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getAuthStatusByUid_args {
  static $_TSPEC;

  public $uid = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getAuthStatusByUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getAuthStatusByUid_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getAuthStatusByUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getAuthStatusByUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getAuthStatusByUid_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_sendMsgByPps_args {
  static $_TSPEC;

  public $passports = null;
  public $content = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'passports',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['passports'])) {
        $this->passports = $vals['passports'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_sendMsgByPps_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->passports);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_sendMsgByPps_args');
    if ($this->passports !== null) {
      $xfer += $output->writeFieldBegin('passports', TType::STRING, 1);
      $xfer += $output->writeString($this->passports);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 2);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 3);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_sendMsgByPps_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_sendMsgByPps_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_sendMsgByPps_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_sendMsgByUids_args {
  static $_TSPEC;

  public $uids = null;
  public $content = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uids',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uids'])) {
        $this->uids = $vals['uids'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_sendMsgByUids_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uids);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_sendMsgByUids_args');
    if ($this->uids !== null) {
      $xfer += $output->writeFieldBegin('uids', TType::STRING, 1);
      $xfer += $output->writeString($this->uids);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 2);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 3);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_sendMsgByUids_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_sendMsgByUids_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_sendMsgByUids_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_sendEmailByPp_args {
  static $_TSPEC;

  public $emailInfo = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'emailInfo',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\EMailInfoReq',
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['emailInfo'])) {
        $this->emailInfo = $vals['emailInfo'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_sendEmailByPp_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->emailInfo = new \Services\userinfo_service\EMailInfoReq();
            $xfer += $this->emailInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_sendEmailByPp_args');
    if ($this->emailInfo !== null) {
      if (!is_object($this->emailInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('emailInfo', TType::STRUCT, 1);
      $xfer += $this->emailInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_sendEmailByPp_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_sendEmailByPp_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_sendEmailByPp_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_sendEmailByUid_args {
  static $_TSPEC;

  public $emailInfo = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'emailInfo',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\EMailInfoReq',
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['emailInfo'])) {
        $this->emailInfo = $vals['emailInfo'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_sendEmailByUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->emailInfo = new \Services\userinfo_service\EMailInfoReq();
            $xfer += $this->emailInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_sendEmailByUid_args');
    if ($this->emailInfo !== null) {
      if (!is_object($this->emailInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('emailInfo', TType::STRUCT, 1);
      $xfer += $this->emailInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_sendEmailByUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_sendEmailByUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_sendEmailByUid_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getMobileMaskByPp_args {
  static $_TSPEC;

  public $maskInfo = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'maskInfo',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\MaskCodeInfo',
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['maskInfo'])) {
        $this->maskInfo = $vals['maskInfo'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getMobileMaskByPp_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->maskInfo = new \Services\userinfo_service\MaskCodeInfo();
            $xfer += $this->maskInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getMobileMaskByPp_args');
    if ($this->maskInfo !== null) {
      if (!is_object($this->maskInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('maskInfo', TType::STRUCT, 1);
      $xfer += $this->maskInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getMobileMaskByPp_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getMobileMaskByPp_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getMobileMaskByPp_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getMobileMaskByUid_args {
  static $_TSPEC;

  public $maskInfo = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'maskInfo',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\MaskCodeInfo',
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['maskInfo'])) {
        $this->maskInfo = $vals['maskInfo'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getMobileMaskByUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->maskInfo = new \Services\userinfo_service\MaskCodeInfo();
            $xfer += $this->maskInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getMobileMaskByUid_args');
    if ($this->maskInfo !== null) {
      if (!is_object($this->maskInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('maskInfo', TType::STRUCT, 1);
      $xfer += $this->maskInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getMobileMaskByUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getMobileMaskByUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getMobileMaskByUid_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getEmailMaskByPp_args {
  static $_TSPEC;

  public $maskInfo = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'maskInfo',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\MaskCodeInfo',
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['maskInfo'])) {
        $this->maskInfo = $vals['maskInfo'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getEmailMaskByPp_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->maskInfo = new \Services\userinfo_service\MaskCodeInfo();
            $xfer += $this->maskInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getEmailMaskByPp_args');
    if ($this->maskInfo !== null) {
      if (!is_object($this->maskInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('maskInfo', TType::STRUCT, 1);
      $xfer += $this->maskInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getEmailMaskByPp_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getEmailMaskByPp_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getEmailMaskByPp_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getEmailMaskByUid_args {
  static $_TSPEC;

  public $maskInfo = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'maskInfo',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\MaskCodeInfo',
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['maskInfo'])) {
        $this->maskInfo = $vals['maskInfo'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getEmailMaskByUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->maskInfo = new \Services\userinfo_service\MaskCodeInfo();
            $xfer += $this->maskInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getEmailMaskByUid_args');
    if ($this->maskInfo !== null) {
      if (!is_object($this->maskInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('maskInfo', TType::STRUCT, 1);
      $xfer += $this->maskInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getEmailMaskByUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getEmailMaskByUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getEmailMaskByUid_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_transPassportByUid_args {
  static $_TSPEC;

  public $uid = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_transPassportByUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_transPassportByUid_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_transPassportByUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_transPassportByUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_transPassportByUid_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_transPassport_args {
  static $_TSPEC;

  public $passport = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'passport',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['passport'])) {
        $this->passport = $vals['passport'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_transPassport_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->passport);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_transPassport_args');
    if ($this->passport !== null) {
      $xfer += $output->writeFieldBegin('passport', TType::STRING, 1);
      $xfer += $output->writeString($this->passport);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_transPassport_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_transPassport_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_transPassport_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_transYYNo_args {
  static $_TSPEC;

  public $yyid = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'yyid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['yyid'])) {
        $this->yyid = $vals['yyid'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_transYYNo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->yyid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_transYYNo_args');
    if ($this->yyid !== null) {
      $xfer += $output->writeFieldBegin('yyid', TType::STRING, 1);
      $xfer += $output->writeString($this->yyid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_transYYNo_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_transYYNo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_transYYNo_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_transUid_args {
  static $_TSPEC;

  public $uid = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_transUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_transUid_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_transUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_transUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_transUid_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_transAccount_args {
  static $_TSPEC;

  public $email = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_transAccount_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_transAccount_args');
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 1);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_transAccount_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_transAccount_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_transAccount_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_transAccountByUid_args {
  static $_TSPEC;

  public $uid = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_transAccountByUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_transAccountByUid_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_transAccountByUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_transAccountByUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_transAccountByUid_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_transPassportByAccount_args {
  static $_TSPEC;

  public $email = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_transPassportByAccount_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_transPassportByAccount_args');
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 1);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_transPassportByAccount_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_transPassportByAccount_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_transPassportByAccount_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_transUdbseqByUid_args {
  static $_TSPEC;

  public $uid = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_transUdbseqByUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_transUdbseqByUid_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_transUdbseqByUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_transUdbseqByUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_transUdbseqByUid_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_transRegipByUid_args {
  static $_TSPEC;

  public $uid = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_transRegipByUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_transRegipByUid_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_transRegipByUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_transRegipByUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_transRegipByUid_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_transUidByLoginMobile_args {
  static $_TSPEC;

  public $mobile = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_transUidByLoginMobile_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_transUidByLoginMobile_args');
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::STRING, 1);
      $xfer += $output->writeString($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_transUidByLoginMobile_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_transUidByLoginMobile_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_transUidByLoginMobile_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_gainsPassport_args {
  static $_TSPEC;

  public $type = null;
  public $request = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'request',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_gainsPassport_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->request);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_gainsPassport_args');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->request !== null) {
      $xfer += $output->writeFieldBegin('request', TType::STRING, 2);
      $xfer += $output->writeString($this->request);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 3);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_gainsPassport_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_gainsPassport_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_gainsPassport_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_gainsYYuid_args {
  static $_TSPEC;

  public $type = null;
  public $request = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'request',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_gainsYYuid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->request);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_gainsYYuid_args');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->request !== null) {
      $xfer += $output->writeFieldBegin('request', TType::STRING, 2);
      $xfer += $output->writeString($this->request);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 3);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_gainsYYuid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_gainsYYuid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_gainsYYuid_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_gainsYYuidEx_args {
  static $_TSPEC;

  public $request = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_gainsYYuidEx_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->request);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_gainsYYuidEx_args');
    if ($this->request !== null) {
      $xfer += $output->writeFieldBegin('request', TType::STRING, 1);
      $xfer += $output->writeString($this->request);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_gainsYYuidEx_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_gainsYYuidEx_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_gainsYYuidEx_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getPassportMaskByLoginMobile_args {
  static $_TSPEC;

  public $mobile = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getPassportMaskByLoginMobile_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getPassportMaskByLoginMobile_args');
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::STRING, 1);
      $xfer += $output->writeString($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getPassportMaskByLoginMobile_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getPassportMaskByLoginMobile_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getPassportMaskByLoginMobile_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getLoginMobileMaskByUid_args {
  static $_TSPEC;

  public $uid = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getLoginMobileMaskByUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getLoginMobileMaskByUid_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getLoginMobileMaskByUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getLoginMobileMaskByUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getLoginMobileMaskByUid_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkPassportPhoneBind_args {
  static $_TSPEC;

  public $passport = null;
  public $phone = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'passport',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['passport'])) {
        $this->passport = $vals['passport'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkPassportPhoneBind_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->passport);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkPassportPhoneBind_args');
    if ($this->passport !== null) {
      $xfer += $output->writeFieldBegin('passport', TType::STRING, 1);
      $xfer += $output->writeString($this->passport);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 2);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 3);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkPassportPhoneBind_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkPassportPhoneBind_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkPassportPhoneBind_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkUidPhoneBind_args {
  static $_TSPEC;

  public $uid = null;
  public $phone = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkUidPhoneBind_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkUidPhoneBind_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 2);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 3);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkUidPhoneBind_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkUidPhoneBind_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkUidPhoneBind_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkUidAccountBind_args {
  static $_TSPEC;

  public $uid = null;
  public $account = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'account',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['account'])) {
        $this->account = $vals['account'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkUidAccountBind_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->account);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkUidAccountBind_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->account !== null) {
      $xfer += $output->writeFieldBegin('account', TType::STRING, 2);
      $xfer += $output->writeString($this->account);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 3);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkUidAccountBind_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkUidAccountBind_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkUidAccountBind_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkPassportAccountBind_args {
  static $_TSPEC;

  public $passport = null;
  public $account = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'passport',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'account',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['passport'])) {
        $this->passport = $vals['passport'];
      }
      if (isset($vals['account'])) {
        $this->account = $vals['account'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkPassportAccountBind_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->passport);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->account);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkPassportAccountBind_args');
    if ($this->passport !== null) {
      $xfer += $output->writeFieldBegin('passport', TType::STRING, 1);
      $xfer += $output->writeString($this->passport);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->account !== null) {
      $xfer += $output->writeFieldBegin('account', TType::STRING, 2);
      $xfer += $output->writeString($this->account);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 3);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkPassportAccountBind_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkPassportAccountBind_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkPassportAccountBind_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkAccountBindByUid_args {
  static $_TSPEC;

  public $uid = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkAccountBindByUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkAccountBindByUid_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkAccountBindByUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkAccountBindByUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkAccountBindByUid_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkPhoneBindByUid_args {
  static $_TSPEC;

  public $uid = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkPhoneBindByUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkPhoneBindByUid_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkPhoneBindByUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkPhoneBindByUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkPhoneBindByUid_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkYYNoUsable_args {
  static $_TSPEC;

  public $yyid = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'yyid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['yyid'])) {
        $this->yyid = $vals['yyid'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkYYNoUsable_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->yyid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkYYNoUsable_args');
    if ($this->yyid !== null) {
      $xfer += $output->writeFieldBegin('yyid', TType::STRING, 1);
      $xfer += $output->writeString($this->yyid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkYYNoUsable_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkYYNoUsable_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkYYNoUsable_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkAccountUsable_args {
  static $_TSPEC;

  public $account = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'account',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['account'])) {
        $this->account = $vals['account'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkAccountUsable_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->account);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkAccountUsable_args');
    if ($this->account !== null) {
      $xfer += $output->writeFieldBegin('account', TType::STRING, 1);
      $xfer += $output->writeString($this->account);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkAccountUsable_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkAccountUsable_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkAccountUsable_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkVerifiedEmailByUid_args {
  static $_TSPEC;

  public $uid = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkVerifiedEmailByUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkVerifiedEmailByUid_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkVerifiedEmailByUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkVerifiedEmailByUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkVerifiedEmailByUid_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkUidIdnumberBind_args {
  static $_TSPEC;

  public $uid = null;
  public $idnumber = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'idnumber',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['idnumber'])) {
        $this->idnumber = $vals['idnumber'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkUidIdnumberBind_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idnumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkUidIdnumberBind_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idnumber !== null) {
      $xfer += $output->writeFieldBegin('idnumber', TType::STRING, 2);
      $xfer += $output->writeString($this->idnumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 3);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkUidIdnumberBind_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkUidIdnumberBind_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkUidIdnumberBind_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkRegtypeByUid_args {
  static $_TSPEC;

  public $uid = null;
  public $type = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkRegtypeByUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkRegtypeByUid_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 2);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 3);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkRegtypeByUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkRegtypeByUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkRegtypeByUid_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkRegtimeByUid_args {
  static $_TSPEC;

  public $uid = null;
  public $regtime = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'regtime',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['regtime'])) {
        $this->regtime = $vals['regtime'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkRegtimeByUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->regtime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkRegtimeByUid_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->regtime !== null) {
      $xfer += $output->writeFieldBegin('regtime', TType::STRING, 2);
      $xfer += $output->writeString($this->regtime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 3);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkRegtimeByUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkRegtimeByUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkRegtimeByUid_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkRegtimeByUidEx_args {
  static $_TSPEC;

  public $uid = null;
  public $regtime = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'regtime',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['regtime'])) {
        $this->regtime = $vals['regtime'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkRegtimeByUidEx_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->regtime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkRegtimeByUidEx_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->regtime !== null) {
      $xfer += $output->writeFieldBegin('regtime', TType::STRING, 2);
      $xfer += $output->writeString($this->regtime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 3);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkRegtimeByUidEx_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkRegtimeByUidEx_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkRegtimeByUidEx_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkRegtimeRangeByUid_args {
  static $_TSPEC;

  public $uid = null;
  public $range = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'range',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['range'])) {
        $this->range = $vals['range'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkRegtimeRangeByUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->range);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkRegtimeRangeByUid_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->range !== null) {
      $xfer += $output->writeFieldBegin('range', TType::I32, 2);
      $xfer += $output->writeI32($this->range);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 3);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkRegtimeRangeByUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkRegtimeRangeByUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkRegtimeRangeByUid_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkLoginBindByMobile_args {
  static $_TSPEC;

  public $mobile = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkLoginBindByMobile_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkLoginBindByMobile_args');
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::STRING, 1);
      $xfer += $output->writeString($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkLoginBindByMobile_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkLoginBindByMobile_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkLoginBindByMobile_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkPicCodeByUid_args {
  static $_TSPEC;

  public $uid = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkPicCodeByUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkPicCodeByUid_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkPicCodeByUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkPicCodeByUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkPicCodeByUid_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getUserBindCountByMobile_args {
  static $_TSPEC;

  public $mobile = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getUserBindCountByMobile_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getUserBindCountByMobile_args');
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::STRING, 1);
      $xfer += $output->writeString($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getUserBindCountByMobile_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getUserBindCountByMobile_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getUserBindCountByMobile_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getMibaoInfoBindByUid_args {
  static $_TSPEC;

  public $uid = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getMibaoInfoBindByUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getMibaoInfoBindByUid_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getMibaoInfoBindByUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getMibaoInfoBindByUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getMibaoInfoBindByUid_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getMibaoInfoBindByPp_args {
  static $_TSPEC;

  public $passport = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'passport',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['passport'])) {
        $this->passport = $vals['passport'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getMibaoInfoBindByPp_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->passport);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getMibaoInfoBindByPp_args');
    if ($this->passport !== null) {
      $xfer += $output->writeFieldBegin('passport', TType::STRING, 1);
      $xfer += $output->writeString($this->passport);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getMibaoInfoBindByPp_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getMibaoInfoBindByPp_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getMibaoInfoBindByPp_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getYYidLoginInfoByUid_args {
  static $_TSPEC;

  public $uid = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getYYidLoginInfoByUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getYYidLoginInfoByUid_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getYYidLoginInfoByUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getYYidLoginInfoByUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getYYidLoginInfoByUid_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_sendSms_args {
  static $_TSPEC;

  public $smsinfo = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'smsinfo',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\SmsReq',
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['smsinfo'])) {
        $this->smsinfo = $vals['smsinfo'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_sendSms_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->smsinfo = new \Services\userinfo_service\SmsReq();
            $xfer += $this->smsinfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_sendSms_args');
    if ($this->smsinfo !== null) {
      if (!is_object($this->smsinfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('smsinfo', TType::STRUCT, 1);
      $xfer += $this->smsinfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_sendSms_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_sendSms_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_sendSms_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkRegtime_args {
  static $_TSPEC;

  public $regtminfo = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'regtminfo',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\RegTimeReq',
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['regtminfo'])) {
        $this->regtminfo = $vals['regtminfo'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkRegtime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->regtminfo = new \Services\userinfo_service\RegTimeReq();
            $xfer += $this->regtminfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkRegtime_args');
    if ($this->regtminfo !== null) {
      if (!is_object($this->regtminfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('regtminfo', TType::STRUCT, 1);
      $xfer += $this->regtminfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkRegtime_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkRegtime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkRegtime_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_ping_args {
  static $_TSPEC;

  public $seq = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'seq',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['seq'])) {
        $this->seq = $vals['seq'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_ping_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_ping_args');
    if ($this->seq !== null) {
      $xfer += $output->writeFieldBegin('seq', TType::I32, 1);
      $xfer += $output->writeI32($this->seq);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_ping_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_ping_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_ping_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_transPpSeqYYNoByUid_args {
  static $_TSPEC;

  public $uid = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_transPpSeqYYNoByUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_transPpSeqYYNoByUid_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_transPpSeqYYNoByUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\PassportUdbseqImidRet',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_transPpSeqYYNoByUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\userinfo_service\PassportUdbseqImidRet();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_transPpSeqYYNoByUid_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_transUidSeqYYNoByPp_args {
  static $_TSPEC;

  public $passports = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'passports',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['passports'])) {
        $this->passports = $vals['passports'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_transUidSeqYYNoByPp_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->passports);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_transUidSeqYYNoByPp_args');
    if ($this->passports !== null) {
      $xfer += $output->writeFieldBegin('passports', TType::STRING, 1);
      $xfer += $output->writeString($this->passports);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_transUidSeqYYNoByPp_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\YYuidUdbseqImidRet',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_transUidSeqYYNoByPp_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\userinfo_service\YYuidUdbseqImidRet();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_transUidSeqYYNoByPp_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_batchTransPpsActsByUidsEx_args {
  static $_TSPEC;

  public $uids = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uids'])) {
        $this->uids = $vals['uids'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_batchTransPpsActsByUidsEx_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->uids = array();
            $_size39 = 0;
            $_etype42 = 0;
            $xfer += $input->readListBegin($_etype42, $_size39);
            for ($_i43 = 0; $_i43 < $_size39; ++$_i43)
            {
              $elem44 = null;
              $xfer += $input->readString($elem44);
              $this->uids []= $elem44;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_batchTransPpsActsByUidsEx_args');
    if ($this->uids !== null) {
      if (!is_array($this->uids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('uids', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->uids));
        {
          foreach ($this->uids as $iter45)
          {
            $xfer += $output->writeString($iter45);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_batchTransPpsActsByUidsEx_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\PassportEmailRet',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_batchTransPpsActsByUidsEx_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\userinfo_service\PassportEmailRet();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_batchTransPpsActsByUidsEx_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_batchTransYYNos_args {
  static $_TSPEC;

  public $yyids = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'yyids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['yyids'])) {
        $this->yyids = $vals['yyids'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_batchTransYYNos_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->yyids = array();
            $_size46 = 0;
            $_etype49 = 0;
            $xfer += $input->readListBegin($_etype49, $_size46);
            for ($_i50 = 0; $_i50 < $_size46; ++$_i50)
            {
              $elem51 = null;
              $xfer += $input->readString($elem51);
              $this->yyids []= $elem51;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_batchTransYYNos_args');
    if ($this->yyids !== null) {
      if (!is_array($this->yyids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('yyids', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->yyids));
        {
          foreach ($this->yyids as $iter52)
          {
            $xfer += $output->writeString($iter52);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_batchTransYYNos_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_batchTransYYNos_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size53 = 0;
            $_ktype54 = 0;
            $_vtype55 = 0;
            $xfer += $input->readMapBegin($_ktype54, $_vtype55, $_size53);
            for ($_i57 = 0; $_i57 < $_size53; ++$_i57)
            {
              $key58 = '';
              $val59 = '';
              $xfer += $input->readString($key58);
              $xfer += $input->readString($val59);
              $this->success[$key58] = $val59;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_batchTransYYNos_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter60 => $viter61)
          {
            $xfer += $output->writeString($kiter60);
            $xfer += $output->writeString($viter61);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_batchTransUids_args {
  static $_TSPEC;

  public $uids = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uids'])) {
        $this->uids = $vals['uids'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_batchTransUids_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->uids = array();
            $_size62 = 0;
            $_etype65 = 0;
            $xfer += $input->readListBegin($_etype65, $_size62);
            for ($_i66 = 0; $_i66 < $_size62; ++$_i66)
            {
              $elem67 = null;
              $xfer += $input->readString($elem67);
              $this->uids []= $elem67;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_batchTransUids_args');
    if ($this->uids !== null) {
      if (!is_array($this->uids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('uids', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->uids));
        {
          foreach ($this->uids as $iter68)
          {
            $xfer += $output->writeString($iter68);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_batchTransUids_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_batchTransUids_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size69 = 0;
            $_ktype70 = 0;
            $_vtype71 = 0;
            $xfer += $input->readMapBegin($_ktype70, $_vtype71, $_size69);
            for ($_i73 = 0; $_i73 < $_size69; ++$_i73)
            {
              $key74 = '';
              $val75 = '';
              $xfer += $input->readString($key74);
              $xfer += $input->readString($val75);
              $this->success[$key74] = $val75;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_batchTransUids_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter76 => $viter77)
          {
            $xfer += $output->writeString($kiter76);
            $xfer += $output->writeString($viter77);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getMibaoQuestionByUid_args {
  static $_TSPEC;

  public $uid = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getMibaoQuestionByUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getMibaoQuestionByUid_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getMibaoQuestionByUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\MibaoQuesRes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getMibaoQuestionByUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\userinfo_service\MibaoQuesRes();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getMibaoQuestionByUid_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkMibaoQAByPpAct_args {
  static $_TSPEC;

  public $mibaoReq = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mibaoReq',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\MibaoQAReq',
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mibaoReq'])) {
        $this->mibaoReq = $vals['mibaoReq'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkMibaoQAByPpAct_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->mibaoReq = new \Services\userinfo_service\MibaoQAReq();
            $xfer += $this->mibaoReq->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkMibaoQAByPpAct_args');
    if ($this->mibaoReq !== null) {
      if (!is_object($this->mibaoReq)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mibaoReq', TType::STRUCT, 1);
      $xfer += $this->mibaoReq->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkMibaoQAByPpAct_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\MibaoQARes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkMibaoQAByPpAct_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\userinfo_service\MibaoQARes();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkMibaoQAByPpAct_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkMibaoQAByUid_args {
  static $_TSPEC;

  public $mibaoReq = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mibaoReq',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\MibaoQAReq',
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mibaoReq'])) {
        $this->mibaoReq = $vals['mibaoReq'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkMibaoQAByUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->mibaoReq = new \Services\userinfo_service\MibaoQAReq();
            $xfer += $this->mibaoReq->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkMibaoQAByUid_args');
    if ($this->mibaoReq !== null) {
      if (!is_object($this->mibaoReq)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mibaoReq', TType::STRUCT, 1);
      $xfer += $this->mibaoReq->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkMibaoQAByUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\MibaoQARes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkMibaoQAByUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\userinfo_service\MibaoQARes();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkMibaoQAByUid_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getIDRegipMobileByUid_args {
  static $_TSPEC;

  public $uids = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uids',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uids'])) {
        $this->uids = $vals['uids'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getIDRegipMobileByUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uids);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getIDRegipMobileByUid_args');
    if ($this->uids !== null) {
      $xfer += $output->writeFieldBegin('uids', TType::STRING, 1);
      $xfer += $output->writeString($this->uids);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getIDRegipMobileByUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\IDRegipMobileRes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getIDRegipMobileByUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\userinfo_service\IDRegipMobileRes();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getIDRegipMobileByUid_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getImidInfoByImidList_args {
  static $_TSPEC;

  public $imids = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'imids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['imids'])) {
        $this->imids = $vals['imids'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getImidInfoByImidList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->imids = array();
            $_size78 = 0;
            $_etype81 = 0;
            $xfer += $input->readListBegin($_etype81, $_size78);
            for ($_i82 = 0; $_i82 < $_size78; ++$_i82)
            {
              $elem83 = null;
              $xfer += $input->readI32($elem83);
              $this->imids []= $elem83;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getImidInfoByImidList_args');
    if ($this->imids !== null) {
      if (!is_array($this->imids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('imids', TType::LST, 1);
      {
        $output->writeListBegin(TType::I32, count($this->imids));
        {
          foreach ($this->imids as $iter84)
          {
            $xfer += $output->writeI32($iter84);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getImidInfoByImidList_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\ImidInfoRet',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getImidInfoByImidList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\userinfo_service\ImidInfoRet();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getImidInfoByImidList_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getImidInfoByUidList_args {
  static $_TSPEC;

  public $uids = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uids'])) {
        $this->uids = $vals['uids'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getImidInfoByUidList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->uids = array();
            $_size85 = 0;
            $_etype88 = 0;
            $xfer += $input->readListBegin($_etype88, $_size85);
            for ($_i89 = 0; $_i89 < $_size85; ++$_i89)
            {
              $elem90 = null;
              $xfer += $input->readI32($elem90);
              $this->uids []= $elem90;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getImidInfoByUidList_args');
    if ($this->uids !== null) {
      if (!is_array($this->uids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('uids', TType::LST, 1);
      {
        $output->writeListBegin(TType::I32, count($this->uids));
        {
          foreach ($this->uids as $iter91)
          {
            $xfer += $output->writeI32($iter91);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getImidInfoByUidList_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\ImidInfoRet',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getImidInfoByUidList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\userinfo_service\ImidInfoRet();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getImidInfoByUidList_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getIDInfoByUid_args {
  static $_TSPEC;

  public $idInfo = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'idInfo',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\IDInfoReq',
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['idInfo'])) {
        $this->idInfo = $vals['idInfo'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getIDInfoByUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->idInfo = new \Services\userinfo_service\IDInfoReq();
            $xfer += $this->idInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getIDInfoByUid_args');
    if ($this->idInfo !== null) {
      if (!is_object($this->idInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('idInfo', TType::STRUCT, 1);
      $xfer += $this->idInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getIDInfoByUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\IDInfoRes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getIDInfoByUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\userinfo_service\IDInfoRes();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getIDInfoByUid_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getIDInfoByUidEx_args {
  static $_TSPEC;

  public $idInfo = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'idInfo',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\IDInfoExReq',
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['idInfo'])) {
        $this->idInfo = $vals['idInfo'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getIDInfoByUidEx_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->idInfo = new \Services\userinfo_service\IDInfoExReq();
            $xfer += $this->idInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getIDInfoByUidEx_args');
    if ($this->idInfo !== null) {
      if (!is_object($this->idInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('idInfo', TType::STRUCT, 1);
      $xfer += $this->idInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getIDInfoByUidEx_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\IDInfoRes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getIDInfoByUidEx_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\userinfo_service\IDInfoRes();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getIDInfoByUidEx_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getYYAgeByUid_args {
  static $_TSPEC;

  public $uid = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getYYAgeByUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getYYAgeByUid_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getYYAgeByUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\YYAgeRes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getYYAgeByUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\userinfo_service\YYAgeRes();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getYYAgeByUid_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getYYAgeByUidEx_args {
  static $_TSPEC;

  public $uid = null;
  public $flagtm = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'flagtm',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['flagtm'])) {
        $this->flagtm = $vals['flagtm'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getYYAgeByUidEx_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->flagtm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getYYAgeByUidEx_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flagtm !== null) {
      $xfer += $output->writeFieldBegin('flagtm', TType::STRING, 2);
      $xfer += $output->writeString($this->flagtm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 3);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getYYAgeByUidEx_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\YYAgeRes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getYYAgeByUidEx_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\userinfo_service\YYAgeRes();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getYYAgeByUidEx_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getYYAgeByUidList_args {
  static $_TSPEC;

  public $uids = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uids'])) {
        $this->uids = $vals['uids'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getYYAgeByUidList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->uids = array();
            $_size92 = 0;
            $_etype95 = 0;
            $xfer += $input->readListBegin($_etype95, $_size92);
            for ($_i96 = 0; $_i96 < $_size92; ++$_i96)
            {
              $elem97 = null;
              $xfer += $input->readString($elem97);
              $this->uids []= $elem97;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getYYAgeByUidList_args');
    if ($this->uids !== null) {
      if (!is_array($this->uids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('uids', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->uids));
        {
          foreach ($this->uids as $iter98)
          {
            $xfer += $output->writeString($iter98);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getYYAgeByUidList_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\YYAgeExRes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getYYAgeByUidList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\userinfo_service\YYAgeExRes();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getYYAgeByUidList_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getYYAgeByUidListEx_args {
  static $_TSPEC;

  public $uids = null;
  public $flagtm = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'flagtm',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uids'])) {
        $this->uids = $vals['uids'];
      }
      if (isset($vals['flagtm'])) {
        $this->flagtm = $vals['flagtm'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getYYAgeByUidListEx_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->uids = array();
            $_size99 = 0;
            $_etype102 = 0;
            $xfer += $input->readListBegin($_etype102, $_size99);
            for ($_i103 = 0; $_i103 < $_size99; ++$_i103)
            {
              $elem104 = null;
              $xfer += $input->readString($elem104);
              $this->uids []= $elem104;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->flagtm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getYYAgeByUidListEx_args');
    if ($this->uids !== null) {
      if (!is_array($this->uids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('uids', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->uids));
        {
          foreach ($this->uids as $iter105)
          {
            $xfer += $output->writeString($iter105);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flagtm !== null) {
      $xfer += $output->writeFieldBegin('flagtm', TType::STRING, 2);
      $xfer += $output->writeString($this->flagtm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 3);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getYYAgeByUidListEx_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\YYAgeExRes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getYYAgeByUidListEx_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\userinfo_service\YYAgeExRes();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getYYAgeByUidListEx_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getUserBindListByMobile_args {
  static $_TSPEC;

  public $mobile = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getUserBindListByMobile_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getUserBindListByMobile_args');
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::STRING, 1);
      $xfer += $output->writeString($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getUserBindListByMobile_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\UserListRes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getUserBindListByMobile_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\userinfo_service\UserListRes();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getUserBindListByMobile_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userifno_getAuthAuditedInfoByUid_args {
  static $_TSPEC;

  public $uid = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userifno_getAuthAuditedInfoByUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userifno_getAuthAuditedInfoByUid_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userifno_getAuthAuditedInfoByUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthAuditedRes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userifno_getAuthAuditedInfoByUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\userinfo_service\AuthAuditedRes();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userifno_getAuthAuditedInfoByUid_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getAuthAdultInfoByUid_args {
  static $_TSPEC;

  public $uid = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getAuthAdultInfoByUid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getAuthAdultInfoByUid_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_getAuthAdultInfoByUid_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthAdultRes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_getAuthAdultInfoByUid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\userinfo_service\AuthAdultRes();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_getAuthAdultInfoByUid_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkIDInfo_args {
  static $_TSPEC;

  public $idinfo = null;
  public $authorizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'idinfo',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\IDNameReq',
          ),
        2 => array(
          'var' => 'authorizes',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\AuthorizeMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['idinfo'])) {
        $this->idinfo = $vals['idinfo'];
      }
      if (isset($vals['authorizes'])) {
        $this->authorizes = $vals['authorizes'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkIDInfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->idinfo = new \Services\userinfo_service\IDNameReq();
            $xfer += $this->idinfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->authorizes = new \Services\userinfo_service\AuthorizeMsg();
            $xfer += $this->authorizes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkIDInfo_args');
    if ($this->idinfo !== null) {
      if (!is_object($this->idinfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('idinfo', TType::STRUCT, 1);
      $xfer += $this->idinfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizes !== null) {
      if (!is_object($this->authorizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authorizes', TType::STRUCT, 2);
      $xfer += $this->authorizes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class userinfo_service_lg_userinfo_checkIDInfo_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\userinfo_service\IDNameRes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'userinfo_service_lg_userinfo_checkIDInfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\userinfo_service\IDNameRes();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('userinfo_service_lg_userinfo_checkIDInfo_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


