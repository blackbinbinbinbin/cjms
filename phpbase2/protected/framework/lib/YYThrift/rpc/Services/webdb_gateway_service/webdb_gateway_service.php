<?php
namespace Services\webdb_gateway_service;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface webdb_gateway_serviceIf extends \Services\webdb_gateway_service\webdb_gateway_base_serviceIf {
  public function get_custom_logo($uid);
  public function get_uid($passport, $cl);
  public function get_uid_by_passport($passport, $cl);
  public function get_uid_by_account($account, $cl);
  public function get_user_info($uid, $columns, $cl);
  public function batch_get_user_info($uids, $columns, $cl);
  public function create_user_info($uid, $nick, $gender, $area);
  public function get_settle_guild_info($uid);
  public function validate_session_owner($sid, $uid, $cl);
  public function get_session_info($sid, $columns, $cl);
  public function batch_get_session_info($sids, $columns, $cl);
  public function get_session_template($tid, $sid);
  public function get_session_jiedai_description($tid);
  public function get_session_introduce($tid);
  public function set_session_introduce($tid, $introduce);
  public function get_session_score($sid, $cl);
  public function get_session_logo_url($sid, $cl);
  public function batch_get_session_logo_url($sids, $cl);
  public function get_session_asid($sid, $cl);
  public function batch_get_session_asid($sids, $cl);
  public function set_session_password($sid, $pwd, $new_pwd, $cl);
  public function erase_session_password($sid, $cl);
  public function get_sid_by_asid($asid, $cl);
  public function batch_get_sub_sessions_info($tid, $pid, $columns, $full_recursive, $cl);
  public function get_sub_channel_list($sid, $cl);
  public function get_sub_sessions_count($tid, $pid, $cl);
  public function validate_sub_session($tid, $pid, $sid);
  public function validate_sub_session_manager($tid, $sid, $uid);
  public function set_sub_sessions_order($tid, $sub_sessions_sort, $cl);
  public function get_favorite_session_list($uid, $cl);
  public function get_session_count_by_owner($uid, $cl);
  public function get_session_list_by_ownerid($ownerid, $cl);
  public function get_sessions_by_owner($ownerid, $cl);
  public function get_session_member_info($sid, $uid, $columns, $cl);
  public function batch_get_member_info_by_session($uid, $sids, $columns, $cl);
  public function batch_get_member_info_by_user($sid, $uids, $columns, $cl);
  public function batch_get_role_by_memberid($sid, $uids, $cl);
  public function get_session_member_count_by_role($sid, $roles, $cl);
  public function get_session_regular_member_count($sid, $cl);
  public function batch_set_session_member_role($sid, $uids, $role, $cl);
  public function batch_erase_subsession_manager($sid, $uids, $cl);
  public function batch_erase_session_member($sid, $uids, $admin_uid, $admin_nick, $cl);
  public function get_session_list_count_by_role($uid, $role, $cl);
  public function get_session_list_by_role($uid, $role, $page, $per_page, $order_by, $descending, $cl);
  public function batch_get_session_list_by_role($uid, $roles, $order_by, $descending, $cl);
  public function get_session_members_by_role($sid, $columns, $role, $page, $per_page, $order_by, $descending, $cl);
  public function get_session_sub_managers($tid, $columns);
  public function get_yy_admin_type($uid, $cl);
  public function get_session_ip_blacklist_count($sid, $date_from, $date_to, $reason, $uid, $cl);
  public function get_session_ip_blacklist($sid, $date_from, $date_to, $reason, $uid, $columns, $page, $per_page, $order_by, $descending, $cl);
  public function get_session_id_blacklist_count($sid, $date_from, $date_to, $reason, $uid, $cl);
  public function get_session_id_blacklist($sid, $date_from, $date_to, $reason, $uid, $columns, $page, $per_page, $order_by, $descending, $cl);
  public function erase_session_blacklist($sid, $ban_type, $cl);
  public function batch_erase_session_blacklist_element($sid, $ban_types, $uids_ips, $cl);
  public function set_autio_high_quality($sid, $flag, $cl);
  public function disable_audio_high_quality($sid, $cl);
  public function get_session_gyz($sid, $cl);
  public function set_application_rule($sid, $request_jifen, $app_instru, $cl);
  public function get_guild_applications_count($tid, $cl);
  public function get_guild_applications_per_page($tid, $columns, $page, $per_page, $order_by, $descending, $cl);
  public function get_guild_applications_by_uids($tid, $uids, $columns, $cl);
  public function handle_applications($tid, $uids, $new_role, $admin_uid, $admin_nick, $cl);
  public function get_guild_exited_members_count($tid, $cl);
  public function get_guild_exited_members_per_page($tid, $columns, $page, $per_page, $order_by, $descending, $cl);
  public function get_guild_exited_members_by_uids($tid, $uids, $columns, $cl);
  public function set_apply_guild_notify($tid, $isNotify, $cl);
  public function get_apply_guild_notify($tid, $cl);
  public function create_session($sid, $name, $isp, $blimit, $bpub, $typestr, $type, $uid, $ip, $cl);
  public function create_session2($sid, $name, $isp, $blimit, $bpub, $typestr, $type, $uid, $ip, $area, $language);
  public function get_session_list($uid, $cl);
  public function active_uid($passport, $sha1Passwd, $ip, $nick, $cl);
  public function active_uid_and_imid($passport, $sha1Passwd, $ip, $cl);
  public function check_global_ban($uid, $cl);
  public function check_cookie($cookie, $uid, $expirtime, $cl);
  public function enable_autio_high_quality($sid, $cl);
  public function erase_subsession_admin($sid, $uids, $cl);
  public function set_subsession_order($pid, $sids, $orders, $cl);
  public function get_user_psw($uid, $cl);
  public function reset_account_by_passport($account, $passport, $cl);
  public function reset_passwd_by_passport($passwd, $passport, $cl);
  public function reset_passwd_by_passport_ip($passwd, $passport, $ip, $cl);
  public function resume_members($tid, $uids, $cl);
  public function validate_user_pwd($passport, $shapasswd, $yzm_auth, $ip, $app_type, $cl);
  public function validate_user_pwd_by_uid($uid, $shapasswd, $time, $ip, $app_type, $cl);
}

class webdb_gateway_serviceClient extends \Services\webdb_gateway_service\webdb_gateway_base_serviceClient implements \Services\webdb_gateway_service\webdb_gateway_serviceIf {
  public function __construct($input, $output=null) {
    parent::__construct($input, $output);
  }

  public function get_custom_logo($uid)
  {
    $this->send_get_custom_logo($uid);
    return $this->recv_get_custom_logo();
  }

  public function send_get_custom_logo($uid)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_custom_logo_args();
    $args->uid = $uid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_custom_logo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_custom_logo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_custom_logo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_custom_logo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_custom_logo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("get_custom_logo failed: unknown result");
  }

  public function get_uid($passport, $cl)
  {
    $this->send_get_uid($passport, $cl);
    return $this->recv_get_uid();
  }

  public function send_get_uid($passport, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_uid_args();
    $args->passport = $passport;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_uid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_uid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_uid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_uid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_uid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_uid failed: unknown result");
  }

  public function get_uid_by_passport($passport, $cl)
  {
    $this->send_get_uid_by_passport($passport, $cl);
    return $this->recv_get_uid_by_passport();
  }

  public function send_get_uid_by_passport($passport, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_uid_by_passport_args();
    $args->passport = $passport;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_uid_by_passport', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_uid_by_passport', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_uid_by_passport()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_uid_by_passport_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_uid_by_passport_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_uid_by_passport failed: unknown result");
  }

  public function get_uid_by_account($account, $cl)
  {
    $this->send_get_uid_by_account($account, $cl);
    return $this->recv_get_uid_by_account();
  }

  public function send_get_uid_by_account($account, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_uid_by_account_args();
    $args->account = $account;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_uid_by_account', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_uid_by_account', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_uid_by_account()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_uid_by_account_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_uid_by_account_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_uid_by_account failed: unknown result");
  }

  public function get_user_info($uid, $columns, $cl)
  {
    $this->send_get_user_info($uid, $columns, $cl);
    return $this->recv_get_user_info();
  }

  public function send_get_user_info($uid, $columns, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_user_info_args();
    $args->uid = $uid;
    $args->columns = $columns;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_user_info', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_user_info', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_user_info()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_user_info_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_user_info_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_user_info failed: unknown result");
  }

  public function batch_get_user_info($uids, $columns, $cl)
  {
    $this->send_batch_get_user_info($uids, $columns, $cl);
    return $this->recv_batch_get_user_info();
  }

  public function send_batch_get_user_info($uids, $columns, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_user_info_args();
    $args->uids = $uids;
    $args->columns = $columns;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'batch_get_user_info', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('batch_get_user_info', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_batch_get_user_info()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_batch_get_user_info_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_user_info_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("batch_get_user_info failed: unknown result");
  }

  public function create_user_info($uid, $nick, $gender, $area)
  {
    $this->send_create_user_info($uid, $nick, $gender, $area);
    return $this->recv_create_user_info();
  }

  public function send_create_user_info($uid, $nick, $gender, $area)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_create_user_info_args();
    $args->uid = $uid;
    $args->nick = $nick;
    $args->gender = $gender;
    $args->area = $area;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'create_user_info', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('create_user_info', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_create_user_info()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_create_user_info_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_create_user_info_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("create_user_info failed: unknown result");
  }

  public function get_settle_guild_info($uid)
  {
    $this->send_get_settle_guild_info($uid);
    return $this->recv_get_settle_guild_info();
  }

  public function send_get_settle_guild_info($uid)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_settle_guild_info_args();
    $args->uid = $uid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_settle_guild_info', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_settle_guild_info', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_settle_guild_info()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_settle_guild_info_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_settle_guild_info_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("get_settle_guild_info failed: unknown result");
  }

  public function validate_session_owner($sid, $uid, $cl)
  {
    $this->send_validate_session_owner($sid, $uid, $cl);
    return $this->recv_validate_session_owner();
  }

  public function send_validate_session_owner($sid, $uid, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_validate_session_owner_args();
    $args->sid = $sid;
    $args->uid = $uid;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'validate_session_owner', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('validate_session_owner', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_validate_session_owner()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_validate_session_owner_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_validate_session_owner_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("validate_session_owner failed: unknown result");
  }

  public function get_session_info($sid, $columns, $cl)
  {
    $this->send_get_session_info($sid, $columns, $cl);
    return $this->recv_get_session_info();
  }

  public function send_get_session_info($sid, $columns, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_info_args();
    $args->sid = $sid;
    $args->columns = $columns;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_session_info', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_session_info', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_session_info()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_session_info_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_info_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_session_info failed: unknown result");
  }

  public function batch_get_session_info($sids, $columns, $cl)
  {
    $this->send_batch_get_session_info($sids, $columns, $cl);
    return $this->recv_batch_get_session_info();
  }

  public function send_batch_get_session_info($sids, $columns, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_session_info_args();
    $args->sids = $sids;
    $args->columns = $columns;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'batch_get_session_info', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('batch_get_session_info', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_batch_get_session_info()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_batch_get_session_info_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_session_info_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("batch_get_session_info failed: unknown result");
  }

  public function get_session_template($tid, $sid)
  {
    $this->send_get_session_template($tid, $sid);
    return $this->recv_get_session_template();
  }

  public function send_get_session_template($tid, $sid)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_template_args();
    $args->tid = $tid;
    $args->sid = $sid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_session_template', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_session_template', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_session_template()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_session_template_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_template_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_session_template failed: unknown result");
  }

  public function get_session_jiedai_description($tid)
  {
    $this->send_get_session_jiedai_description($tid);
    return $this->recv_get_session_jiedai_description();
  }

  public function send_get_session_jiedai_description($tid)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_jiedai_description_args();
    $args->tid = $tid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_session_jiedai_description', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_session_jiedai_description', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_session_jiedai_description()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_session_jiedai_description_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_jiedai_description_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_session_jiedai_description failed: unknown result");
  }

  public function get_session_introduce($tid)
  {
    $this->send_get_session_introduce($tid);
    return $this->recv_get_session_introduce();
  }

  public function send_get_session_introduce($tid)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_introduce_args();
    $args->tid = $tid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_session_introduce', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_session_introduce', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_session_introduce()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_session_introduce_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_introduce_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_session_introduce failed: unknown result");
  }

  public function set_session_introduce($tid, $introduce)
  {
    $this->send_set_session_introduce($tid, $introduce);
    return $this->recv_set_session_introduce();
  }

  public function send_set_session_introduce($tid, $introduce)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_set_session_introduce_args();
    $args->tid = $tid;
    $args->introduce = $introduce;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'set_session_introduce', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('set_session_introduce', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_set_session_introduce()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_set_session_introduce_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_set_session_introduce_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("set_session_introduce failed: unknown result");
  }

  public function get_session_score($sid, $cl)
  {
    $this->send_get_session_score($sid, $cl);
    return $this->recv_get_session_score();
  }

  public function send_get_session_score($sid, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_score_args();
    $args->sid = $sid;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_session_score', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_session_score', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_session_score()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_session_score_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_score_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_session_score failed: unknown result");
  }

  public function get_session_logo_url($sid, $cl)
  {
    $this->send_get_session_logo_url($sid, $cl);
    return $this->recv_get_session_logo_url();
  }

  public function send_get_session_logo_url($sid, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_logo_url_args();
    $args->sid = $sid;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_session_logo_url', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_session_logo_url', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_session_logo_url()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_session_logo_url_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_logo_url_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_session_logo_url failed: unknown result");
  }

  public function batch_get_session_logo_url($sids, $cl)
  {
    $this->send_batch_get_session_logo_url($sids, $cl);
    return $this->recv_batch_get_session_logo_url();
  }

  public function send_batch_get_session_logo_url($sids, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_session_logo_url_args();
    $args->sids = $sids;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'batch_get_session_logo_url', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('batch_get_session_logo_url', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_batch_get_session_logo_url()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_batch_get_session_logo_url_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_session_logo_url_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("batch_get_session_logo_url failed: unknown result");
  }

  public function get_session_asid($sid, $cl)
  {
    $this->send_get_session_asid($sid, $cl);
    return $this->recv_get_session_asid();
  }

  public function send_get_session_asid($sid, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_asid_args();
    $args->sid = $sid;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_session_asid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_session_asid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_session_asid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_session_asid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_asid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_session_asid failed: unknown result");
  }

  public function batch_get_session_asid($sids, $cl)
  {
    $this->send_batch_get_session_asid($sids, $cl);
    return $this->recv_batch_get_session_asid();
  }

  public function send_batch_get_session_asid($sids, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_session_asid_args();
    $args->sids = $sids;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'batch_get_session_asid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('batch_get_session_asid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_batch_get_session_asid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_batch_get_session_asid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_session_asid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("batch_get_session_asid failed: unknown result");
  }

  public function set_session_password($sid, $pwd, $new_pwd, $cl)
  {
    $this->send_set_session_password($sid, $pwd, $new_pwd, $cl);
    return $this->recv_set_session_password();
  }

  public function send_set_session_password($sid, $pwd, $new_pwd, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_set_session_password_args();
    $args->sid = $sid;
    $args->pwd = $pwd;
    $args->new_pwd = $new_pwd;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'set_session_password', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('set_session_password', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_set_session_password()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_set_session_password_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_set_session_password_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("set_session_password failed: unknown result");
  }

  public function erase_session_password($sid, $cl)
  {
    $this->send_erase_session_password($sid, $cl);
    return $this->recv_erase_session_password();
  }

  public function send_erase_session_password($sid, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_erase_session_password_args();
    $args->sid = $sid;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'erase_session_password', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('erase_session_password', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_erase_session_password()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_erase_session_password_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_erase_session_password_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("erase_session_password failed: unknown result");
  }

  public function get_sid_by_asid($asid, $cl)
  {
    $this->send_get_sid_by_asid($asid, $cl);
    return $this->recv_get_sid_by_asid();
  }

  public function send_get_sid_by_asid($asid, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_sid_by_asid_args();
    $args->asid = $asid;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_sid_by_asid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_sid_by_asid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_sid_by_asid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_sid_by_asid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_sid_by_asid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_sid_by_asid failed: unknown result");
  }

  public function batch_get_sub_sessions_info($tid, $pid, $columns, $full_recursive, $cl)
  {
    $this->send_batch_get_sub_sessions_info($tid, $pid, $columns, $full_recursive, $cl);
    return $this->recv_batch_get_sub_sessions_info();
  }

  public function send_batch_get_sub_sessions_info($tid, $pid, $columns, $full_recursive, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_sub_sessions_info_args();
    $args->tid = $tid;
    $args->pid = $pid;
    $args->columns = $columns;
    $args->full_recursive = $full_recursive;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'batch_get_sub_sessions_info', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('batch_get_sub_sessions_info', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_batch_get_sub_sessions_info()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_batch_get_sub_sessions_info_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_sub_sessions_info_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("batch_get_sub_sessions_info failed: unknown result");
  }

  public function get_sub_channel_list($sid, $cl)
  {
    $this->send_get_sub_channel_list($sid, $cl);
    return $this->recv_get_sub_channel_list();
  }

  public function send_get_sub_channel_list($sid, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_sub_channel_list_args();
    $args->sid = $sid;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_sub_channel_list', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_sub_channel_list', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_sub_channel_list()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_sub_channel_list_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_sub_channel_list_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_sub_channel_list failed: unknown result");
  }

  public function get_sub_sessions_count($tid, $pid, $cl)
  {
    $this->send_get_sub_sessions_count($tid, $pid, $cl);
    return $this->recv_get_sub_sessions_count();
  }

  public function send_get_sub_sessions_count($tid, $pid, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_sub_sessions_count_args();
    $args->tid = $tid;
    $args->pid = $pid;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_sub_sessions_count', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_sub_sessions_count', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_sub_sessions_count()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_sub_sessions_count_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_sub_sessions_count_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_sub_sessions_count failed: unknown result");
  }

  public function validate_sub_session($tid, $pid, $sid)
  {
    $this->send_validate_sub_session($tid, $pid, $sid);
    return $this->recv_validate_sub_session();
  }

  public function send_validate_sub_session($tid, $pid, $sid)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_validate_sub_session_args();
    $args->tid = $tid;
    $args->pid = $pid;
    $args->sid = $sid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'validate_sub_session', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('validate_sub_session', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_validate_sub_session()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_validate_sub_session_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_validate_sub_session_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("validate_sub_session failed: unknown result");
  }

  public function validate_sub_session_manager($tid, $sid, $uid)
  {
    $this->send_validate_sub_session_manager($tid, $sid, $uid);
    return $this->recv_validate_sub_session_manager();
  }

  public function send_validate_sub_session_manager($tid, $sid, $uid)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_validate_sub_session_manager_args();
    $args->tid = $tid;
    $args->sid = $sid;
    $args->uid = $uid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'validate_sub_session_manager', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('validate_sub_session_manager', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_validate_sub_session_manager()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_validate_sub_session_manager_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_validate_sub_session_manager_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("validate_sub_session_manager failed: unknown result");
  }

  public function set_sub_sessions_order($tid, $sub_sessions_sort, $cl)
  {
    $this->send_set_sub_sessions_order($tid, $sub_sessions_sort, $cl);
    return $this->recv_set_sub_sessions_order();
  }

  public function send_set_sub_sessions_order($tid, $sub_sessions_sort, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_set_sub_sessions_order_args();
    $args->tid = $tid;
    $args->sub_sessions_sort = $sub_sessions_sort;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'set_sub_sessions_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('set_sub_sessions_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_set_sub_sessions_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_set_sub_sessions_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_set_sub_sessions_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("set_sub_sessions_order failed: unknown result");
  }

  public function get_favorite_session_list($uid, $cl)
  {
    $this->send_get_favorite_session_list($uid, $cl);
    return $this->recv_get_favorite_session_list();
  }

  public function send_get_favorite_session_list($uid, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_favorite_session_list_args();
    $args->uid = $uid;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_favorite_session_list', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_favorite_session_list', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_favorite_session_list()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_favorite_session_list_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_favorite_session_list_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_favorite_session_list failed: unknown result");
  }

  public function get_session_count_by_owner($uid, $cl)
  {
    $this->send_get_session_count_by_owner($uid, $cl);
    return $this->recv_get_session_count_by_owner();
  }

  public function send_get_session_count_by_owner($uid, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_count_by_owner_args();
    $args->uid = $uid;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_session_count_by_owner', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_session_count_by_owner', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_session_count_by_owner()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_session_count_by_owner_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_count_by_owner_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_session_count_by_owner failed: unknown result");
  }

  public function get_session_list_by_ownerid($ownerid, $cl)
  {
    $this->send_get_session_list_by_ownerid($ownerid, $cl);
    return $this->recv_get_session_list_by_ownerid();
  }

  public function send_get_session_list_by_ownerid($ownerid, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_list_by_ownerid_args();
    $args->ownerid = $ownerid;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_session_list_by_ownerid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_session_list_by_ownerid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_session_list_by_ownerid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_session_list_by_ownerid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_list_by_ownerid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_session_list_by_ownerid failed: unknown result");
  }

  public function get_sessions_by_owner($ownerid, $cl)
  {
    $this->send_get_sessions_by_owner($ownerid, $cl);
    return $this->recv_get_sessions_by_owner();
  }

  public function send_get_sessions_by_owner($ownerid, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_sessions_by_owner_args();
    $args->ownerid = $ownerid;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_sessions_by_owner', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_sessions_by_owner', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_sessions_by_owner()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_sessions_by_owner_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_sessions_by_owner_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_sessions_by_owner failed: unknown result");
  }

  public function get_session_member_info($sid, $uid, $columns, $cl)
  {
    $this->send_get_session_member_info($sid, $uid, $columns, $cl);
    return $this->recv_get_session_member_info();
  }

  public function send_get_session_member_info($sid, $uid, $columns, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_member_info_args();
    $args->sid = $sid;
    $args->uid = $uid;
    $args->columns = $columns;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_session_member_info', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_session_member_info', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_session_member_info()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_session_member_info_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_member_info_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_session_member_info failed: unknown result");
  }

  public function batch_get_member_info_by_session($uid, $sids, $columns, $cl)
  {
    $this->send_batch_get_member_info_by_session($uid, $sids, $columns, $cl);
    return $this->recv_batch_get_member_info_by_session();
  }

  public function send_batch_get_member_info_by_session($uid, $sids, $columns, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_member_info_by_session_args();
    $args->uid = $uid;
    $args->sids = $sids;
    $args->columns = $columns;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'batch_get_member_info_by_session', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('batch_get_member_info_by_session', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_batch_get_member_info_by_session()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_batch_get_member_info_by_session_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_member_info_by_session_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("batch_get_member_info_by_session failed: unknown result");
  }

  public function batch_get_member_info_by_user($sid, $uids, $columns, $cl)
  {
    $this->send_batch_get_member_info_by_user($sid, $uids, $columns, $cl);
    return $this->recv_batch_get_member_info_by_user();
  }

  public function send_batch_get_member_info_by_user($sid, $uids, $columns, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_member_info_by_user_args();
    $args->sid = $sid;
    $args->uids = $uids;
    $args->columns = $columns;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'batch_get_member_info_by_user', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('batch_get_member_info_by_user', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_batch_get_member_info_by_user()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_batch_get_member_info_by_user_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_member_info_by_user_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("batch_get_member_info_by_user failed: unknown result");
  }

  public function batch_get_role_by_memberid($sid, $uids, $cl)
  {
    $this->send_batch_get_role_by_memberid($sid, $uids, $cl);
    return $this->recv_batch_get_role_by_memberid();
  }

  public function send_batch_get_role_by_memberid($sid, $uids, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_role_by_memberid_args();
    $args->sid = $sid;
    $args->uids = $uids;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'batch_get_role_by_memberid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('batch_get_role_by_memberid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_batch_get_role_by_memberid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_batch_get_role_by_memberid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_role_by_memberid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("batch_get_role_by_memberid failed: unknown result");
  }

  public function get_session_member_count_by_role($sid, $roles, $cl)
  {
    $this->send_get_session_member_count_by_role($sid, $roles, $cl);
    return $this->recv_get_session_member_count_by_role();
  }

  public function send_get_session_member_count_by_role($sid, $roles, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_member_count_by_role_args();
    $args->sid = $sid;
    $args->roles = $roles;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_session_member_count_by_role', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_session_member_count_by_role', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_session_member_count_by_role()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_session_member_count_by_role_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_member_count_by_role_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_session_member_count_by_role failed: unknown result");
  }

  public function get_session_regular_member_count($sid, $cl)
  {
    $this->send_get_session_regular_member_count($sid, $cl);
    return $this->recv_get_session_regular_member_count();
  }

  public function send_get_session_regular_member_count($sid, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_regular_member_count_args();
    $args->sid = $sid;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_session_regular_member_count', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_session_regular_member_count', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_session_regular_member_count()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_session_regular_member_count_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_regular_member_count_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_session_regular_member_count failed: unknown result");
  }

  public function batch_set_session_member_role($sid, $uids, $role, $cl)
  {
    $this->send_batch_set_session_member_role($sid, $uids, $role, $cl);
    return $this->recv_batch_set_session_member_role();
  }

  public function send_batch_set_session_member_role($sid, $uids, $role, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_batch_set_session_member_role_args();
    $args->sid = $sid;
    $args->uids = $uids;
    $args->role = $role;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'batch_set_session_member_role', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('batch_set_session_member_role', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_batch_set_session_member_role()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_batch_set_session_member_role_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_batch_set_session_member_role_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("batch_set_session_member_role failed: unknown result");
  }

  public function batch_erase_subsession_manager($sid, $uids, $cl)
  {
    $this->send_batch_erase_subsession_manager($sid, $uids, $cl);
    return $this->recv_batch_erase_subsession_manager();
  }

  public function send_batch_erase_subsession_manager($sid, $uids, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_batch_erase_subsession_manager_args();
    $args->sid = $sid;
    $args->uids = $uids;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'batch_erase_subsession_manager', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('batch_erase_subsession_manager', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_batch_erase_subsession_manager()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_batch_erase_subsession_manager_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_batch_erase_subsession_manager_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("batch_erase_subsession_manager failed: unknown result");
  }

  public function batch_erase_session_member($sid, $uids, $admin_uid, $admin_nick, $cl)
  {
    $this->send_batch_erase_session_member($sid, $uids, $admin_uid, $admin_nick, $cl);
    return $this->recv_batch_erase_session_member();
  }

  public function send_batch_erase_session_member($sid, $uids, $admin_uid, $admin_nick, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_batch_erase_session_member_args();
    $args->sid = $sid;
    $args->uids = $uids;
    $args->admin_uid = $admin_uid;
    $args->admin_nick = $admin_nick;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'batch_erase_session_member', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('batch_erase_session_member', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_batch_erase_session_member()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_batch_erase_session_member_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_batch_erase_session_member_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("batch_erase_session_member failed: unknown result");
  }

  public function get_session_list_count_by_role($uid, $role, $cl)
  {
    $this->send_get_session_list_count_by_role($uid, $role, $cl);
    return $this->recv_get_session_list_count_by_role();
  }

  public function send_get_session_list_count_by_role($uid, $role, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_list_count_by_role_args();
    $args->uid = $uid;
    $args->role = $role;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_session_list_count_by_role', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_session_list_count_by_role', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_session_list_count_by_role()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_session_list_count_by_role_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_list_count_by_role_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_session_list_count_by_role failed: unknown result");
  }

  public function get_session_list_by_role($uid, $role, $page, $per_page, $order_by, $descending, $cl)
  {
    $this->send_get_session_list_by_role($uid, $role, $page, $per_page, $order_by, $descending, $cl);
    return $this->recv_get_session_list_by_role();
  }

  public function send_get_session_list_by_role($uid, $role, $page, $per_page, $order_by, $descending, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_list_by_role_args();
    $args->uid = $uid;
    $args->role = $role;
    $args->page = $page;
    $args->per_page = $per_page;
    $args->order_by = $order_by;
    $args->descending = $descending;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_session_list_by_role', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_session_list_by_role', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_session_list_by_role()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_session_list_by_role_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_list_by_role_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_session_list_by_role failed: unknown result");
  }

  public function batch_get_session_list_by_role($uid, $roles, $order_by, $descending, $cl)
  {
    $this->send_batch_get_session_list_by_role($uid, $roles, $order_by, $descending, $cl);
    return $this->recv_batch_get_session_list_by_role();
  }

  public function send_batch_get_session_list_by_role($uid, $roles, $order_by, $descending, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_session_list_by_role_args();
    $args->uid = $uid;
    $args->roles = $roles;
    $args->order_by = $order_by;
    $args->descending = $descending;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'batch_get_session_list_by_role', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('batch_get_session_list_by_role', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_batch_get_session_list_by_role()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_batch_get_session_list_by_role_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_session_list_by_role_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("batch_get_session_list_by_role failed: unknown result");
  }

  public function get_session_members_by_role($sid, $columns, $role, $page, $per_page, $order_by, $descending, $cl)
  {
    $this->send_get_session_members_by_role($sid, $columns, $role, $page, $per_page, $order_by, $descending, $cl);
    return $this->recv_get_session_members_by_role();
  }

  public function send_get_session_members_by_role($sid, $columns, $role, $page, $per_page, $order_by, $descending, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_members_by_role_args();
    $args->sid = $sid;
    $args->columns = $columns;
    $args->role = $role;
    $args->page = $page;
    $args->per_page = $per_page;
    $args->order_by = $order_by;
    $args->descending = $descending;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_session_members_by_role', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_session_members_by_role', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_session_members_by_role()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_session_members_by_role_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_members_by_role_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_session_members_by_role failed: unknown result");
  }

  public function get_session_sub_managers($tid, $columns)
  {
    $this->send_get_session_sub_managers($tid, $columns);
    return $this->recv_get_session_sub_managers();
  }

  public function send_get_session_sub_managers($tid, $columns)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_sub_managers_args();
    $args->tid = $tid;
    $args->columns = $columns;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_session_sub_managers', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_session_sub_managers', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_session_sub_managers()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_session_sub_managers_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_sub_managers_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_session_sub_managers failed: unknown result");
  }

  public function get_yy_admin_type($uid, $cl)
  {
    $this->send_get_yy_admin_type($uid, $cl);
    return $this->recv_get_yy_admin_type();
  }

  public function send_get_yy_admin_type($uid, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_yy_admin_type_args();
    $args->uid = $uid;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_yy_admin_type', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_yy_admin_type', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_yy_admin_type()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_yy_admin_type_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_yy_admin_type_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_yy_admin_type failed: unknown result");
  }

  public function get_session_ip_blacklist_count($sid, $date_from, $date_to, $reason, $uid, $cl)
  {
    $this->send_get_session_ip_blacklist_count($sid, $date_from, $date_to, $reason, $uid, $cl);
    return $this->recv_get_session_ip_blacklist_count();
  }

  public function send_get_session_ip_blacklist_count($sid, $date_from, $date_to, $reason, $uid, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_ip_blacklist_count_args();
    $args->sid = $sid;
    $args->date_from = $date_from;
    $args->date_to = $date_to;
    $args->reason = $reason;
    $args->uid = $uid;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_session_ip_blacklist_count', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_session_ip_blacklist_count', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_session_ip_blacklist_count()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_session_ip_blacklist_count_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_ip_blacklist_count_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_session_ip_blacklist_count failed: unknown result");
  }

  public function get_session_ip_blacklist($sid, $date_from, $date_to, $reason, $uid, $columns, $page, $per_page, $order_by, $descending, $cl)
  {
    $this->send_get_session_ip_blacklist($sid, $date_from, $date_to, $reason, $uid, $columns, $page, $per_page, $order_by, $descending, $cl);
    return $this->recv_get_session_ip_blacklist();
  }

  public function send_get_session_ip_blacklist($sid, $date_from, $date_to, $reason, $uid, $columns, $page, $per_page, $order_by, $descending, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_ip_blacklist_args();
    $args->sid = $sid;
    $args->date_from = $date_from;
    $args->date_to = $date_to;
    $args->reason = $reason;
    $args->uid = $uid;
    $args->columns = $columns;
    $args->page = $page;
    $args->per_page = $per_page;
    $args->order_by = $order_by;
    $args->descending = $descending;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_session_ip_blacklist', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_session_ip_blacklist', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_session_ip_blacklist()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_session_ip_blacklist_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_ip_blacklist_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_session_ip_blacklist failed: unknown result");
  }

  public function get_session_id_blacklist_count($sid, $date_from, $date_to, $reason, $uid, $cl)
  {
    $this->send_get_session_id_blacklist_count($sid, $date_from, $date_to, $reason, $uid, $cl);
    return $this->recv_get_session_id_blacklist_count();
  }

  public function send_get_session_id_blacklist_count($sid, $date_from, $date_to, $reason, $uid, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_id_blacklist_count_args();
    $args->sid = $sid;
    $args->date_from = $date_from;
    $args->date_to = $date_to;
    $args->reason = $reason;
    $args->uid = $uid;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_session_id_blacklist_count', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_session_id_blacklist_count', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_session_id_blacklist_count()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_session_id_blacklist_count_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_id_blacklist_count_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_session_id_blacklist_count failed: unknown result");
  }

  public function get_session_id_blacklist($sid, $date_from, $date_to, $reason, $uid, $columns, $page, $per_page, $order_by, $descending, $cl)
  {
    $this->send_get_session_id_blacklist($sid, $date_from, $date_to, $reason, $uid, $columns, $page, $per_page, $order_by, $descending, $cl);
    return $this->recv_get_session_id_blacklist();
  }

  public function send_get_session_id_blacklist($sid, $date_from, $date_to, $reason, $uid, $columns, $page, $per_page, $order_by, $descending, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_id_blacklist_args();
    $args->sid = $sid;
    $args->date_from = $date_from;
    $args->date_to = $date_to;
    $args->reason = $reason;
    $args->uid = $uid;
    $args->columns = $columns;
    $args->page = $page;
    $args->per_page = $per_page;
    $args->order_by = $order_by;
    $args->descending = $descending;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_session_id_blacklist', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_session_id_blacklist', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_session_id_blacklist()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_session_id_blacklist_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_id_blacklist_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_session_id_blacklist failed: unknown result");
  }

  public function erase_session_blacklist($sid, $ban_type, $cl)
  {
    $this->send_erase_session_blacklist($sid, $ban_type, $cl);
    return $this->recv_erase_session_blacklist();
  }

  public function send_erase_session_blacklist($sid, $ban_type, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_erase_session_blacklist_args();
    $args->sid = $sid;
    $args->ban_type = $ban_type;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'erase_session_blacklist', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('erase_session_blacklist', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_erase_session_blacklist()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_erase_session_blacklist_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_erase_session_blacklist_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("erase_session_blacklist failed: unknown result");
  }

  public function batch_erase_session_blacklist_element($sid, $ban_types, $uids_ips, $cl)
  {
    $this->send_batch_erase_session_blacklist_element($sid, $ban_types, $uids_ips, $cl);
    return $this->recv_batch_erase_session_blacklist_element();
  }

  public function send_batch_erase_session_blacklist_element($sid, $ban_types, $uids_ips, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_batch_erase_session_blacklist_element_args();
    $args->sid = $sid;
    $args->ban_types = $ban_types;
    $args->uids_ips = $uids_ips;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'batch_erase_session_blacklist_element', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('batch_erase_session_blacklist_element', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_batch_erase_session_blacklist_element()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_batch_erase_session_blacklist_element_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_batch_erase_session_blacklist_element_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("batch_erase_session_blacklist_element failed: unknown result");
  }

  public function set_autio_high_quality($sid, $flag, $cl)
  {
    $this->send_set_autio_high_quality($sid, $flag, $cl);
    return $this->recv_set_autio_high_quality();
  }

  public function send_set_autio_high_quality($sid, $flag, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_set_autio_high_quality_args();
    $args->sid = $sid;
    $args->flag = $flag;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'set_autio_high_quality', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('set_autio_high_quality', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_set_autio_high_quality()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_set_autio_high_quality_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_set_autio_high_quality_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("set_autio_high_quality failed: unknown result");
  }

  public function disable_audio_high_quality($sid, $cl)
  {
    $this->send_disable_audio_high_quality($sid, $cl);
    return $this->recv_disable_audio_high_quality();
  }

  public function send_disable_audio_high_quality($sid, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_disable_audio_high_quality_args();
    $args->sid = $sid;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'disable_audio_high_quality', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('disable_audio_high_quality', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_disable_audio_high_quality()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_disable_audio_high_quality_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_disable_audio_high_quality_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("disable_audio_high_quality failed: unknown result");
  }

  public function get_session_gyz($sid, $cl)
  {
    $this->send_get_session_gyz($sid, $cl);
    return $this->recv_get_session_gyz();
  }

  public function send_get_session_gyz($sid, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_gyz_args();
    $args->sid = $sid;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_session_gyz', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_session_gyz', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_session_gyz()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_session_gyz_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_gyz_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_session_gyz failed: unknown result");
  }

  public function set_application_rule($sid, $request_jifen, $app_instru, $cl)
  {
    $this->send_set_application_rule($sid, $request_jifen, $app_instru, $cl);
    return $this->recv_set_application_rule();
  }

  public function send_set_application_rule($sid, $request_jifen, $app_instru, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_set_application_rule_args();
    $args->sid = $sid;
    $args->request_jifen = $request_jifen;
    $args->app_instru = $app_instru;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'set_application_rule', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('set_application_rule', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_set_application_rule()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_set_application_rule_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_set_application_rule_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("set_application_rule failed: unknown result");
  }

  public function get_guild_applications_count($tid, $cl)
  {
    $this->send_get_guild_applications_count($tid, $cl);
    return $this->recv_get_guild_applications_count();
  }

  public function send_get_guild_applications_count($tid, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_guild_applications_count_args();
    $args->tid = $tid;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_guild_applications_count', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_guild_applications_count', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_guild_applications_count()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_guild_applications_count_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_guild_applications_count_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_guild_applications_count failed: unknown result");
  }

  public function get_guild_applications_per_page($tid, $columns, $page, $per_page, $order_by, $descending, $cl)
  {
    $this->send_get_guild_applications_per_page($tid, $columns, $page, $per_page, $order_by, $descending, $cl);
    return $this->recv_get_guild_applications_per_page();
  }

  public function send_get_guild_applications_per_page($tid, $columns, $page, $per_page, $order_by, $descending, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_guild_applications_per_page_args();
    $args->tid = $tid;
    $args->columns = $columns;
    $args->page = $page;
    $args->per_page = $per_page;
    $args->order_by = $order_by;
    $args->descending = $descending;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_guild_applications_per_page', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_guild_applications_per_page', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_guild_applications_per_page()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_guild_applications_per_page_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_guild_applications_per_page_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_guild_applications_per_page failed: unknown result");
  }

  public function get_guild_applications_by_uids($tid, $uids, $columns, $cl)
  {
    $this->send_get_guild_applications_by_uids($tid, $uids, $columns, $cl);
    return $this->recv_get_guild_applications_by_uids();
  }

  public function send_get_guild_applications_by_uids($tid, $uids, $columns, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_guild_applications_by_uids_args();
    $args->tid = $tid;
    $args->uids = $uids;
    $args->columns = $columns;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_guild_applications_by_uids', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_guild_applications_by_uids', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_guild_applications_by_uids()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_guild_applications_by_uids_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_guild_applications_by_uids_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_guild_applications_by_uids failed: unknown result");
  }

  public function handle_applications($tid, $uids, $new_role, $admin_uid, $admin_nick, $cl)
  {
    $this->send_handle_applications($tid, $uids, $new_role, $admin_uid, $admin_nick, $cl);
    return $this->recv_handle_applications();
  }

  public function send_handle_applications($tid, $uids, $new_role, $admin_uid, $admin_nick, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_handle_applications_args();
    $args->tid = $tid;
    $args->uids = $uids;
    $args->new_role = $new_role;
    $args->admin_uid = $admin_uid;
    $args->admin_nick = $admin_nick;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'handle_applications', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('handle_applications', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_handle_applications()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_handle_applications_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_handle_applications_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("handle_applications failed: unknown result");
  }

  public function get_guild_exited_members_count($tid, $cl)
  {
    $this->send_get_guild_exited_members_count($tid, $cl);
    return $this->recv_get_guild_exited_members_count();
  }

  public function send_get_guild_exited_members_count($tid, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_guild_exited_members_count_args();
    $args->tid = $tid;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_guild_exited_members_count', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_guild_exited_members_count', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_guild_exited_members_count()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_guild_exited_members_count_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_guild_exited_members_count_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_guild_exited_members_count failed: unknown result");
  }

  public function get_guild_exited_members_per_page($tid, $columns, $page, $per_page, $order_by, $descending, $cl)
  {
    $this->send_get_guild_exited_members_per_page($tid, $columns, $page, $per_page, $order_by, $descending, $cl);
    return $this->recv_get_guild_exited_members_per_page();
  }

  public function send_get_guild_exited_members_per_page($tid, $columns, $page, $per_page, $order_by, $descending, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_guild_exited_members_per_page_args();
    $args->tid = $tid;
    $args->columns = $columns;
    $args->page = $page;
    $args->per_page = $per_page;
    $args->order_by = $order_by;
    $args->descending = $descending;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_guild_exited_members_per_page', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_guild_exited_members_per_page', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_guild_exited_members_per_page()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_guild_exited_members_per_page_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_guild_exited_members_per_page_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_guild_exited_members_per_page failed: unknown result");
  }

  public function get_guild_exited_members_by_uids($tid, $uids, $columns, $cl)
  {
    $this->send_get_guild_exited_members_by_uids($tid, $uids, $columns, $cl);
    return $this->recv_get_guild_exited_members_by_uids();
  }

  public function send_get_guild_exited_members_by_uids($tid, $uids, $columns, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_guild_exited_members_by_uids_args();
    $args->tid = $tid;
    $args->uids = $uids;
    $args->columns = $columns;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_guild_exited_members_by_uids', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_guild_exited_members_by_uids', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_guild_exited_members_by_uids()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_guild_exited_members_by_uids_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_guild_exited_members_by_uids_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_guild_exited_members_by_uids failed: unknown result");
  }

  public function set_apply_guild_notify($tid, $isNotify, $cl)
  {
    $this->send_set_apply_guild_notify($tid, $isNotify, $cl);
    return $this->recv_set_apply_guild_notify();
  }

  public function send_set_apply_guild_notify($tid, $isNotify, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_set_apply_guild_notify_args();
    $args->tid = $tid;
    $args->isNotify = $isNotify;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'set_apply_guild_notify', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('set_apply_guild_notify', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_set_apply_guild_notify()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_set_apply_guild_notify_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_set_apply_guild_notify_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("set_apply_guild_notify failed: unknown result");
  }

  public function get_apply_guild_notify($tid, $cl)
  {
    $this->send_get_apply_guild_notify($tid, $cl);
    return $this->recv_get_apply_guild_notify();
  }

  public function send_get_apply_guild_notify($tid, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_apply_guild_notify_args();
    $args->tid = $tid;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_apply_guild_notify', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_apply_guild_notify', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_apply_guild_notify()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_apply_guild_notify_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_apply_guild_notify_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_apply_guild_notify failed: unknown result");
  }

  public function create_session($sid, $name, $isp, $blimit, $bpub, $typestr, $type, $uid, $ip, $cl)
  {
    $this->send_create_session($sid, $name, $isp, $blimit, $bpub, $typestr, $type, $uid, $ip, $cl);
    return $this->recv_create_session();
  }

  public function send_create_session($sid, $name, $isp, $blimit, $bpub, $typestr, $type, $uid, $ip, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_create_session_args();
    $args->sid = $sid;
    $args->name = $name;
    $args->isp = $isp;
    $args->blimit = $blimit;
    $args->bpub = $bpub;
    $args->typestr = $typestr;
    $args->type = $type;
    $args->uid = $uid;
    $args->ip = $ip;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'create_session', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('create_session', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_create_session()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_create_session_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_create_session_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("create_session failed: unknown result");
  }

  public function create_session2($sid, $name, $isp, $blimit, $bpub, $typestr, $type, $uid, $ip, $area, $language)
  {
    $this->send_create_session2($sid, $name, $isp, $blimit, $bpub, $typestr, $type, $uid, $ip, $area, $language);
    return $this->recv_create_session2();
  }

  public function send_create_session2($sid, $name, $isp, $blimit, $bpub, $typestr, $type, $uid, $ip, $area, $language)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_create_session2_args();
    $args->sid = $sid;
    $args->name = $name;
    $args->isp = $isp;
    $args->blimit = $blimit;
    $args->bpub = $bpub;
    $args->typestr = $typestr;
    $args->type = $type;
    $args->uid = $uid;
    $args->ip = $ip;
    $args->area = $area;
    $args->language = $language;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'create_session2', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('create_session2', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_create_session2()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_create_session2_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_create_session2_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("create_session2 failed: unknown result");
  }

  public function get_session_list($uid, $cl)
  {
    $this->send_get_session_list($uid, $cl);
    return $this->recv_get_session_list();
  }

  public function send_get_session_list($uid, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_list_args();
    $args->uid = $uid;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_session_list', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_session_list', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_session_list()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_session_list_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_list_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_session_list failed: unknown result");
  }

  public function active_uid($passport, $sha1Passwd, $ip, $nick, $cl)
  {
    $this->send_active_uid($passport, $sha1Passwd, $ip, $nick, $cl);
    return $this->recv_active_uid();
  }

  public function send_active_uid($passport, $sha1Passwd, $ip, $nick, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_active_uid_args();
    $args->passport = $passport;
    $args->sha1Passwd = $sha1Passwd;
    $args->ip = $ip;
    $args->nick = $nick;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'active_uid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('active_uid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_active_uid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_active_uid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_active_uid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("active_uid failed: unknown result");
  }

  public function active_uid_and_imid($passport, $sha1Passwd, $ip, $cl)
  {
    $this->send_active_uid_and_imid($passport, $sha1Passwd, $ip, $cl);
    return $this->recv_active_uid_and_imid();
  }

  public function send_active_uid_and_imid($passport, $sha1Passwd, $ip, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_active_uid_and_imid_args();
    $args->passport = $passport;
    $args->sha1Passwd = $sha1Passwd;
    $args->ip = $ip;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'active_uid_and_imid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('active_uid_and_imid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_active_uid_and_imid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_active_uid_and_imid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_active_uid_and_imid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("active_uid_and_imid failed: unknown result");
  }

  public function check_global_ban($uid, $cl)
  {
    $this->send_check_global_ban($uid, $cl);
    return $this->recv_check_global_ban();
  }

  public function send_check_global_ban($uid, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_check_global_ban_args();
    $args->uid = $uid;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'check_global_ban', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('check_global_ban', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_check_global_ban()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_check_global_ban_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_check_global_ban_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("check_global_ban failed: unknown result");
  }

  public function check_cookie($cookie, $uid, $expirtime, $cl)
  {
    $this->send_check_cookie($cookie, $uid, $expirtime, $cl);
    return $this->recv_check_cookie();
  }

  public function send_check_cookie($cookie, $uid, $expirtime, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_check_cookie_args();
    $args->cookie = $cookie;
    $args->uid = $uid;
    $args->expirtime = $expirtime;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'check_cookie', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('check_cookie', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_check_cookie()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_check_cookie_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_check_cookie_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("check_cookie failed: unknown result");
  }

  public function enable_autio_high_quality($sid, $cl)
  {
    $this->send_enable_autio_high_quality($sid, $cl);
    return $this->recv_enable_autio_high_quality();
  }

  public function send_enable_autio_high_quality($sid, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_enable_autio_high_quality_args();
    $args->sid = $sid;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'enable_autio_high_quality', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('enable_autio_high_quality', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_enable_autio_high_quality()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_enable_autio_high_quality_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_enable_autio_high_quality_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("enable_autio_high_quality failed: unknown result");
  }

  public function erase_subsession_admin($sid, $uids, $cl)
  {
    $this->send_erase_subsession_admin($sid, $uids, $cl);
    return $this->recv_erase_subsession_admin();
  }

  public function send_erase_subsession_admin($sid, $uids, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_erase_subsession_admin_args();
    $args->sid = $sid;
    $args->uids = $uids;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'erase_subsession_admin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('erase_subsession_admin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_erase_subsession_admin()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_erase_subsession_admin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_erase_subsession_admin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("erase_subsession_admin failed: unknown result");
  }

  public function set_subsession_order($pid, $sids, $orders, $cl)
  {
    $this->send_set_subsession_order($pid, $sids, $orders, $cl);
    return $this->recv_set_subsession_order();
  }

  public function send_set_subsession_order($pid, $sids, $orders, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_set_subsession_order_args();
    $args->pid = $pid;
    $args->sids = $sids;
    $args->orders = $orders;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'set_subsession_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('set_subsession_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_set_subsession_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_set_subsession_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_set_subsession_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("set_subsession_order failed: unknown result");
  }

  public function get_user_psw($uid, $cl)
  {
    $this->send_get_user_psw($uid, $cl);
    return $this->recv_get_user_psw();
  }

  public function send_get_user_psw($uid, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_user_psw_args();
    $args->uid = $uid;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_user_psw', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_user_psw', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_user_psw()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_get_user_psw_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_user_psw_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("get_user_psw failed: unknown result");
  }

  public function reset_account_by_passport($account, $passport, $cl)
  {
    $this->send_reset_account_by_passport($account, $passport, $cl);
    return $this->recv_reset_account_by_passport();
  }

  public function send_reset_account_by_passport($account, $passport, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_reset_account_by_passport_args();
    $args->account = $account;
    $args->passport = $passport;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'reset_account_by_passport', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('reset_account_by_passport', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_reset_account_by_passport()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_reset_account_by_passport_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_reset_account_by_passport_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("reset_account_by_passport failed: unknown result");
  }

  public function reset_passwd_by_passport($passwd, $passport, $cl)
  {
    $this->send_reset_passwd_by_passport($passwd, $passport, $cl);
    return $this->recv_reset_passwd_by_passport();
  }

  public function send_reset_passwd_by_passport($passwd, $passport, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_reset_passwd_by_passport_args();
    $args->passwd = $passwd;
    $args->passport = $passport;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'reset_passwd_by_passport', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('reset_passwd_by_passport', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_reset_passwd_by_passport()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_reset_passwd_by_passport_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_reset_passwd_by_passport_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("reset_passwd_by_passport failed: unknown result");
  }

  public function reset_passwd_by_passport_ip($passwd, $passport, $ip, $cl)
  {
    $this->send_reset_passwd_by_passport_ip($passwd, $passport, $ip, $cl);
    return $this->recv_reset_passwd_by_passport_ip();
  }

  public function send_reset_passwd_by_passport_ip($passwd, $passport, $ip, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_reset_passwd_by_passport_ip_args();
    $args->passwd = $passwd;
    $args->passport = $passport;
    $args->ip = $ip;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'reset_passwd_by_passport_ip', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('reset_passwd_by_passport_ip', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_reset_passwd_by_passport_ip()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_reset_passwd_by_passport_ip_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_reset_passwd_by_passport_ip_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("reset_passwd_by_passport_ip failed: unknown result");
  }

  public function resume_members($tid, $uids, $cl)
  {
    $this->send_resume_members($tid, $uids, $cl);
    return $this->recv_resume_members();
  }

  public function send_resume_members($tid, $uids, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_resume_members_args();
    $args->tid = $tid;
    $args->uids = $uids;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'resume_members', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('resume_members', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_resume_members()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_resume_members_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_resume_members_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("resume_members failed: unknown result");
  }

  public function validate_user_pwd($passport, $shapasswd, $yzm_auth, $ip, $app_type, $cl)
  {
    $this->send_validate_user_pwd($passport, $shapasswd, $yzm_auth, $ip, $app_type, $cl);
    return $this->recv_validate_user_pwd();
  }

  public function send_validate_user_pwd($passport, $shapasswd, $yzm_auth, $ip, $app_type, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_validate_user_pwd_args();
    $args->passport = $passport;
    $args->shapasswd = $shapasswd;
    $args->yzm_auth = $yzm_auth;
    $args->ip = $ip;
    $args->app_type = $app_type;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'validate_user_pwd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('validate_user_pwd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_validate_user_pwd()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_validate_user_pwd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_validate_user_pwd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("validate_user_pwd failed: unknown result");
  }

  public function validate_user_pwd_by_uid($uid, $shapasswd, $time, $ip, $app_type, $cl)
  {
    $this->send_validate_user_pwd_by_uid($uid, $shapasswd, $time, $ip, $app_type, $cl);
    return $this->recv_validate_user_pwd_by_uid();
  }

  public function send_validate_user_pwd_by_uid($uid, $shapasswd, $time, $ip, $app_type, $cl)
  {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_validate_user_pwd_by_uid_args();
    $args->uid = $uid;
    $args->shapasswd = $shapasswd;
    $args->time = $time;
    $args->ip = $ip;
    $args->app_type = $app_type;
    $args->cl = $cl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'validate_user_pwd_by_uid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('validate_user_pwd_by_uid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_validate_user_pwd_by_uid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Services\webdb_gateway_service\webdb_gateway_service_validate_user_pwd_by_uid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Services\webdb_gateway_service\webdb_gateway_service_validate_user_pwd_by_uid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("validate_user_pwd_by_uid failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class webdb_gateway_service_get_custom_logo_args {
  static $_TSPEC;

  public $uid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_custom_logo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_custom_logo_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
      $xfer += $output->writeI64($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_custom_logo_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_custom_logo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_custom_logo_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_uid_args {
  static $_TSPEC;

  public $passport = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'passport',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['passport'])) {
        $this->passport = $vals['passport'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_uid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->passport);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_uid_args');
    if ($this->passport !== null) {
      $xfer += $output->writeFieldBegin('passport', TType::STRING, 1);
      $xfer += $output->writeString($this->passport);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 2);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_uid_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_uid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_uid_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_uid_by_passport_args {
  static $_TSPEC;

  public $passport = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'passport',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['passport'])) {
        $this->passport = $vals['passport'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_uid_by_passport_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->passport);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_uid_by_passport_args');
    if ($this->passport !== null) {
      $xfer += $output->writeFieldBegin('passport', TType::STRING, 1);
      $xfer += $output->writeString($this->passport);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 2);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_uid_by_passport_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_uid_by_passport_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_uid_by_passport_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_uid_by_account_args {
  static $_TSPEC;

  public $account = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'account',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['account'])) {
        $this->account = $vals['account'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_uid_by_account_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->account);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_uid_by_account_args');
    if ($this->account !== null) {
      $xfer += $output->writeFieldBegin('account', TType::STRING, 1);
      $xfer += $output->writeString($this->account);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 2);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_uid_by_account_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_uid_by_account_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_uid_by_account_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_user_info_args {
  static $_TSPEC;

  public $uid = null;
  public $columns = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['columns'])) {
        $this->columns = $vals['columns'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_user_info_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->columns = array();
            $_size23 = 0;
            $_etype26 = 0;
            $xfer += $input->readListBegin($_etype26, $_size23);
            for ($_i27 = 0; $_i27 < $_size23; ++$_i27)
            {
              $elem28 = null;
              $xfer += $input->readString($elem28);
              $this->columns []= $elem28;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_user_info_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->columns !== null) {
      if (!is_array($this->columns)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('columns', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->columns));
        {
          foreach ($this->columns as $iter29)
          {
            $xfer += $output->writeString($iter29);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 3);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_user_info_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\query_resultset',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_user_info_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\webdb_gateway_service\query_resultset();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_user_info_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_batch_get_user_info_args {
  static $_TSPEC;

  public $uids = null;
  public $columns = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uids'])) {
        $this->uids = $vals['uids'];
      }
      if (isset($vals['columns'])) {
        $this->columns = $vals['columns'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_batch_get_user_info_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->uids = array();
            $_size30 = 0;
            $_etype33 = 0;
            $xfer += $input->readListBegin($_etype33, $_size30);
            for ($_i34 = 0; $_i34 < $_size30; ++$_i34)
            {
              $elem35 = null;
              $xfer += $input->readString($elem35);
              $this->uids []= $elem35;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->columns = array();
            $_size36 = 0;
            $_etype39 = 0;
            $xfer += $input->readListBegin($_etype39, $_size36);
            for ($_i40 = 0; $_i40 < $_size36; ++$_i40)
            {
              $elem41 = null;
              $xfer += $input->readString($elem41);
              $this->columns []= $elem41;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_batch_get_user_info_args');
    if ($this->uids !== null) {
      if (!is_array($this->uids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('uids', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->uids));
        {
          foreach ($this->uids as $iter42)
          {
            $xfer += $output->writeString($iter42);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->columns !== null) {
      if (!is_array($this->columns)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('columns', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->columns));
        {
          foreach ($this->columns as $iter43)
          {
            $xfer += $output->writeString($iter43);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 3);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_batch_get_user_info_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\query_resultset',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_batch_get_user_info_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\webdb_gateway_service\query_resultset();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_batch_get_user_info_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_create_user_info_args {
  static $_TSPEC;

  public $uid = null;
  public $nick = null;
  public $gender = null;
  public $area = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'nick',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'gender',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'area',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['nick'])) {
        $this->nick = $vals['nick'];
      }
      if (isset($vals['gender'])) {
        $this->gender = $vals['gender'];
      }
      if (isset($vals['area'])) {
        $this->area = $vals['area'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_create_user_info_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nick);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->area);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_create_user_info_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nick !== null) {
      $xfer += $output->writeFieldBegin('nick', TType::STRING, 2);
      $xfer += $output->writeString($this->nick);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gender !== null) {
      $xfer += $output->writeFieldBegin('gender', TType::I32, 3);
      $xfer += $output->writeI32($this->gender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->area !== null) {
      $xfer += $output->writeFieldBegin('area', TType::I32, 4);
      $xfer += $output->writeI32($this->area);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_create_user_info_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_create_user_info_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_create_user_info_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_settle_guild_info_args {
  static $_TSPEC;

  public $uid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_settle_guild_info_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_settle_guild_info_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_settle_guild_info_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\query_resultset',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_settle_guild_info_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\webdb_gateway_service\query_resultset();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_settle_guild_info_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_validate_session_owner_args {
  static $_TSPEC;

  public $sid = null;
  public $uid = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_validate_session_owner_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_validate_session_owner_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 2);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 3);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_validate_session_owner_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_validate_session_owner_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_validate_session_owner_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_info_args {
  static $_TSPEC;

  public $sid = null;
  public $columns = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['columns'])) {
        $this->columns = $vals['columns'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_info_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->columns = array();
            $_size44 = 0;
            $_etype47 = 0;
            $xfer += $input->readListBegin($_etype47, $_size44);
            for ($_i48 = 0; $_i48 < $_size44; ++$_i48)
            {
              $elem49 = null;
              $xfer += $input->readString($elem49);
              $this->columns []= $elem49;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_info_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->columns !== null) {
      if (!is_array($this->columns)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('columns', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->columns));
        {
          foreach ($this->columns as $iter50)
          {
            $xfer += $output->writeString($iter50);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 3);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_info_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\query_resultset',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_info_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\webdb_gateway_service\query_resultset();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_info_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_batch_get_session_info_args {
  static $_TSPEC;

  public $sids = null;
  public $columns = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sids'])) {
        $this->sids = $vals['sids'];
      }
      if (isset($vals['columns'])) {
        $this->columns = $vals['columns'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_batch_get_session_info_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->sids = array();
            $_size51 = 0;
            $_etype54 = 0;
            $xfer += $input->readListBegin($_etype54, $_size51);
            for ($_i55 = 0; $_i55 < $_size51; ++$_i55)
            {
              $elem56 = null;
              $xfer += $input->readString($elem56);
              $this->sids []= $elem56;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->columns = array();
            $_size57 = 0;
            $_etype60 = 0;
            $xfer += $input->readListBegin($_etype60, $_size57);
            for ($_i61 = 0; $_i61 < $_size57; ++$_i61)
            {
              $elem62 = null;
              $xfer += $input->readString($elem62);
              $this->columns []= $elem62;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_batch_get_session_info_args');
    if ($this->sids !== null) {
      if (!is_array($this->sids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sids', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->sids));
        {
          foreach ($this->sids as $iter63)
          {
            $xfer += $output->writeString($iter63);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->columns !== null) {
      if (!is_array($this->columns)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('columns', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->columns));
        {
          foreach ($this->columns as $iter64)
          {
            $xfer += $output->writeString($iter64);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 3);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_batch_get_session_info_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\query_resultset',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_batch_get_session_info_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\webdb_gateway_service\query_resultset();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_batch_get_session_info_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_template_args {
  static $_TSPEC;

  public $tid = null;
  public $sid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_template_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_template_args');
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::STRING, 1);
      $xfer += $output->writeString($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 2);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_template_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_template_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_template_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_jiedai_description_args {
  static $_TSPEC;

  public $tid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_jiedai_description_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_jiedai_description_args');
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::STRING, 1);
      $xfer += $output->writeString($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_jiedai_description_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_jiedai_description_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_jiedai_description_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_introduce_args {
  static $_TSPEC;

  public $tid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_introduce_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_introduce_args');
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::STRING, 1);
      $xfer += $output->writeString($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_introduce_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_introduce_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_introduce_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_set_session_introduce_args {
  static $_TSPEC;

  public $tid = null;
  public $introduce = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'introduce',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['introduce'])) {
        $this->introduce = $vals['introduce'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_set_session_introduce_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->introduce);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_set_session_introduce_args');
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::STRING, 1);
      $xfer += $output->writeString($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->introduce !== null) {
      $xfer += $output->writeFieldBegin('introduce', TType::STRING, 2);
      $xfer += $output->writeString($this->introduce);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_set_session_introduce_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_set_session_introduce_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_set_session_introduce_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_score_args {
  static $_TSPEC;

  public $sid = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_score_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_score_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 2);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_score_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_score_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_score_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_logo_url_args {
  static $_TSPEC;

  public $sid = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_logo_url_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_logo_url_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 2);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_logo_url_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_logo_url_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_logo_url_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_batch_get_session_logo_url_args {
  static $_TSPEC;

  public $sids = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sids'])) {
        $this->sids = $vals['sids'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_batch_get_session_logo_url_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->sids = array();
            $_size65 = 0;
            $_etype68 = 0;
            $xfer += $input->readListBegin($_etype68, $_size65);
            for ($_i69 = 0; $_i69 < $_size65; ++$_i69)
            {
              $elem70 = null;
              $xfer += $input->readString($elem70);
              $this->sids []= $elem70;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_batch_get_session_logo_url_args');
    if ($this->sids !== null) {
      if (!is_array($this->sids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sids', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->sids));
        {
          foreach ($this->sids as $iter71)
          {
            $xfer += $output->writeString($iter71);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 2);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_batch_get_session_logo_url_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\query_resultset',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_batch_get_session_logo_url_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\webdb_gateway_service\query_resultset();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_batch_get_session_logo_url_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_asid_args {
  static $_TSPEC;

  public $sid = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_asid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_asid_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 2);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_asid_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_asid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_asid_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_batch_get_session_asid_args {
  static $_TSPEC;

  public $sids = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sids'])) {
        $this->sids = $vals['sids'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_batch_get_session_asid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->sids = array();
            $_size72 = 0;
            $_etype75 = 0;
            $xfer += $input->readListBegin($_etype75, $_size72);
            for ($_i76 = 0; $_i76 < $_size72; ++$_i76)
            {
              $elem77 = null;
              $xfer += $input->readString($elem77);
              $this->sids []= $elem77;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_batch_get_session_asid_args');
    if ($this->sids !== null) {
      if (!is_array($this->sids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sids', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->sids));
        {
          foreach ($this->sids as $iter78)
          {
            $xfer += $output->writeString($iter78);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 2);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_batch_get_session_asid_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\query_resultset',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_batch_get_session_asid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\webdb_gateway_service\query_resultset();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_batch_get_session_asid_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_set_session_password_args {
  static $_TSPEC;

  public $sid = null;
  public $pwd = null;
  public $new_pwd = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'pwd',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'new_pwd',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['pwd'])) {
        $this->pwd = $vals['pwd'];
      }
      if (isset($vals['new_pwd'])) {
        $this->new_pwd = $vals['new_pwd'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_set_session_password_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pwd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->new_pwd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_set_session_password_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pwd !== null) {
      $xfer += $output->writeFieldBegin('pwd', TType::STRING, 2);
      $xfer += $output->writeString($this->pwd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->new_pwd !== null) {
      $xfer += $output->writeFieldBegin('new_pwd', TType::STRING, 3);
      $xfer += $output->writeString($this->new_pwd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 4);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_set_session_password_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_set_session_password_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_set_session_password_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_erase_session_password_args {
  static $_TSPEC;

  public $sid = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_erase_session_password_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_erase_session_password_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 2);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_erase_session_password_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_erase_session_password_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_erase_session_password_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_sid_by_asid_args {
  static $_TSPEC;

  public $asid = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'asid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['asid'])) {
        $this->asid = $vals['asid'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_sid_by_asid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->asid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_sid_by_asid_args');
    if ($this->asid !== null) {
      $xfer += $output->writeFieldBegin('asid', TType::STRING, 1);
      $xfer += $output->writeString($this->asid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 2);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_sid_by_asid_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_sid_by_asid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_sid_by_asid_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_batch_get_sub_sessions_info_args {
  static $_TSPEC;

  public $tid = null;
  public $pid = null;
  public $columns = null;
  public $full_recursive = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'pid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'full_recursive',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['pid'])) {
        $this->pid = $vals['pid'];
      }
      if (isset($vals['columns'])) {
        $this->columns = $vals['columns'];
      }
      if (isset($vals['full_recursive'])) {
        $this->full_recursive = $vals['full_recursive'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_batch_get_sub_sessions_info_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->columns = array();
            $_size79 = 0;
            $_etype82 = 0;
            $xfer += $input->readListBegin($_etype82, $_size79);
            for ($_i83 = 0; $_i83 < $_size79; ++$_i83)
            {
              $elem84 = null;
              $xfer += $input->readString($elem84);
              $this->columns []= $elem84;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->full_recursive);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_batch_get_sub_sessions_info_args');
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::STRING, 1);
      $xfer += $output->writeString($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pid !== null) {
      $xfer += $output->writeFieldBegin('pid', TType::STRING, 2);
      $xfer += $output->writeString($this->pid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->columns !== null) {
      if (!is_array($this->columns)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('columns', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->columns));
        {
          foreach ($this->columns as $iter85)
          {
            $xfer += $output->writeString($iter85);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->full_recursive !== null) {
      $xfer += $output->writeFieldBegin('full_recursive', TType::BOOL, 4);
      $xfer += $output->writeBool($this->full_recursive);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 5);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_batch_get_sub_sessions_info_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\query_resultset',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_batch_get_sub_sessions_info_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\webdb_gateway_service\query_resultset();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_batch_get_sub_sessions_info_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_sub_channel_list_args {
  static $_TSPEC;

  public $sid = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_sub_channel_list_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_sub_channel_list_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 2);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_sub_channel_list_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\query_resultset',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_sub_channel_list_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\webdb_gateway_service\query_resultset();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_sub_channel_list_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_sub_sessions_count_args {
  static $_TSPEC;

  public $tid = null;
  public $pid = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'pid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['pid'])) {
        $this->pid = $vals['pid'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_sub_sessions_count_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_sub_sessions_count_args');
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::STRING, 1);
      $xfer += $output->writeString($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pid !== null) {
      $xfer += $output->writeFieldBegin('pid', TType::STRING, 2);
      $xfer += $output->writeString($this->pid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 3);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_sub_sessions_count_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\query_resultset',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_sub_sessions_count_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\webdb_gateway_service\query_resultset();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_sub_sessions_count_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_validate_sub_session_args {
  static $_TSPEC;

  public $tid = null;
  public $pid = null;
  public $sid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'pid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['pid'])) {
        $this->pid = $vals['pid'];
      }
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_validate_sub_session_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_validate_sub_session_args');
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::STRING, 1);
      $xfer += $output->writeString($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pid !== null) {
      $xfer += $output->writeFieldBegin('pid', TType::STRING, 2);
      $xfer += $output->writeString($this->pid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 3);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_validate_sub_session_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_validate_sub_session_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_validate_sub_session_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_validate_sub_session_manager_args {
  static $_TSPEC;

  public $tid = null;
  public $sid = null;
  public $uid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_validate_sub_session_manager_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_validate_sub_session_manager_args');
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::STRING, 1);
      $xfer += $output->writeString($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 2);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 3);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_validate_sub_session_manager_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_validate_sub_session_manager_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_validate_sub_session_manager_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_set_sub_sessions_order_args {
  static $_TSPEC;

  public $tid = null;
  public $sub_sessions_sort = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'sub_sessions_sort',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        3 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['sub_sessions_sort'])) {
        $this->sub_sessions_sort = $vals['sub_sessions_sort'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_set_sub_sessions_order_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->sub_sessions_sort = array();
            $_size86 = 0;
            $_ktype87 = 0;
            $_vtype88 = 0;
            $xfer += $input->readMapBegin($_ktype87, $_vtype88, $_size86);
            for ($_i90 = 0; $_i90 < $_size86; ++$_i90)
            {
              $key91 = '';
              $val92 = array();
              $xfer += $input->readString($key91);
              $val92 = array();
              $_size93 = 0;
              $_ktype94 = 0;
              $_vtype95 = 0;
              $xfer += $input->readMapBegin($_ktype94, $_vtype95, $_size93);
              for ($_i97 = 0; $_i97 < $_size93; ++$_i97)
              {
                $key98 = '';
                $val99 = '';
                $xfer += $input->readString($key98);
                $xfer += $input->readString($val99);
                $val92[$key98] = $val99;
              }
              $xfer += $input->readMapEnd();
              $this->sub_sessions_sort[$key91] = $val92;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_set_sub_sessions_order_args');
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::STRING, 1);
      $xfer += $output->writeString($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sub_sessions_sort !== null) {
      if (!is_array($this->sub_sessions_sort)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sub_sessions_sort', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->sub_sessions_sort));
        {
          foreach ($this->sub_sessions_sort as $kiter100 => $viter101)
          {
            $xfer += $output->writeString($kiter100);
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($viter101));
              {
                foreach ($viter101 as $kiter102 => $viter103)
                {
                  $xfer += $output->writeString($kiter102);
                  $xfer += $output->writeString($viter103);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 3);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_set_sub_sessions_order_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_set_sub_sessions_order_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_set_sub_sessions_order_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_favorite_session_list_args {
  static $_TSPEC;

  public $uid = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_favorite_session_list_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_favorite_session_list_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 2);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_favorite_session_list_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\query_resultset',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_favorite_session_list_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\webdb_gateway_service\query_resultset();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_favorite_session_list_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_count_by_owner_args {
  static $_TSPEC;

  public $uid = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_count_by_owner_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_count_by_owner_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 2);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_count_by_owner_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_count_by_owner_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_count_by_owner_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_list_by_ownerid_args {
  static $_TSPEC;

  public $ownerid = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ownerid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ownerid'])) {
        $this->ownerid = $vals['ownerid'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_list_by_ownerid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ownerid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_list_by_ownerid_args');
    if ($this->ownerid !== null) {
      $xfer += $output->writeFieldBegin('ownerid', TType::STRING, 1);
      $xfer += $output->writeString($this->ownerid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 2);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_list_by_ownerid_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\query_resultset',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_list_by_ownerid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\webdb_gateway_service\query_resultset();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_list_by_ownerid_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_sessions_by_owner_args {
  static $_TSPEC;

  public $ownerid = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ownerid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ownerid'])) {
        $this->ownerid = $vals['ownerid'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_sessions_by_owner_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ownerid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_sessions_by_owner_args');
    if ($this->ownerid !== null) {
      $xfer += $output->writeFieldBegin('ownerid', TType::STRING, 1);
      $xfer += $output->writeString($this->ownerid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 2);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_sessions_by_owner_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_sessions_by_owner_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size104 = 0;
            $_etype107 = 0;
            $xfer += $input->readListBegin($_etype107, $_size104);
            for ($_i108 = 0; $_i108 < $_size104; ++$_i108)
            {
              $elem109 = null;
              $xfer += $input->readString($elem109);
              $this->success []= $elem109;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_sessions_by_owner_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter110)
          {
            $xfer += $output->writeString($iter110);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_member_info_args {
  static $_TSPEC;

  public $sid = null;
  public $uid = null;
  public $columns = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['columns'])) {
        $this->columns = $vals['columns'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_member_info_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->columns = array();
            $_size111 = 0;
            $_etype114 = 0;
            $xfer += $input->readListBegin($_etype114, $_size111);
            for ($_i115 = 0; $_i115 < $_size111; ++$_i115)
            {
              $elem116 = null;
              $xfer += $input->readString($elem116);
              $this->columns []= $elem116;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_member_info_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 2);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->columns !== null) {
      if (!is_array($this->columns)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('columns', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->columns));
        {
          foreach ($this->columns as $iter117)
          {
            $xfer += $output->writeString($iter117);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 4);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_member_info_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\query_resultset',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_member_info_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\webdb_gateway_service\query_resultset();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_member_info_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_batch_get_member_info_by_session_args {
  static $_TSPEC;

  public $uid = null;
  public $sids = null;
  public $columns = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'sids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['sids'])) {
        $this->sids = $vals['sids'];
      }
      if (isset($vals['columns'])) {
        $this->columns = $vals['columns'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_batch_get_member_info_by_session_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->sids = array();
            $_size118 = 0;
            $_etype121 = 0;
            $xfer += $input->readListBegin($_etype121, $_size118);
            for ($_i122 = 0; $_i122 < $_size118; ++$_i122)
            {
              $elem123 = null;
              $xfer += $input->readString($elem123);
              $this->sids []= $elem123;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->columns = array();
            $_size124 = 0;
            $_etype127 = 0;
            $xfer += $input->readListBegin($_etype127, $_size124);
            for ($_i128 = 0; $_i128 < $_size124; ++$_i128)
            {
              $elem129 = null;
              $xfer += $input->readString($elem129);
              $this->columns []= $elem129;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_batch_get_member_info_by_session_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sids !== null) {
      if (!is_array($this->sids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sids', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->sids));
        {
          foreach ($this->sids as $iter130)
          {
            $xfer += $output->writeString($iter130);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->columns !== null) {
      if (!is_array($this->columns)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('columns', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->columns));
        {
          foreach ($this->columns as $iter131)
          {
            $xfer += $output->writeString($iter131);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 4);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_batch_get_member_info_by_session_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\query_resultset',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_batch_get_member_info_by_session_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\webdb_gateway_service\query_resultset();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_batch_get_member_info_by_session_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_batch_get_member_info_by_user_args {
  static $_TSPEC;

  public $sid = null;
  public $uids = null;
  public $columns = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['uids'])) {
        $this->uids = $vals['uids'];
      }
      if (isset($vals['columns'])) {
        $this->columns = $vals['columns'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_batch_get_member_info_by_user_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->uids = array();
            $_size132 = 0;
            $_etype135 = 0;
            $xfer += $input->readListBegin($_etype135, $_size132);
            for ($_i136 = 0; $_i136 < $_size132; ++$_i136)
            {
              $elem137 = null;
              $xfer += $input->readString($elem137);
              $this->uids []= $elem137;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->columns = array();
            $_size138 = 0;
            $_etype141 = 0;
            $xfer += $input->readListBegin($_etype141, $_size138);
            for ($_i142 = 0; $_i142 < $_size138; ++$_i142)
            {
              $elem143 = null;
              $xfer += $input->readString($elem143);
              $this->columns []= $elem143;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_batch_get_member_info_by_user_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uids !== null) {
      if (!is_array($this->uids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('uids', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->uids));
        {
          foreach ($this->uids as $iter144)
          {
            $xfer += $output->writeString($iter144);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->columns !== null) {
      if (!is_array($this->columns)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('columns', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->columns));
        {
          foreach ($this->columns as $iter145)
          {
            $xfer += $output->writeString($iter145);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 4);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_batch_get_member_info_by_user_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\query_resultset',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_batch_get_member_info_by_user_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\webdb_gateway_service\query_resultset();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_batch_get_member_info_by_user_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_batch_get_role_by_memberid_args {
  static $_TSPEC;

  public $sid = null;
  public $uids = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['uids'])) {
        $this->uids = $vals['uids'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_batch_get_role_by_memberid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->uids = array();
            $_size146 = 0;
            $_etype149 = 0;
            $xfer += $input->readListBegin($_etype149, $_size146);
            for ($_i150 = 0; $_i150 < $_size146; ++$_i150)
            {
              $elem151 = null;
              $xfer += $input->readString($elem151);
              $this->uids []= $elem151;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_batch_get_role_by_memberid_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uids !== null) {
      if (!is_array($this->uids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('uids', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->uids));
        {
          foreach ($this->uids as $iter152)
          {
            $xfer += $output->writeString($iter152);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 3);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_batch_get_role_by_memberid_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_batch_get_role_by_memberid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size153 = 0;
            $_ktype154 = 0;
            $_vtype155 = 0;
            $xfer += $input->readMapBegin($_ktype154, $_vtype155, $_size153);
            for ($_i157 = 0; $_i157 < $_size153; ++$_i157)
            {
              $key158 = '';
              $val159 = '';
              $xfer += $input->readString($key158);
              $xfer += $input->readString($val159);
              $this->success[$key158] = $val159;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_batch_get_role_by_memberid_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter160 => $viter161)
          {
            $xfer += $output->writeString($kiter160);
            $xfer += $output->writeString($viter161);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_member_count_by_role_args {
  static $_TSPEC;

  public $sid = null;
  public $roles = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'roles',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['roles'])) {
        $this->roles = $vals['roles'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_member_count_by_role_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->roles = array();
            $_size162 = 0;
            $_etype165 = 0;
            $xfer += $input->readListBegin($_etype165, $_size162);
            for ($_i166 = 0; $_i166 < $_size162; ++$_i166)
            {
              $elem167 = null;
              $xfer += $input->readString($elem167);
              $this->roles []= $elem167;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_member_count_by_role_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->roles !== null) {
      if (!is_array($this->roles)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('roles', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->roles));
        {
          foreach ($this->roles as $iter168)
          {
            $xfer += $output->writeString($iter168);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 3);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_member_count_by_role_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_member_count_by_role_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size169 = 0;
            $_ktype170 = 0;
            $_vtype171 = 0;
            $xfer += $input->readMapBegin($_ktype170, $_vtype171, $_size169);
            for ($_i173 = 0; $_i173 < $_size169; ++$_i173)
            {
              $key174 = '';
              $val175 = 0;
              $xfer += $input->readString($key174);
              $xfer += $input->readI32($val175);
              $this->success[$key174] = $val175;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_member_count_by_role_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::I32, count($this->success));
        {
          foreach ($this->success as $kiter176 => $viter177)
          {
            $xfer += $output->writeString($kiter176);
            $xfer += $output->writeI32($viter177);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_regular_member_count_args {
  static $_TSPEC;

  public $sid = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_regular_member_count_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_regular_member_count_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 2);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_regular_member_count_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_regular_member_count_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_regular_member_count_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_batch_set_session_member_role_args {
  static $_TSPEC;

  public $sid = null;
  public $uids = null;
  public $role = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'role',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['uids'])) {
        $this->uids = $vals['uids'];
      }
      if (isset($vals['role'])) {
        $this->role = $vals['role'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_batch_set_session_member_role_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->uids = array();
            $_size178 = 0;
            $_etype181 = 0;
            $xfer += $input->readListBegin($_etype181, $_size178);
            for ($_i182 = 0; $_i182 < $_size178; ++$_i182)
            {
              $elem183 = null;
              $xfer += $input->readString($elem183);
              $this->uids []= $elem183;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->role);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_batch_set_session_member_role_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uids !== null) {
      if (!is_array($this->uids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('uids', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->uids));
        {
          foreach ($this->uids as $iter184)
          {
            $xfer += $output->writeString($iter184);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->role !== null) {
      $xfer += $output->writeFieldBegin('role', TType::STRING, 3);
      $xfer += $output->writeString($this->role);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 4);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_batch_set_session_member_role_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_batch_set_session_member_role_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_batch_set_session_member_role_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_batch_erase_subsession_manager_args {
  static $_TSPEC;

  public $sid = null;
  public $uids = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['uids'])) {
        $this->uids = $vals['uids'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_batch_erase_subsession_manager_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->uids = array();
            $_size185 = 0;
            $_etype188 = 0;
            $xfer += $input->readListBegin($_etype188, $_size185);
            for ($_i189 = 0; $_i189 < $_size185; ++$_i189)
            {
              $elem190 = null;
              $xfer += $input->readString($elem190);
              $this->uids []= $elem190;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_batch_erase_subsession_manager_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uids !== null) {
      if (!is_array($this->uids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('uids', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->uids));
        {
          foreach ($this->uids as $iter191)
          {
            $xfer += $output->writeString($iter191);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 3);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_batch_erase_subsession_manager_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_batch_erase_subsession_manager_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_batch_erase_subsession_manager_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_batch_erase_session_member_args {
  static $_TSPEC;

  public $sid = null;
  public $uids = null;
  public $admin_uid = null;
  public $admin_nick = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'admin_uid',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'admin_nick',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['uids'])) {
        $this->uids = $vals['uids'];
      }
      if (isset($vals['admin_uid'])) {
        $this->admin_uid = $vals['admin_uid'];
      }
      if (isset($vals['admin_nick'])) {
        $this->admin_nick = $vals['admin_nick'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_batch_erase_session_member_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->uids = array();
            $_size192 = 0;
            $_etype195 = 0;
            $xfer += $input->readListBegin($_etype195, $_size192);
            for ($_i196 = 0; $_i196 < $_size192; ++$_i196)
            {
              $elem197 = null;
              $xfer += $input->readString($elem197);
              $this->uids []= $elem197;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->admin_uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->admin_nick);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_batch_erase_session_member_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uids !== null) {
      if (!is_array($this->uids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('uids', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->uids));
        {
          foreach ($this->uids as $iter198)
          {
            $xfer += $output->writeString($iter198);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->admin_uid !== null) {
      $xfer += $output->writeFieldBegin('admin_uid', TType::STRING, 3);
      $xfer += $output->writeString($this->admin_uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->admin_nick !== null) {
      $xfer += $output->writeFieldBegin('admin_nick', TType::STRING, 4);
      $xfer += $output->writeString($this->admin_nick);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 5);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_batch_erase_session_member_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_batch_erase_session_member_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_batch_erase_session_member_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_list_count_by_role_args {
  static $_TSPEC;

  public $uid = null;
  public $role = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'role',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['role'])) {
        $this->role = $vals['role'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_list_count_by_role_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->role);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_list_count_by_role_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->role !== null) {
      $xfer += $output->writeFieldBegin('role', TType::STRING, 2);
      $xfer += $output->writeString($this->role);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 3);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_list_count_by_role_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_list_count_by_role_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_list_count_by_role_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_list_by_role_args {
  static $_TSPEC;

  public $uid = null;
  public $role = null;
  public $page = null;
  public $per_page = null;
  public $order_by = null;
  public $descending = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'role',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'per_page',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'order_by',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'descending',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['role'])) {
        $this->role = $vals['role'];
      }
      if (isset($vals['page'])) {
        $this->page = $vals['page'];
      }
      if (isset($vals['per_page'])) {
        $this->per_page = $vals['per_page'];
      }
      if (isset($vals['order_by'])) {
        $this->order_by = $vals['order_by'];
      }
      if (isset($vals['descending'])) {
        $this->descending = $vals['descending'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_list_by_role_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->role);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->per_page);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->order_by);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->descending);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_list_by_role_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->role !== null) {
      $xfer += $output->writeFieldBegin('role', TType::STRING, 2);
      $xfer += $output->writeString($this->role);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page !== null) {
      $xfer += $output->writeFieldBegin('page', TType::I32, 3);
      $xfer += $output->writeI32($this->page);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->per_page !== null) {
      $xfer += $output->writeFieldBegin('per_page', TType::I32, 4);
      $xfer += $output->writeI32($this->per_page);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order_by !== null) {
      $xfer += $output->writeFieldBegin('order_by', TType::STRING, 5);
      $xfer += $output->writeString($this->order_by);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descending !== null) {
      $xfer += $output->writeFieldBegin('descending', TType::BOOL, 6);
      $xfer += $output->writeBool($this->descending);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 7);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_list_by_role_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\query_resultset',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_list_by_role_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\webdb_gateway_service\query_resultset();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_list_by_role_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_batch_get_session_list_by_role_args {
  static $_TSPEC;

  public $uid = null;
  public $roles = null;
  public $order_by = null;
  public $descending = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'roles',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'order_by',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'descending',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['roles'])) {
        $this->roles = $vals['roles'];
      }
      if (isset($vals['order_by'])) {
        $this->order_by = $vals['order_by'];
      }
      if (isset($vals['descending'])) {
        $this->descending = $vals['descending'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_batch_get_session_list_by_role_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->roles = array();
            $_size199 = 0;
            $_etype202 = 0;
            $xfer += $input->readListBegin($_etype202, $_size199);
            for ($_i203 = 0; $_i203 < $_size199; ++$_i203)
            {
              $elem204 = null;
              $xfer += $input->readString($elem204);
              $this->roles []= $elem204;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->order_by);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->descending);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_batch_get_session_list_by_role_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->roles !== null) {
      if (!is_array($this->roles)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('roles', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->roles));
        {
          foreach ($this->roles as $iter205)
          {
            $xfer += $output->writeString($iter205);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order_by !== null) {
      $xfer += $output->writeFieldBegin('order_by', TType::STRING, 3);
      $xfer += $output->writeString($this->order_by);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descending !== null) {
      $xfer += $output->writeFieldBegin('descending', TType::BOOL, 4);
      $xfer += $output->writeBool($this->descending);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 5);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_batch_get_session_list_by_role_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::LST,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_batch_get_session_list_by_role_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size206 = 0;
            $_ktype207 = 0;
            $_vtype208 = 0;
            $xfer += $input->readMapBegin($_ktype207, $_vtype208, $_size206);
            for ($_i210 = 0; $_i210 < $_size206; ++$_i210)
            {
              $key211 = '';
              $val212 = array();
              $xfer += $input->readString($key211);
              $val212 = array();
              $_size213 = 0;
              $_etype216 = 0;
              $xfer += $input->readListBegin($_etype216, $_size213);
              for ($_i217 = 0; $_i217 < $_size213; ++$_i217)
              {
                $elem218 = null;
                $xfer += $input->readString($elem218);
                $val212 []= $elem218;
              }
              $xfer += $input->readListEnd();
              $this->success[$key211] = $val212;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_batch_get_session_list_by_role_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::LST, count($this->success));
        {
          foreach ($this->success as $kiter219 => $viter220)
          {
            $xfer += $output->writeString($kiter219);
            {
              $output->writeListBegin(TType::STRING, count($viter220));
              {
                foreach ($viter220 as $iter221)
                {
                  $xfer += $output->writeString($iter221);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_members_by_role_args {
  static $_TSPEC;

  public $sid = null;
  public $columns = null;
  public $role = null;
  public $page = null;
  public $per_page = null;
  public $order_by = null;
  public $descending = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'role',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'per_page',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'order_by',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'descending',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['columns'])) {
        $this->columns = $vals['columns'];
      }
      if (isset($vals['role'])) {
        $this->role = $vals['role'];
      }
      if (isset($vals['page'])) {
        $this->page = $vals['page'];
      }
      if (isset($vals['per_page'])) {
        $this->per_page = $vals['per_page'];
      }
      if (isset($vals['order_by'])) {
        $this->order_by = $vals['order_by'];
      }
      if (isset($vals['descending'])) {
        $this->descending = $vals['descending'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_members_by_role_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->columns = array();
            $_size222 = 0;
            $_etype225 = 0;
            $xfer += $input->readListBegin($_etype225, $_size222);
            for ($_i226 = 0; $_i226 < $_size222; ++$_i226)
            {
              $elem227 = null;
              $xfer += $input->readString($elem227);
              $this->columns []= $elem227;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->role);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->per_page);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->order_by);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->descending);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_members_by_role_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->columns !== null) {
      if (!is_array($this->columns)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('columns', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->columns));
        {
          foreach ($this->columns as $iter228)
          {
            $xfer += $output->writeString($iter228);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->role !== null) {
      $xfer += $output->writeFieldBegin('role', TType::STRING, 3);
      $xfer += $output->writeString($this->role);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page !== null) {
      $xfer += $output->writeFieldBegin('page', TType::I32, 4);
      $xfer += $output->writeI32($this->page);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->per_page !== null) {
      $xfer += $output->writeFieldBegin('per_page', TType::I32, 5);
      $xfer += $output->writeI32($this->per_page);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order_by !== null) {
      $xfer += $output->writeFieldBegin('order_by', TType::STRING, 6);
      $xfer += $output->writeString($this->order_by);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descending !== null) {
      $xfer += $output->writeFieldBegin('descending', TType::BOOL, 7);
      $xfer += $output->writeBool($this->descending);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 8);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_members_by_role_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\query_resultset',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_members_by_role_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\webdb_gateway_service\query_resultset();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_members_by_role_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_sub_managers_args {
  static $_TSPEC;

  public $tid = null;
  public $columns = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['columns'])) {
        $this->columns = $vals['columns'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_sub_managers_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->columns = array();
            $_size229 = 0;
            $_etype232 = 0;
            $xfer += $input->readListBegin($_etype232, $_size229);
            for ($_i233 = 0; $_i233 < $_size229; ++$_i233)
            {
              $elem234 = null;
              $xfer += $input->readString($elem234);
              $this->columns []= $elem234;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_sub_managers_args');
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::STRING, 1);
      $xfer += $output->writeString($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->columns !== null) {
      if (!is_array($this->columns)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('columns', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->columns));
        {
          foreach ($this->columns as $iter235)
          {
            $xfer += $output->writeString($iter235);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_sub_managers_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\query_resultset',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_sub_managers_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\webdb_gateway_service\query_resultset();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_sub_managers_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_yy_admin_type_args {
  static $_TSPEC;

  public $uid = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_yy_admin_type_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_yy_admin_type_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 2);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_yy_admin_type_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_yy_admin_type_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_yy_admin_type_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_ip_blacklist_count_args {
  static $_TSPEC;

  public $sid = null;
  public $date_from = null;
  public $date_to = null;
  public $reason = null;
  public $uid = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date_from',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'date_to',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'reason',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['date_from'])) {
        $this->date_from = $vals['date_from'];
      }
      if (isset($vals['date_to'])) {
        $this->date_to = $vals['date_to'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_ip_blacklist_count_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date_from);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date_to);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_ip_blacklist_count_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date_from !== null) {
      $xfer += $output->writeFieldBegin('date_from', TType::STRING, 2);
      $xfer += $output->writeString($this->date_from);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date_to !== null) {
      $xfer += $output->writeFieldBegin('date_to', TType::STRING, 3);
      $xfer += $output->writeString($this->date_to);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::STRING, 4);
      $xfer += $output->writeString($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 5);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 6);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_ip_blacklist_count_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_ip_blacklist_count_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_ip_blacklist_count_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_ip_blacklist_args {
  static $_TSPEC;

  public $sid = null;
  public $date_from = null;
  public $date_to = null;
  public $reason = null;
  public $uid = null;
  public $columns = null;
  public $page = null;
  public $per_page = null;
  public $order_by = null;
  public $descending = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date_from',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'date_to',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'reason',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        7 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'per_page',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'order_by',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'descending',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['date_from'])) {
        $this->date_from = $vals['date_from'];
      }
      if (isset($vals['date_to'])) {
        $this->date_to = $vals['date_to'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['columns'])) {
        $this->columns = $vals['columns'];
      }
      if (isset($vals['page'])) {
        $this->page = $vals['page'];
      }
      if (isset($vals['per_page'])) {
        $this->per_page = $vals['per_page'];
      }
      if (isset($vals['order_by'])) {
        $this->order_by = $vals['order_by'];
      }
      if (isset($vals['descending'])) {
        $this->descending = $vals['descending'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_ip_blacklist_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date_from);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date_to);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->columns = array();
            $_size236 = 0;
            $_etype239 = 0;
            $xfer += $input->readListBegin($_etype239, $_size236);
            for ($_i240 = 0; $_i240 < $_size236; ++$_i240)
            {
              $elem241 = null;
              $xfer += $input->readString($elem241);
              $this->columns []= $elem241;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->per_page);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->order_by);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->descending);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_ip_blacklist_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date_from !== null) {
      $xfer += $output->writeFieldBegin('date_from', TType::STRING, 2);
      $xfer += $output->writeString($this->date_from);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date_to !== null) {
      $xfer += $output->writeFieldBegin('date_to', TType::STRING, 3);
      $xfer += $output->writeString($this->date_to);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::STRING, 4);
      $xfer += $output->writeString($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 5);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->columns !== null) {
      if (!is_array($this->columns)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('columns', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRING, count($this->columns));
        {
          foreach ($this->columns as $iter242)
          {
            $xfer += $output->writeString($iter242);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page !== null) {
      $xfer += $output->writeFieldBegin('page', TType::I32, 7);
      $xfer += $output->writeI32($this->page);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->per_page !== null) {
      $xfer += $output->writeFieldBegin('per_page', TType::I32, 8);
      $xfer += $output->writeI32($this->per_page);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order_by !== null) {
      $xfer += $output->writeFieldBegin('order_by', TType::STRING, 9);
      $xfer += $output->writeString($this->order_by);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descending !== null) {
      $xfer += $output->writeFieldBegin('descending', TType::BOOL, 10);
      $xfer += $output->writeBool($this->descending);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 11);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_ip_blacklist_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\query_resultset',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_ip_blacklist_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\webdb_gateway_service\query_resultset();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_ip_blacklist_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_id_blacklist_count_args {
  static $_TSPEC;

  public $sid = null;
  public $date_from = null;
  public $date_to = null;
  public $reason = null;
  public $uid = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date_from',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'date_to',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'reason',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['date_from'])) {
        $this->date_from = $vals['date_from'];
      }
      if (isset($vals['date_to'])) {
        $this->date_to = $vals['date_to'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_id_blacklist_count_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date_from);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date_to);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_id_blacklist_count_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date_from !== null) {
      $xfer += $output->writeFieldBegin('date_from', TType::STRING, 2);
      $xfer += $output->writeString($this->date_from);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date_to !== null) {
      $xfer += $output->writeFieldBegin('date_to', TType::STRING, 3);
      $xfer += $output->writeString($this->date_to);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::STRING, 4);
      $xfer += $output->writeString($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 5);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 6);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_id_blacklist_count_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_id_blacklist_count_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_id_blacklist_count_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_id_blacklist_args {
  static $_TSPEC;

  public $sid = null;
  public $date_from = null;
  public $date_to = null;
  public $reason = null;
  public $uid = null;
  public $columns = null;
  public $page = null;
  public $per_page = null;
  public $order_by = null;
  public $descending = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date_from',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'date_to',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'reason',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        7 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'per_page',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'order_by',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'descending',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['date_from'])) {
        $this->date_from = $vals['date_from'];
      }
      if (isset($vals['date_to'])) {
        $this->date_to = $vals['date_to'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['columns'])) {
        $this->columns = $vals['columns'];
      }
      if (isset($vals['page'])) {
        $this->page = $vals['page'];
      }
      if (isset($vals['per_page'])) {
        $this->per_page = $vals['per_page'];
      }
      if (isset($vals['order_by'])) {
        $this->order_by = $vals['order_by'];
      }
      if (isset($vals['descending'])) {
        $this->descending = $vals['descending'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_id_blacklist_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date_from);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date_to);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->columns = array();
            $_size243 = 0;
            $_etype246 = 0;
            $xfer += $input->readListBegin($_etype246, $_size243);
            for ($_i247 = 0; $_i247 < $_size243; ++$_i247)
            {
              $elem248 = null;
              $xfer += $input->readString($elem248);
              $this->columns []= $elem248;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->per_page);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->order_by);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->descending);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_id_blacklist_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date_from !== null) {
      $xfer += $output->writeFieldBegin('date_from', TType::STRING, 2);
      $xfer += $output->writeString($this->date_from);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date_to !== null) {
      $xfer += $output->writeFieldBegin('date_to', TType::STRING, 3);
      $xfer += $output->writeString($this->date_to);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::STRING, 4);
      $xfer += $output->writeString($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 5);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->columns !== null) {
      if (!is_array($this->columns)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('columns', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRING, count($this->columns));
        {
          foreach ($this->columns as $iter249)
          {
            $xfer += $output->writeString($iter249);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page !== null) {
      $xfer += $output->writeFieldBegin('page', TType::I32, 7);
      $xfer += $output->writeI32($this->page);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->per_page !== null) {
      $xfer += $output->writeFieldBegin('per_page', TType::I32, 8);
      $xfer += $output->writeI32($this->per_page);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order_by !== null) {
      $xfer += $output->writeFieldBegin('order_by', TType::STRING, 9);
      $xfer += $output->writeString($this->order_by);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descending !== null) {
      $xfer += $output->writeFieldBegin('descending', TType::BOOL, 10);
      $xfer += $output->writeBool($this->descending);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 11);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_id_blacklist_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\query_resultset',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_id_blacklist_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\webdb_gateway_service\query_resultset();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_id_blacklist_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_erase_session_blacklist_args {
  static $_TSPEC;

  public $sid = null;
  public $ban_type = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ban_type',
          'type' => TType::BYTE,
          ),
        3 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['ban_type'])) {
        $this->ban_type = $vals['ban_type'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_erase_session_blacklist_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->ban_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_erase_session_blacklist_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ban_type !== null) {
      $xfer += $output->writeFieldBegin('ban_type', TType::BYTE, 2);
      $xfer += $output->writeByte($this->ban_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 3);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_erase_session_blacklist_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_erase_session_blacklist_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_erase_session_blacklist_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_batch_erase_session_blacklist_element_args {
  static $_TSPEC;

  public $sid = null;
  public $ban_types = null;
  public $uids_ips = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ban_types',
          'type' => TType::LST,
          'etype' => TType::BYTE,
          'elem' => array(
            'type' => TType::BYTE,
            ),
          ),
        3 => array(
          'var' => 'uids_ips',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['ban_types'])) {
        $this->ban_types = $vals['ban_types'];
      }
      if (isset($vals['uids_ips'])) {
        $this->uids_ips = $vals['uids_ips'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_batch_erase_session_blacklist_element_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->ban_types = array();
            $_size250 = 0;
            $_etype253 = 0;
            $xfer += $input->readListBegin($_etype253, $_size250);
            for ($_i254 = 0; $_i254 < $_size250; ++$_i254)
            {
              $elem255 = null;
              $xfer += $input->readByte($elem255);
              $this->ban_types []= $elem255;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->uids_ips = array();
            $_size256 = 0;
            $_etype259 = 0;
            $xfer += $input->readListBegin($_etype259, $_size256);
            for ($_i260 = 0; $_i260 < $_size256; ++$_i260)
            {
              $elem261 = null;
              $xfer += $input->readString($elem261);
              $this->uids_ips []= $elem261;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_batch_erase_session_blacklist_element_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ban_types !== null) {
      if (!is_array($this->ban_types)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ban_types', TType::LST, 2);
      {
        $output->writeListBegin(TType::BYTE, count($this->ban_types));
        {
          foreach ($this->ban_types as $iter262)
          {
            $xfer += $output->writeByte($iter262);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uids_ips !== null) {
      if (!is_array($this->uids_ips)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('uids_ips', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->uids_ips));
        {
          foreach ($this->uids_ips as $iter263)
          {
            $xfer += $output->writeString($iter263);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 4);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_batch_erase_session_blacklist_element_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_batch_erase_session_blacklist_element_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_batch_erase_session_blacklist_element_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_set_autio_high_quality_args {
  static $_TSPEC;

  public $sid = null;
  public $flag = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'flag',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['flag'])) {
        $this->flag = $vals['flag'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_set_autio_high_quality_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->flag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_set_autio_high_quality_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flag !== null) {
      $xfer += $output->writeFieldBegin('flag', TType::STRING, 2);
      $xfer += $output->writeString($this->flag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 3);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_set_autio_high_quality_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_set_autio_high_quality_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_set_autio_high_quality_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_disable_audio_high_quality_args {
  static $_TSPEC;

  public $sid = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_disable_audio_high_quality_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_disable_audio_high_quality_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 2);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_disable_audio_high_quality_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_disable_audio_high_quality_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_disable_audio_high_quality_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_gyz_args {
  static $_TSPEC;

  public $sid = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_gyz_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_gyz_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 2);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_gyz_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_gyz_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_gyz_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_set_application_rule_args {
  static $_TSPEC;

  public $sid = null;
  public $request_jifen = null;
  public $app_instru = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'request_jifen',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'app_instru',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['request_jifen'])) {
        $this->request_jifen = $vals['request_jifen'];
      }
      if (isset($vals['app_instru'])) {
        $this->app_instru = $vals['app_instru'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_set_application_rule_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->request_jifen);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->app_instru);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_set_application_rule_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->request_jifen !== null) {
      $xfer += $output->writeFieldBegin('request_jifen', TType::STRING, 2);
      $xfer += $output->writeString($this->request_jifen);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->app_instru !== null) {
      $xfer += $output->writeFieldBegin('app_instru', TType::STRING, 3);
      $xfer += $output->writeString($this->app_instru);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 4);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_set_application_rule_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_set_application_rule_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_set_application_rule_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_guild_applications_count_args {
  static $_TSPEC;

  public $tid = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_guild_applications_count_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_guild_applications_count_args');
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::STRING, 1);
      $xfer += $output->writeString($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 2);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_guild_applications_count_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_guild_applications_count_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_guild_applications_count_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_guild_applications_per_page_args {
  static $_TSPEC;

  public $tid = null;
  public $columns = null;
  public $page = null;
  public $per_page = null;
  public $order_by = null;
  public $descending = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'per_page',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'order_by',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'descending',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['columns'])) {
        $this->columns = $vals['columns'];
      }
      if (isset($vals['page'])) {
        $this->page = $vals['page'];
      }
      if (isset($vals['per_page'])) {
        $this->per_page = $vals['per_page'];
      }
      if (isset($vals['order_by'])) {
        $this->order_by = $vals['order_by'];
      }
      if (isset($vals['descending'])) {
        $this->descending = $vals['descending'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_guild_applications_per_page_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->columns = array();
            $_size264 = 0;
            $_etype267 = 0;
            $xfer += $input->readListBegin($_etype267, $_size264);
            for ($_i268 = 0; $_i268 < $_size264; ++$_i268)
            {
              $elem269 = null;
              $xfer += $input->readString($elem269);
              $this->columns []= $elem269;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->per_page);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->order_by);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->descending);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_guild_applications_per_page_args');
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::STRING, 1);
      $xfer += $output->writeString($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->columns !== null) {
      if (!is_array($this->columns)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('columns', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->columns));
        {
          foreach ($this->columns as $iter270)
          {
            $xfer += $output->writeString($iter270);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page !== null) {
      $xfer += $output->writeFieldBegin('page', TType::I32, 3);
      $xfer += $output->writeI32($this->page);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->per_page !== null) {
      $xfer += $output->writeFieldBegin('per_page', TType::I32, 4);
      $xfer += $output->writeI32($this->per_page);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order_by !== null) {
      $xfer += $output->writeFieldBegin('order_by', TType::STRING, 5);
      $xfer += $output->writeString($this->order_by);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descending !== null) {
      $xfer += $output->writeFieldBegin('descending', TType::BOOL, 6);
      $xfer += $output->writeBool($this->descending);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 7);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_guild_applications_per_page_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\query_resultset',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_guild_applications_per_page_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\webdb_gateway_service\query_resultset();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_guild_applications_per_page_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_guild_applications_by_uids_args {
  static $_TSPEC;

  public $tid = null;
  public $uids = null;
  public $columns = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['uids'])) {
        $this->uids = $vals['uids'];
      }
      if (isset($vals['columns'])) {
        $this->columns = $vals['columns'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_guild_applications_by_uids_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->uids = array();
            $_size271 = 0;
            $_etype274 = 0;
            $xfer += $input->readListBegin($_etype274, $_size271);
            for ($_i275 = 0; $_i275 < $_size271; ++$_i275)
            {
              $elem276 = null;
              $xfer += $input->readString($elem276);
              $this->uids []= $elem276;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->columns = array();
            $_size277 = 0;
            $_etype280 = 0;
            $xfer += $input->readListBegin($_etype280, $_size277);
            for ($_i281 = 0; $_i281 < $_size277; ++$_i281)
            {
              $elem282 = null;
              $xfer += $input->readString($elem282);
              $this->columns []= $elem282;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_guild_applications_by_uids_args');
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::STRING, 1);
      $xfer += $output->writeString($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uids !== null) {
      if (!is_array($this->uids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('uids', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->uids));
        {
          foreach ($this->uids as $iter283)
          {
            $xfer += $output->writeString($iter283);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->columns !== null) {
      if (!is_array($this->columns)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('columns', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->columns));
        {
          foreach ($this->columns as $iter284)
          {
            $xfer += $output->writeString($iter284);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 4);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_guild_applications_by_uids_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\query_resultset',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_guild_applications_by_uids_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\webdb_gateway_service\query_resultset();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_guild_applications_by_uids_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_handle_applications_args {
  static $_TSPEC;

  public $tid = null;
  public $uids = null;
  public $new_role = null;
  public $admin_uid = null;
  public $admin_nick = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'new_role',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'admin_uid',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'admin_nick',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['uids'])) {
        $this->uids = $vals['uids'];
      }
      if (isset($vals['new_role'])) {
        $this->new_role = $vals['new_role'];
      }
      if (isset($vals['admin_uid'])) {
        $this->admin_uid = $vals['admin_uid'];
      }
      if (isset($vals['admin_nick'])) {
        $this->admin_nick = $vals['admin_nick'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_handle_applications_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->uids = array();
            $_size285 = 0;
            $_etype288 = 0;
            $xfer += $input->readListBegin($_etype288, $_size285);
            for ($_i289 = 0; $_i289 < $_size285; ++$_i289)
            {
              $elem290 = null;
              $xfer += $input->readString($elem290);
              $this->uids []= $elem290;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->new_role);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->admin_uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->admin_nick);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_handle_applications_args');
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::STRING, 1);
      $xfer += $output->writeString($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uids !== null) {
      if (!is_array($this->uids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('uids', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->uids));
        {
          foreach ($this->uids as $iter291)
          {
            $xfer += $output->writeString($iter291);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->new_role !== null) {
      $xfer += $output->writeFieldBegin('new_role', TType::STRING, 3);
      $xfer += $output->writeString($this->new_role);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->admin_uid !== null) {
      $xfer += $output->writeFieldBegin('admin_uid', TType::STRING, 4);
      $xfer += $output->writeString($this->admin_uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->admin_nick !== null) {
      $xfer += $output->writeFieldBegin('admin_nick', TType::STRING, 5);
      $xfer += $output->writeString($this->admin_nick);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 6);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_handle_applications_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_handle_applications_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_handle_applications_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_guild_exited_members_count_args {
  static $_TSPEC;

  public $tid = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_guild_exited_members_count_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_guild_exited_members_count_args');
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::STRING, 1);
      $xfer += $output->writeString($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 2);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_guild_exited_members_count_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_guild_exited_members_count_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_guild_exited_members_count_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_guild_exited_members_per_page_args {
  static $_TSPEC;

  public $tid = null;
  public $columns = null;
  public $page = null;
  public $per_page = null;
  public $order_by = null;
  public $descending = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'per_page',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'order_by',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'descending',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['columns'])) {
        $this->columns = $vals['columns'];
      }
      if (isset($vals['page'])) {
        $this->page = $vals['page'];
      }
      if (isset($vals['per_page'])) {
        $this->per_page = $vals['per_page'];
      }
      if (isset($vals['order_by'])) {
        $this->order_by = $vals['order_by'];
      }
      if (isset($vals['descending'])) {
        $this->descending = $vals['descending'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_guild_exited_members_per_page_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->columns = array();
            $_size292 = 0;
            $_etype295 = 0;
            $xfer += $input->readListBegin($_etype295, $_size292);
            for ($_i296 = 0; $_i296 < $_size292; ++$_i296)
            {
              $elem297 = null;
              $xfer += $input->readString($elem297);
              $this->columns []= $elem297;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->per_page);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->order_by);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->descending);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_guild_exited_members_per_page_args');
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::STRING, 1);
      $xfer += $output->writeString($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->columns !== null) {
      if (!is_array($this->columns)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('columns', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->columns));
        {
          foreach ($this->columns as $iter298)
          {
            $xfer += $output->writeString($iter298);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page !== null) {
      $xfer += $output->writeFieldBegin('page', TType::I32, 3);
      $xfer += $output->writeI32($this->page);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->per_page !== null) {
      $xfer += $output->writeFieldBegin('per_page', TType::I32, 4);
      $xfer += $output->writeI32($this->per_page);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order_by !== null) {
      $xfer += $output->writeFieldBegin('order_by', TType::STRING, 5);
      $xfer += $output->writeString($this->order_by);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descending !== null) {
      $xfer += $output->writeFieldBegin('descending', TType::BOOL, 6);
      $xfer += $output->writeBool($this->descending);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 7);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_guild_exited_members_per_page_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\query_resultset',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_guild_exited_members_per_page_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\webdb_gateway_service\query_resultset();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_guild_exited_members_per_page_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_guild_exited_members_by_uids_args {
  static $_TSPEC;

  public $tid = null;
  public $uids = null;
  public $columns = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['uids'])) {
        $this->uids = $vals['uids'];
      }
      if (isset($vals['columns'])) {
        $this->columns = $vals['columns'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_guild_exited_members_by_uids_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->uids = array();
            $_size299 = 0;
            $_etype302 = 0;
            $xfer += $input->readListBegin($_etype302, $_size299);
            for ($_i303 = 0; $_i303 < $_size299; ++$_i303)
            {
              $elem304 = null;
              $xfer += $input->readString($elem304);
              $this->uids []= $elem304;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->columns = array();
            $_size305 = 0;
            $_etype308 = 0;
            $xfer += $input->readListBegin($_etype308, $_size305);
            for ($_i309 = 0; $_i309 < $_size305; ++$_i309)
            {
              $elem310 = null;
              $xfer += $input->readString($elem310);
              $this->columns []= $elem310;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_guild_exited_members_by_uids_args');
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::STRING, 1);
      $xfer += $output->writeString($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uids !== null) {
      if (!is_array($this->uids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('uids', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->uids));
        {
          foreach ($this->uids as $iter311)
          {
            $xfer += $output->writeString($iter311);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->columns !== null) {
      if (!is_array($this->columns)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('columns', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->columns));
        {
          foreach ($this->columns as $iter312)
          {
            $xfer += $output->writeString($iter312);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 4);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_guild_exited_members_by_uids_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\query_resultset',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_guild_exited_members_by_uids_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\webdb_gateway_service\query_resultset();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_guild_exited_members_by_uids_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_set_apply_guild_notify_args {
  static $_TSPEC;

  public $tid = null;
  public $isNotify = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'isNotify',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['isNotify'])) {
        $this->isNotify = $vals['isNotify'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_set_apply_guild_notify_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isNotify);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_set_apply_guild_notify_args');
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::STRING, 1);
      $xfer += $output->writeString($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isNotify !== null) {
      $xfer += $output->writeFieldBegin('isNotify', TType::I32, 2);
      $xfer += $output->writeI32($this->isNotify);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 3);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_set_apply_guild_notify_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_set_apply_guild_notify_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_set_apply_guild_notify_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_apply_guild_notify_args {
  static $_TSPEC;

  public $tid = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_apply_guild_notify_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_apply_guild_notify_args');
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::STRING, 1);
      $xfer += $output->writeString($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 2);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_apply_guild_notify_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_apply_guild_notify_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_apply_guild_notify_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_create_session_args {
  static $_TSPEC;

  public $sid = null;
  public $name = null;
  public $isp = null;
  public $blimit = null;
  public $bpub = null;
  public $typestr = null;
  public $type = null;
  public $uid = null;
  public $ip = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'isp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'blimit',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'bpub',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'typestr',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['isp'])) {
        $this->isp = $vals['isp'];
      }
      if (isset($vals['blimit'])) {
        $this->blimit = $vals['blimit'];
      }
      if (isset($vals['bpub'])) {
        $this->bpub = $vals['bpub'];
      }
      if (isset($vals['typestr'])) {
        $this->typestr = $vals['typestr'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_create_session_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->isp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->blimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bpub);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->typestr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_create_session_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isp !== null) {
      $xfer += $output->writeFieldBegin('isp', TType::STRING, 3);
      $xfer += $output->writeString($this->isp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->blimit !== null) {
      $xfer += $output->writeFieldBegin('blimit', TType::STRING, 4);
      $xfer += $output->writeString($this->blimit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bpub !== null) {
      $xfer += $output->writeFieldBegin('bpub', TType::STRING, 5);
      $xfer += $output->writeString($this->bpub);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->typestr !== null) {
      $xfer += $output->writeFieldBegin('typestr', TType::STRING, 6);
      $xfer += $output->writeString($this->typestr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 7);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 8);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 9);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 10);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_create_session_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_create_session_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_create_session_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_create_session2_args {
  static $_TSPEC;

  public $sid = null;
  public $name = null;
  public $isp = null;
  public $blimit = null;
  public $bpub = null;
  public $typestr = null;
  public $type = null;
  public $uid = null;
  public $ip = null;
  public $area = null;
  public $language = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'isp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'blimit',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'bpub',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'typestr',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'area',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'language',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['isp'])) {
        $this->isp = $vals['isp'];
      }
      if (isset($vals['blimit'])) {
        $this->blimit = $vals['blimit'];
      }
      if (isset($vals['bpub'])) {
        $this->bpub = $vals['bpub'];
      }
      if (isset($vals['typestr'])) {
        $this->typestr = $vals['typestr'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
      if (isset($vals['area'])) {
        $this->area = $vals['area'];
      }
      if (isset($vals['language'])) {
        $this->language = $vals['language'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_create_session2_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->isp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->blimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bpub);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->typestr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->area);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->language);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_create_session2_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isp !== null) {
      $xfer += $output->writeFieldBegin('isp', TType::STRING, 3);
      $xfer += $output->writeString($this->isp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->blimit !== null) {
      $xfer += $output->writeFieldBegin('blimit', TType::STRING, 4);
      $xfer += $output->writeString($this->blimit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bpub !== null) {
      $xfer += $output->writeFieldBegin('bpub', TType::STRING, 5);
      $xfer += $output->writeString($this->bpub);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->typestr !== null) {
      $xfer += $output->writeFieldBegin('typestr', TType::STRING, 6);
      $xfer += $output->writeString($this->typestr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 7);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 8);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 9);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->area !== null) {
      $xfer += $output->writeFieldBegin('area', TType::I32, 10);
      $xfer += $output->writeI32($this->area);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->language !== null) {
      $xfer += $output->writeFieldBegin('language', TType::I32, 11);
      $xfer += $output->writeI32($this->language);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_create_session2_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_create_session2_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_create_session2_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_list_args {
  static $_TSPEC;

  public $uid = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_list_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_list_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 2);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_session_list_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\query_resultset',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_session_list_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Services\webdb_gateway_service\query_resultset();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_session_list_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_active_uid_args {
  static $_TSPEC;

  public $passport = null;
  public $sha1Passwd = null;
  public $ip = null;
  public $nick = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'passport',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'sha1Passwd',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'nick',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['passport'])) {
        $this->passport = $vals['passport'];
      }
      if (isset($vals['sha1Passwd'])) {
        $this->sha1Passwd = $vals['sha1Passwd'];
      }
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
      if (isset($vals['nick'])) {
        $this->nick = $vals['nick'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_active_uid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->passport);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sha1Passwd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nick);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_active_uid_args');
    if ($this->passport !== null) {
      $xfer += $output->writeFieldBegin('passport', TType::STRING, 1);
      $xfer += $output->writeString($this->passport);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sha1Passwd !== null) {
      $xfer += $output->writeFieldBegin('sha1Passwd', TType::STRING, 2);
      $xfer += $output->writeString($this->sha1Passwd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 3);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nick !== null) {
      $xfer += $output->writeFieldBegin('nick', TType::STRING, 4);
      $xfer += $output->writeString($this->nick);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 5);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_active_uid_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_active_uid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_active_uid_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_active_uid_and_imid_args {
  static $_TSPEC;

  public $passport = null;
  public $sha1Passwd = null;
  public $ip = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'passport',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'sha1Passwd',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['passport'])) {
        $this->passport = $vals['passport'];
      }
      if (isset($vals['sha1Passwd'])) {
        $this->sha1Passwd = $vals['sha1Passwd'];
      }
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_active_uid_and_imid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->passport);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sha1Passwd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_active_uid_and_imid_args');
    if ($this->passport !== null) {
      $xfer += $output->writeFieldBegin('passport', TType::STRING, 1);
      $xfer += $output->writeString($this->passport);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sha1Passwd !== null) {
      $xfer += $output->writeFieldBegin('sha1Passwd', TType::STRING, 2);
      $xfer += $output->writeString($this->sha1Passwd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 3);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 4);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_active_uid_and_imid_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_active_uid_and_imid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size313 = 0;
            $_ktype314 = 0;
            $_vtype315 = 0;
            $xfer += $input->readMapBegin($_ktype314, $_vtype315, $_size313);
            for ($_i317 = 0; $_i317 < $_size313; ++$_i317)
            {
              $key318 = '';
              $val319 = '';
              $xfer += $input->readString($key318);
              $xfer += $input->readString($val319);
              $this->success[$key318] = $val319;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_active_uid_and_imid_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter320 => $viter321)
          {
            $xfer += $output->writeString($kiter320);
            $xfer += $output->writeString($viter321);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_check_global_ban_args {
  static $_TSPEC;

  public $uid = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_check_global_ban_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_check_global_ban_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 2);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_check_global_ban_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_check_global_ban_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_check_global_ban_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_check_cookie_args {
  static $_TSPEC;

  public $cookie = null;
  public $uid = null;
  public $expirtime = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cookie',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'expirtime',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cookie'])) {
        $this->cookie = $vals['cookie'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['expirtime'])) {
        $this->expirtime = $vals['expirtime'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_check_cookie_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cookie);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->expirtime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_check_cookie_args');
    if ($this->cookie !== null) {
      $xfer += $output->writeFieldBegin('cookie', TType::STRING, 1);
      $xfer += $output->writeString($this->cookie);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 2);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expirtime !== null) {
      $xfer += $output->writeFieldBegin('expirtime', TType::STRING, 3);
      $xfer += $output->writeString($this->expirtime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 4);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_check_cookie_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_check_cookie_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_check_cookie_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_enable_autio_high_quality_args {
  static $_TSPEC;

  public $sid = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_enable_autio_high_quality_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_enable_autio_high_quality_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 2);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_enable_autio_high_quality_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_enable_autio_high_quality_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_enable_autio_high_quality_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_erase_subsession_admin_args {
  static $_TSPEC;

  public $sid = null;
  public $uids = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['uids'])) {
        $this->uids = $vals['uids'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_erase_subsession_admin_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->uids = array();
            $_size322 = 0;
            $_etype325 = 0;
            $xfer += $input->readListBegin($_etype325, $_size322);
            for ($_i326 = 0; $_i326 < $_size322; ++$_i326)
            {
              $elem327 = null;
              $xfer += $input->readString($elem327);
              $this->uids []= $elem327;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_erase_subsession_admin_args');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 1);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uids !== null) {
      if (!is_array($this->uids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('uids', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->uids));
        {
          foreach ($this->uids as $iter328)
          {
            $xfer += $output->writeString($iter328);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 3);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_erase_subsession_admin_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_erase_subsession_admin_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_erase_subsession_admin_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_set_subsession_order_args {
  static $_TSPEC;

  public $pid = null;
  public $sids = null;
  public $orders = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'sids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'orders',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pid'])) {
        $this->pid = $vals['pid'];
      }
      if (isset($vals['sids'])) {
        $this->sids = $vals['sids'];
      }
      if (isset($vals['orders'])) {
        $this->orders = $vals['orders'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_set_subsession_order_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->sids = array();
            $_size329 = 0;
            $_etype332 = 0;
            $xfer += $input->readListBegin($_etype332, $_size329);
            for ($_i333 = 0; $_i333 < $_size329; ++$_i333)
            {
              $elem334 = null;
              $xfer += $input->readString($elem334);
              $this->sids []= $elem334;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->orders = array();
            $_size335 = 0;
            $_etype338 = 0;
            $xfer += $input->readListBegin($_etype338, $_size335);
            for ($_i339 = 0; $_i339 < $_size335; ++$_i339)
            {
              $elem340 = null;
              $xfer += $input->readString($elem340);
              $this->orders []= $elem340;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_set_subsession_order_args');
    if ($this->pid !== null) {
      $xfer += $output->writeFieldBegin('pid', TType::STRING, 1);
      $xfer += $output->writeString($this->pid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sids !== null) {
      if (!is_array($this->sids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sids', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->sids));
        {
          foreach ($this->sids as $iter341)
          {
            $xfer += $output->writeString($iter341);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orders !== null) {
      if (!is_array($this->orders)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orders', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->orders));
        {
          foreach ($this->orders as $iter342)
          {
            $xfer += $output->writeString($iter342);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 4);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_set_subsession_order_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_set_subsession_order_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_set_subsession_order_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_user_psw_args {
  static $_TSPEC;

  public $uid = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_user_psw_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_user_psw_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 2);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_get_user_psw_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_get_user_psw_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_get_user_psw_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_reset_account_by_passport_args {
  static $_TSPEC;

  public $account = null;
  public $passport = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'account',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'passport',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['account'])) {
        $this->account = $vals['account'];
      }
      if (isset($vals['passport'])) {
        $this->passport = $vals['passport'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_reset_account_by_passport_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->account);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->passport);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_reset_account_by_passport_args');
    if ($this->account !== null) {
      $xfer += $output->writeFieldBegin('account', TType::STRING, 1);
      $xfer += $output->writeString($this->account);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->passport !== null) {
      $xfer += $output->writeFieldBegin('passport', TType::STRING, 2);
      $xfer += $output->writeString($this->passport);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 3);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_reset_account_by_passport_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_reset_account_by_passport_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_reset_account_by_passport_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_reset_passwd_by_passport_args {
  static $_TSPEC;

  public $passwd = null;
  public $passport = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'passwd',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'passport',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['passwd'])) {
        $this->passwd = $vals['passwd'];
      }
      if (isset($vals['passport'])) {
        $this->passport = $vals['passport'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_reset_passwd_by_passport_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->passwd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->passport);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_reset_passwd_by_passport_args');
    if ($this->passwd !== null) {
      $xfer += $output->writeFieldBegin('passwd', TType::STRING, 1);
      $xfer += $output->writeString($this->passwd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->passport !== null) {
      $xfer += $output->writeFieldBegin('passport', TType::STRING, 2);
      $xfer += $output->writeString($this->passport);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 3);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_reset_passwd_by_passport_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_reset_passwd_by_passport_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_reset_passwd_by_passport_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_reset_passwd_by_passport_ip_args {
  static $_TSPEC;

  public $passwd = null;
  public $passport = null;
  public $ip = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'passwd',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'passport',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['passwd'])) {
        $this->passwd = $vals['passwd'];
      }
      if (isset($vals['passport'])) {
        $this->passport = $vals['passport'];
      }
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_reset_passwd_by_passport_ip_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->passwd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->passport);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_reset_passwd_by_passport_ip_args');
    if ($this->passwd !== null) {
      $xfer += $output->writeFieldBegin('passwd', TType::STRING, 1);
      $xfer += $output->writeString($this->passwd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->passport !== null) {
      $xfer += $output->writeFieldBegin('passport', TType::STRING, 2);
      $xfer += $output->writeString($this->passport);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 3);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 4);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_reset_passwd_by_passport_ip_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_reset_passwd_by_passport_ip_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_reset_passwd_by_passport_ip_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_resume_members_args {
  static $_TSPEC;

  public $tid = null;
  public $uids = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['uids'])) {
        $this->uids = $vals['uids'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_resume_members_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->uids = array();
            $_size343 = 0;
            $_etype346 = 0;
            $xfer += $input->readListBegin($_etype346, $_size343);
            for ($_i347 = 0; $_i347 < $_size343; ++$_i347)
            {
              $elem348 = null;
              $xfer += $input->readString($elem348);
              $this->uids []= $elem348;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_resume_members_args');
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::STRING, 1);
      $xfer += $output->writeString($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uids !== null) {
      if (!is_array($this->uids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('uids', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->uids));
        {
          foreach ($this->uids as $iter349)
          {
            $xfer += $output->writeString($iter349);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 3);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_resume_members_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_resume_members_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_resume_members_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_validate_user_pwd_args {
  static $_TSPEC;

  public $passport = null;
  public $shapasswd = null;
  public $yzm_auth = null;
  public $ip = null;
  public $app_type = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'passport',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'shapasswd',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'yzm_auth',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'app_type',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['passport'])) {
        $this->passport = $vals['passport'];
      }
      if (isset($vals['shapasswd'])) {
        $this->shapasswd = $vals['shapasswd'];
      }
      if (isset($vals['yzm_auth'])) {
        $this->yzm_auth = $vals['yzm_auth'];
      }
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
      if (isset($vals['app_type'])) {
        $this->app_type = $vals['app_type'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_validate_user_pwd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->passport);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->shapasswd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->yzm_auth);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->app_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_validate_user_pwd_args');
    if ($this->passport !== null) {
      $xfer += $output->writeFieldBegin('passport', TType::STRING, 1);
      $xfer += $output->writeString($this->passport);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shapasswd !== null) {
      $xfer += $output->writeFieldBegin('shapasswd', TType::STRING, 2);
      $xfer += $output->writeString($this->shapasswd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yzm_auth !== null) {
      $xfer += $output->writeFieldBegin('yzm_auth', TType::STRING, 3);
      $xfer += $output->writeString($this->yzm_auth);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 4);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->app_type !== null) {
      $xfer += $output->writeFieldBegin('app_type', TType::STRING, 5);
      $xfer += $output->writeString($this->app_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 6);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_validate_user_pwd_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_validate_user_pwd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_validate_user_pwd_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_validate_user_pwd_by_uid_args {
  static $_TSPEC;

  public $uid = null;
  public $shapasswd = null;
  public $time = null;
  public $ip = null;
  public $app_type = null;
  public $cl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'shapasswd',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'time',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'app_type',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'cl',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['shapasswd'])) {
        $this->shapasswd = $vals['shapasswd'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
      if (isset($vals['app_type'])) {
        $this->app_type = $vals['app_type'];
      }
      if (isset($vals['cl'])) {
        $this->cl = $vals['cl'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_validate_user_pwd_by_uid_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->shapasswd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->app_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_validate_user_pwd_by_uid_args');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shapasswd !== null) {
      $xfer += $output->writeFieldBegin('shapasswd', TType::STRING, 2);
      $xfer += $output->writeString($this->shapasswd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::STRING, 3);
      $xfer += $output->writeString($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 4);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->app_type !== null) {
      $xfer += $output->writeFieldBegin('app_type', TType::STRING, 5);
      $xfer += $output->writeString($this->app_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cl !== null) {
      $xfer += $output->writeFieldBegin('cl', TType::I32, 6);
      $xfer += $output->writeI32($this->cl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_service_validate_user_pwd_by_uid_result {
  static $_TSPEC;

  public $success = null;
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Services\webdb_gateway_service\service_exception',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'webdb_gateway_service_validate_user_pwd_by_uid_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Services\webdb_gateway_service\service_exception();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('webdb_gateway_service_validate_user_pwd_by_uid_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class webdb_gateway_serviceProcessor extends \Services\webdb_gateway_service\webdb_gateway_base_serviceProcessor {
  public function __construct($handler) {
    parent::__construct($handler);
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_get_custom_logo($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_custom_logo_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_custom_logo_result();
    $result->success = $this->handler_->get_custom_logo($args->uid);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_custom_logo', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_custom_logo', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_uid($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_uid_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_uid_result();
    try {
      $result->success = $this->handler_->get_uid($args->passport, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_uid', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_uid', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_uid_by_passport($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_uid_by_passport_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_uid_by_passport_result();
    try {
      $result->success = $this->handler_->get_uid_by_passport($args->passport, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_uid_by_passport', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_uid_by_passport', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_uid_by_account($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_uid_by_account_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_uid_by_account_result();
    try {
      $result->success = $this->handler_->get_uid_by_account($args->account, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_uid_by_account', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_uid_by_account', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_user_info($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_user_info_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_user_info_result();
    try {
      $result->success = $this->handler_->get_user_info($args->uid, $args->columns, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_user_info', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_user_info', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_batch_get_user_info($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_user_info_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_user_info_result();
    try {
      $result->success = $this->handler_->batch_get_user_info($args->uids, $args->columns, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'batch_get_user_info', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('batch_get_user_info', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_create_user_info($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_create_user_info_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_create_user_info_result();
    try {
      $result->success = $this->handler_->create_user_info($args->uid, $args->nick, $args->gender, $args->area);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'create_user_info', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('create_user_info', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_settle_guild_info($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_settle_guild_info_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_settle_guild_info_result();
    $result->success = $this->handler_->get_settle_guild_info($args->uid);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_settle_guild_info', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_settle_guild_info', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_validate_session_owner($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_validate_session_owner_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_validate_session_owner_result();
    try {
      $result->success = $this->handler_->validate_session_owner($args->sid, $args->uid, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'validate_session_owner', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('validate_session_owner', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_session_info($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_info_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_info_result();
    try {
      $result->success = $this->handler_->get_session_info($args->sid, $args->columns, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_session_info', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_session_info', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_batch_get_session_info($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_session_info_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_session_info_result();
    try {
      $result->success = $this->handler_->batch_get_session_info($args->sids, $args->columns, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'batch_get_session_info', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('batch_get_session_info', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_session_template($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_template_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_template_result();
    try {
      $result->success = $this->handler_->get_session_template($args->tid, $args->sid);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_session_template', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_session_template', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_session_jiedai_description($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_jiedai_description_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_jiedai_description_result();
    try {
      $result->success = $this->handler_->get_session_jiedai_description($args->tid);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_session_jiedai_description', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_session_jiedai_description', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_session_introduce($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_introduce_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_introduce_result();
    try {
      $result->success = $this->handler_->get_session_introduce($args->tid);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_session_introduce', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_session_introduce', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_set_session_introduce($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_set_session_introduce_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_set_session_introduce_result();
    try {
      $result->success = $this->handler_->set_session_introduce($args->tid, $args->introduce);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'set_session_introduce', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('set_session_introduce', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_session_score($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_score_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_score_result();
    try {
      $result->success = $this->handler_->get_session_score($args->sid, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_session_score', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_session_score', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_session_logo_url($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_logo_url_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_logo_url_result();
    try {
      $result->success = $this->handler_->get_session_logo_url($args->sid, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_session_logo_url', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_session_logo_url', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_batch_get_session_logo_url($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_session_logo_url_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_session_logo_url_result();
    try {
      $result->success = $this->handler_->batch_get_session_logo_url($args->sids, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'batch_get_session_logo_url', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('batch_get_session_logo_url', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_session_asid($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_asid_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_asid_result();
    try {
      $result->success = $this->handler_->get_session_asid($args->sid, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_session_asid', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_session_asid', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_batch_get_session_asid($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_session_asid_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_session_asid_result();
    try {
      $result->success = $this->handler_->batch_get_session_asid($args->sids, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'batch_get_session_asid', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('batch_get_session_asid', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_set_session_password($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_set_session_password_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_set_session_password_result();
    try {
      $result->success = $this->handler_->set_session_password($args->sid, $args->pwd, $args->new_pwd, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'set_session_password', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('set_session_password', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_erase_session_password($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_erase_session_password_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_erase_session_password_result();
    try {
      $result->success = $this->handler_->erase_session_password($args->sid, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'erase_session_password', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('erase_session_password', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_sid_by_asid($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_sid_by_asid_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_sid_by_asid_result();
    try {
      $result->success = $this->handler_->get_sid_by_asid($args->asid, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_sid_by_asid', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_sid_by_asid', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_batch_get_sub_sessions_info($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_sub_sessions_info_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_sub_sessions_info_result();
    try {
      $result->success = $this->handler_->batch_get_sub_sessions_info($args->tid, $args->pid, $args->columns, $args->full_recursive, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'batch_get_sub_sessions_info', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('batch_get_sub_sessions_info', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_sub_channel_list($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_sub_channel_list_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_sub_channel_list_result();
    try {
      $result->success = $this->handler_->get_sub_channel_list($args->sid, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_sub_channel_list', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_sub_channel_list', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_sub_sessions_count($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_sub_sessions_count_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_sub_sessions_count_result();
    try {
      $result->success = $this->handler_->get_sub_sessions_count($args->tid, $args->pid, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_sub_sessions_count', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_sub_sessions_count', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_validate_sub_session($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_validate_sub_session_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_validate_sub_session_result();
    try {
      $result->success = $this->handler_->validate_sub_session($args->tid, $args->pid, $args->sid);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'validate_sub_session', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('validate_sub_session', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_validate_sub_session_manager($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_validate_sub_session_manager_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_validate_sub_session_manager_result();
    try {
      $result->success = $this->handler_->validate_sub_session_manager($args->tid, $args->sid, $args->uid);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'validate_sub_session_manager', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('validate_sub_session_manager', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_set_sub_sessions_order($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_set_sub_sessions_order_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_set_sub_sessions_order_result();
    try {
      $result->success = $this->handler_->set_sub_sessions_order($args->tid, $args->sub_sessions_sort, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'set_sub_sessions_order', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('set_sub_sessions_order', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_favorite_session_list($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_favorite_session_list_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_favorite_session_list_result();
    try {
      $result->success = $this->handler_->get_favorite_session_list($args->uid, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_favorite_session_list', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_favorite_session_list', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_session_count_by_owner($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_count_by_owner_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_count_by_owner_result();
    try {
      $result->success = $this->handler_->get_session_count_by_owner($args->uid, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_session_count_by_owner', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_session_count_by_owner', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_session_list_by_ownerid($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_list_by_ownerid_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_list_by_ownerid_result();
    try {
      $result->success = $this->handler_->get_session_list_by_ownerid($args->ownerid, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_session_list_by_ownerid', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_session_list_by_ownerid', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_sessions_by_owner($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_sessions_by_owner_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_sessions_by_owner_result();
    try {
      $result->success = $this->handler_->get_sessions_by_owner($args->ownerid, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_sessions_by_owner', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_sessions_by_owner', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_session_member_info($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_member_info_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_member_info_result();
    try {
      $result->success = $this->handler_->get_session_member_info($args->sid, $args->uid, $args->columns, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_session_member_info', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_session_member_info', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_batch_get_member_info_by_session($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_member_info_by_session_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_member_info_by_session_result();
    try {
      $result->success = $this->handler_->batch_get_member_info_by_session($args->uid, $args->sids, $args->columns, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'batch_get_member_info_by_session', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('batch_get_member_info_by_session', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_batch_get_member_info_by_user($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_member_info_by_user_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_member_info_by_user_result();
    try {
      $result->success = $this->handler_->batch_get_member_info_by_user($args->sid, $args->uids, $args->columns, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'batch_get_member_info_by_user', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('batch_get_member_info_by_user', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_batch_get_role_by_memberid($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_role_by_memberid_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_role_by_memberid_result();
    try {
      $result->success = $this->handler_->batch_get_role_by_memberid($args->sid, $args->uids, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'batch_get_role_by_memberid', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('batch_get_role_by_memberid', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_session_member_count_by_role($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_member_count_by_role_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_member_count_by_role_result();
    try {
      $result->success = $this->handler_->get_session_member_count_by_role($args->sid, $args->roles, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_session_member_count_by_role', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_session_member_count_by_role', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_session_regular_member_count($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_regular_member_count_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_regular_member_count_result();
    try {
      $result->success = $this->handler_->get_session_regular_member_count($args->sid, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_session_regular_member_count', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_session_regular_member_count', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_batch_set_session_member_role($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_batch_set_session_member_role_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_batch_set_session_member_role_result();
    try {
      $result->success = $this->handler_->batch_set_session_member_role($args->sid, $args->uids, $args->role, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'batch_set_session_member_role', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('batch_set_session_member_role', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_batch_erase_subsession_manager($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_batch_erase_subsession_manager_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_batch_erase_subsession_manager_result();
    try {
      $result->success = $this->handler_->batch_erase_subsession_manager($args->sid, $args->uids, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'batch_erase_subsession_manager', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('batch_erase_subsession_manager', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_batch_erase_session_member($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_batch_erase_session_member_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_batch_erase_session_member_result();
    try {
      $result->success = $this->handler_->batch_erase_session_member($args->sid, $args->uids, $args->admin_uid, $args->admin_nick, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'batch_erase_session_member', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('batch_erase_session_member', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_session_list_count_by_role($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_list_count_by_role_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_list_count_by_role_result();
    try {
      $result->success = $this->handler_->get_session_list_count_by_role($args->uid, $args->role, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_session_list_count_by_role', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_session_list_count_by_role', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_session_list_by_role($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_list_by_role_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_list_by_role_result();
    try {
      $result->success = $this->handler_->get_session_list_by_role($args->uid, $args->role, $args->page, $args->per_page, $args->order_by, $args->descending, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_session_list_by_role', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_session_list_by_role', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_batch_get_session_list_by_role($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_session_list_by_role_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_batch_get_session_list_by_role_result();
    try {
      $result->success = $this->handler_->batch_get_session_list_by_role($args->uid, $args->roles, $args->order_by, $args->descending, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'batch_get_session_list_by_role', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('batch_get_session_list_by_role', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_session_members_by_role($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_members_by_role_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_members_by_role_result();
    try {
      $result->success = $this->handler_->get_session_members_by_role($args->sid, $args->columns, $args->role, $args->page, $args->per_page, $args->order_by, $args->descending, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_session_members_by_role', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_session_members_by_role', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_session_sub_managers($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_sub_managers_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_sub_managers_result();
    try {
      $result->success = $this->handler_->get_session_sub_managers($args->tid, $args->columns);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_session_sub_managers', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_session_sub_managers', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_yy_admin_type($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_yy_admin_type_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_yy_admin_type_result();
    try {
      $result->success = $this->handler_->get_yy_admin_type($args->uid, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_yy_admin_type', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_yy_admin_type', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_session_ip_blacklist_count($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_ip_blacklist_count_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_ip_blacklist_count_result();
    try {
      $result->success = $this->handler_->get_session_ip_blacklist_count($args->sid, $args->date_from, $args->date_to, $args->reason, $args->uid, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_session_ip_blacklist_count', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_session_ip_blacklist_count', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_session_ip_blacklist($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_ip_blacklist_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_ip_blacklist_result();
    try {
      $result->success = $this->handler_->get_session_ip_blacklist($args->sid, $args->date_from, $args->date_to, $args->reason, $args->uid, $args->columns, $args->page, $args->per_page, $args->order_by, $args->descending, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_session_ip_blacklist', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_session_ip_blacklist', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_session_id_blacklist_count($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_id_blacklist_count_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_id_blacklist_count_result();
    try {
      $result->success = $this->handler_->get_session_id_blacklist_count($args->sid, $args->date_from, $args->date_to, $args->reason, $args->uid, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_session_id_blacklist_count', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_session_id_blacklist_count', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_session_id_blacklist($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_id_blacklist_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_id_blacklist_result();
    try {
      $result->success = $this->handler_->get_session_id_blacklist($args->sid, $args->date_from, $args->date_to, $args->reason, $args->uid, $args->columns, $args->page, $args->per_page, $args->order_by, $args->descending, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_session_id_blacklist', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_session_id_blacklist', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_erase_session_blacklist($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_erase_session_blacklist_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_erase_session_blacklist_result();
    try {
      $result->success = $this->handler_->erase_session_blacklist($args->sid, $args->ban_type, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'erase_session_blacklist', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('erase_session_blacklist', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_batch_erase_session_blacklist_element($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_batch_erase_session_blacklist_element_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_batch_erase_session_blacklist_element_result();
    try {
      $result->success = $this->handler_->batch_erase_session_blacklist_element($args->sid, $args->ban_types, $args->uids_ips, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'batch_erase_session_blacklist_element', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('batch_erase_session_blacklist_element', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_set_autio_high_quality($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_set_autio_high_quality_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_set_autio_high_quality_result();
    try {
      $result->success = $this->handler_->set_autio_high_quality($args->sid, $args->flag, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'set_autio_high_quality', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('set_autio_high_quality', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_disable_audio_high_quality($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_disable_audio_high_quality_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_disable_audio_high_quality_result();
    try {
      $result->success = $this->handler_->disable_audio_high_quality($args->sid, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'disable_audio_high_quality', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('disable_audio_high_quality', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_session_gyz($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_gyz_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_gyz_result();
    try {
      $result->success = $this->handler_->get_session_gyz($args->sid, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_session_gyz', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_session_gyz', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_set_application_rule($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_set_application_rule_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_set_application_rule_result();
    try {
      $result->success = $this->handler_->set_application_rule($args->sid, $args->request_jifen, $args->app_instru, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'set_application_rule', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('set_application_rule', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_guild_applications_count($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_guild_applications_count_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_guild_applications_count_result();
    try {
      $result->success = $this->handler_->get_guild_applications_count($args->tid, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_guild_applications_count', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_guild_applications_count', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_guild_applications_per_page($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_guild_applications_per_page_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_guild_applications_per_page_result();
    try {
      $result->success = $this->handler_->get_guild_applications_per_page($args->tid, $args->columns, $args->page, $args->per_page, $args->order_by, $args->descending, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_guild_applications_per_page', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_guild_applications_per_page', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_guild_applications_by_uids($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_guild_applications_by_uids_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_guild_applications_by_uids_result();
    try {
      $result->success = $this->handler_->get_guild_applications_by_uids($args->tid, $args->uids, $args->columns, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_guild_applications_by_uids', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_guild_applications_by_uids', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_handle_applications($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_handle_applications_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_handle_applications_result();
    try {
      $result->success = $this->handler_->handle_applications($args->tid, $args->uids, $args->new_role, $args->admin_uid, $args->admin_nick, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'handle_applications', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('handle_applications', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_guild_exited_members_count($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_guild_exited_members_count_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_guild_exited_members_count_result();
    try {
      $result->success = $this->handler_->get_guild_exited_members_count($args->tid, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_guild_exited_members_count', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_guild_exited_members_count', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_guild_exited_members_per_page($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_guild_exited_members_per_page_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_guild_exited_members_per_page_result();
    try {
      $result->success = $this->handler_->get_guild_exited_members_per_page($args->tid, $args->columns, $args->page, $args->per_page, $args->order_by, $args->descending, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_guild_exited_members_per_page', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_guild_exited_members_per_page', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_guild_exited_members_by_uids($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_guild_exited_members_by_uids_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_guild_exited_members_by_uids_result();
    try {
      $result->success = $this->handler_->get_guild_exited_members_by_uids($args->tid, $args->uids, $args->columns, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_guild_exited_members_by_uids', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_guild_exited_members_by_uids', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_set_apply_guild_notify($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_set_apply_guild_notify_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_set_apply_guild_notify_result();
    try {
      $result->success = $this->handler_->set_apply_guild_notify($args->tid, $args->isNotify, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'set_apply_guild_notify', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('set_apply_guild_notify', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_apply_guild_notify($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_apply_guild_notify_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_apply_guild_notify_result();
    try {
      $result->success = $this->handler_->get_apply_guild_notify($args->tid, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_apply_guild_notify', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_apply_guild_notify', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_create_session($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_create_session_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_create_session_result();
    try {
      $result->success = $this->handler_->create_session($args->sid, $args->name, $args->isp, $args->blimit, $args->bpub, $args->typestr, $args->type, $args->uid, $args->ip, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'create_session', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('create_session', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_create_session2($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_create_session2_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_create_session2_result();
    try {
      $result->success = $this->handler_->create_session2($args->sid, $args->name, $args->isp, $args->blimit, $args->bpub, $args->typestr, $args->type, $args->uid, $args->ip, $args->area, $args->language);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'create_session2', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('create_session2', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_session_list($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_list_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_session_list_result();
    try {
      $result->success = $this->handler_->get_session_list($args->uid, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_session_list', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_session_list', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_active_uid($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_active_uid_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_active_uid_result();
    try {
      $result->success = $this->handler_->active_uid($args->passport, $args->sha1Passwd, $args->ip, $args->nick, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'active_uid', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('active_uid', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_active_uid_and_imid($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_active_uid_and_imid_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_active_uid_and_imid_result();
    try {
      $result->success = $this->handler_->active_uid_and_imid($args->passport, $args->sha1Passwd, $args->ip, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'active_uid_and_imid', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('active_uid_and_imid', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_check_global_ban($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_check_global_ban_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_check_global_ban_result();
    try {
      $result->success = $this->handler_->check_global_ban($args->uid, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'check_global_ban', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('check_global_ban', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_check_cookie($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_check_cookie_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_check_cookie_result();
    try {
      $result->success = $this->handler_->check_cookie($args->cookie, $args->uid, $args->expirtime, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'check_cookie', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('check_cookie', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_enable_autio_high_quality($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_enable_autio_high_quality_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_enable_autio_high_quality_result();
    try {
      $result->success = $this->handler_->enable_autio_high_quality($args->sid, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'enable_autio_high_quality', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('enable_autio_high_quality', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_erase_subsession_admin($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_erase_subsession_admin_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_erase_subsession_admin_result();
    try {
      $result->success = $this->handler_->erase_subsession_admin($args->sid, $args->uids, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'erase_subsession_admin', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('erase_subsession_admin', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_set_subsession_order($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_set_subsession_order_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_set_subsession_order_result();
    try {
      $result->success = $this->handler_->set_subsession_order($args->pid, $args->sids, $args->orders, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'set_subsession_order', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('set_subsession_order', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_get_user_psw($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_get_user_psw_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_get_user_psw_result();
    try {
      $result->success = $this->handler_->get_user_psw($args->uid, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'get_user_psw', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('get_user_psw', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_reset_account_by_passport($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_reset_account_by_passport_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_reset_account_by_passport_result();
    try {
      $result->success = $this->handler_->reset_account_by_passport($args->account, $args->passport, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'reset_account_by_passport', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('reset_account_by_passport', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_reset_passwd_by_passport($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_reset_passwd_by_passport_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_reset_passwd_by_passport_result();
    try {
      $result->success = $this->handler_->reset_passwd_by_passport($args->passwd, $args->passport, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'reset_passwd_by_passport', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('reset_passwd_by_passport', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_reset_passwd_by_passport_ip($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_reset_passwd_by_passport_ip_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_reset_passwd_by_passport_ip_result();
    try {
      $result->success = $this->handler_->reset_passwd_by_passport_ip($args->passwd, $args->passport, $args->ip, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'reset_passwd_by_passport_ip', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('reset_passwd_by_passport_ip', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_resume_members($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_resume_members_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_resume_members_result();
    try {
      $result->success = $this->handler_->resume_members($args->tid, $args->uids, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'resume_members', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('resume_members', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_validate_user_pwd($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_validate_user_pwd_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_validate_user_pwd_result();
    try {
      $result->success = $this->handler_->validate_user_pwd($args->passport, $args->shapasswd, $args->yzm_auth, $args->ip, $args->app_type, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'validate_user_pwd', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('validate_user_pwd', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_validate_user_pwd_by_uid($seqid, $input, $output) {
    $args = new \Services\webdb_gateway_service\webdb_gateway_service_validate_user_pwd_by_uid_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Services\webdb_gateway_service\webdb_gateway_service_validate_user_pwd_by_uid_result();
    try {
      $result->success = $this->handler_->validate_user_pwd_by_uid($args->uid, $args->shapasswd, $args->time, $args->ip, $args->app_type, $args->cl);
    } catch (\Services\webdb_gateway_service\service_exception $ex) {
      $result->ex = $ex;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'validate_user_pwd_by_uid', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('validate_user_pwd_by_uid', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
}

